
finaaaaaal_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  000033e8  0000347c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080016a  0080016a  00003586  2**0
                  ALLOC
  3 .stab         00002c58  00000000  00000000  00003588  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000167b  00000000  00000000  000061e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000785b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000079fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c554  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c714  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ca0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__vector_4>
      14:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <__vector_5>
      18:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__vector_6>
      1c:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__vector_7>
      20:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__vector_8>
      24:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__vector_9>
      28:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__vector_10>
      2c:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__vector_11>
      30:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <main>
      8a:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 df 19 	jmp	0x33be	; 0x33be <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 df 19 	jmp	0x33be	; 0x33be <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_Init>:
#include"std_types.h"




void ADC_Init(uint8 pinno) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA_Reg, 7);//Enabling the ADC
     e3a:	a6 e2       	ldi	r26, 0x26	; 38
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e6 e2       	ldi	r30, 0x26	; 38
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Reg, 6);//Start of conversion
     e48:	a6 e2       	ldi	r26, 0x26	; 38
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e6 e2       	ldi	r30, 0x26	; 38
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 64       	ori	r24, 0x40	; 64
     e54:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_Reg, 5);//Disabling AutoTrigger
     e56:	a6 e2       	ldi	r26, 0x26	; 38
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e6 e2       	ldi	r30, 0x26	; 38
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7d       	andi	r24, 0xDF	; 223
     e62:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Reg, 4);//Clearing the ADC Flag 
     e64:	a6 e2       	ldi	r26, 0x26	; 38
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e6 e2       	ldi	r30, 0x26	; 38
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 61       	ori	r24, 0x10	; 16
     e70:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_Reg, 3);//Disabling Interrupt
     e72:	a6 e2       	ldi	r26, 0x26	; 38
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e6 e2       	ldi	r30, 0x26	; 38
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	87 7f       	andi	r24, 0xF7	; 247
     e7e:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_Reg, 2);//Setting the pre-scaler 128
     e80:	a6 e2       	ldi	r26, 0x26	; 38
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e6 e2       	ldi	r30, 0x26	; 38
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8b 7f       	andi	r24, 0xFB	; 251
     e8c:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_Reg, 1);//Setting the pre-scaler 128
     e8e:	a6 e2       	ldi	r26, 0x26	; 38
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e6 e2       	ldi	r30, 0x26	; 38
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8d 7f       	andi	r24, 0xFD	; 253
     e9a:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_Reg, 0);//Setting the pre-scaler 128
     e9c:	a6 e2       	ldi	r26, 0x26	; 38
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e6 e2       	ldi	r30, 0x26	; 38
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8e 7f       	andi	r24, 0xFE	; 254
     ea8:	8c 93       	st	X, r24


	if (pinno == 0) {
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	88 23       	and	r24, r24
     eae:	19 f5       	brne	.+70     	; 0xef6 <ADC_Init+0xc8>
		CLR_BIT(ADMUX_Reg, 0);//Selecting ADC0
     eb0:	a7 e2       	ldi	r26, 0x27	; 39
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e7 e2       	ldi	r30, 0x27	; 39
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8e 7f       	andi	r24, 0xFE	; 254
     ebc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 1);//Selecting ADC0
     ebe:	a7 e2       	ldi	r26, 0x27	; 39
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e7 e2       	ldi	r30, 0x27	; 39
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8d 7f       	andi	r24, 0xFD	; 253
     eca:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 2);//Selecting ADC0
     ecc:	a7 e2       	ldi	r26, 0x27	; 39
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e7 e2       	ldi	r30, 0x27	; 39
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8b 7f       	andi	r24, 0xFB	; 251
     ed8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC0
     eda:	a7 e2       	ldi	r26, 0x27	; 39
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e7 e2       	ldi	r30, 0x27	; 39
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	87 7f       	andi	r24, 0xF7	; 247
     ee6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC0
     ee8:	a7 e2       	ldi	r26, 0x27	; 39
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e7 e2       	ldi	r30, 0x27	; 39
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8f 7e       	andi	r24, 0xEF	; 239
     ef4:	8c 93       	st	X, r24
	}
	if (pinno == 1) {
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	19 f5       	brne	.+70     	; 0xf42 <ADC_Init+0x114>
		SET_BIT(ADMUX_Reg, 0);//Selecting ADC1
     efc:	a7 e2       	ldi	r26, 0x27	; 39
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e7 e2       	ldi	r30, 0x27	; 39
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	81 60       	ori	r24, 0x01	; 1
     f08:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 1);//Selecting ADC1
     f0a:	a7 e2       	ldi	r26, 0x27	; 39
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e7 e2       	ldi	r30, 0x27	; 39
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	8d 7f       	andi	r24, 0xFD	; 253
     f16:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 2);//Selecting ADC1
     f18:	a7 e2       	ldi	r26, 0x27	; 39
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e7 e2       	ldi	r30, 0x27	; 39
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8b 7f       	andi	r24, 0xFB	; 251
     f24:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC1
     f26:	a7 e2       	ldi	r26, 0x27	; 39
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e7 e2       	ldi	r30, 0x27	; 39
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	87 7f       	andi	r24, 0xF7	; 247
     f32:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC1
     f34:	a7 e2       	ldi	r26, 0x27	; 39
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e7 e2       	ldi	r30, 0x27	; 39
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 7e       	andi	r24, 0xEF	; 239
     f40:	8c 93       	st	X, r24
	}
	if (pinno == 2) {
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	19 f5       	brne	.+70     	; 0xf8e <ADC_Init+0x160>
		CLR_BIT(ADMUX_Reg, 0);//Selecting ADC2
     f48:	a7 e2       	ldi	r26, 0x27	; 39
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e7 e2       	ldi	r30, 0x27	; 39
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8e 7f       	andi	r24, 0xFE	; 254
     f54:	8c 93       	st	X, r24
		SET_BIT(ADMUX_Reg, 1);//Selecting ADC2
     f56:	a7 e2       	ldi	r26, 0x27	; 39
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e7 e2       	ldi	r30, 0x27	; 39
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	82 60       	ori	r24, 0x02	; 2
     f62:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 2);//Selecting ADC2
     f64:	a7 e2       	ldi	r26, 0x27	; 39
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e7 e2       	ldi	r30, 0x27	; 39
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8b 7f       	andi	r24, 0xFB	; 251
     f70:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC2
     f72:	a7 e2       	ldi	r26, 0x27	; 39
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e7 e2       	ldi	r30, 0x27	; 39
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	87 7f       	andi	r24, 0xF7	; 247
     f7e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC2
     f80:	a7 e2       	ldi	r26, 0x27	; 39
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e7 e2       	ldi	r30, 0x27	; 39
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8f 7e       	andi	r24, 0xEF	; 239
     f8c:	8c 93       	st	X, r24
	}
	if (pinno == 3) {
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	19 f5       	brne	.+70     	; 0xfda <ADC_Init+0x1ac>
		SET_BIT(ADMUX_Reg, 0);//Selecting ADC3
     f94:	a7 e2       	ldi	r26, 0x27	; 39
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e7 e2       	ldi	r30, 0x27	; 39
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	81 60       	ori	r24, 0x01	; 1
     fa0:	8c 93       	st	X, r24
		SET_BIT(ADMUX_Reg, 1);//Selecting ADC3
     fa2:	a7 e2       	ldi	r26, 0x27	; 39
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e7 e2       	ldi	r30, 0x27	; 39
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	82 60       	ori	r24, 0x02	; 2
     fae:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 2);//Selecting ADC3
     fb0:	a7 e2       	ldi	r26, 0x27	; 39
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e7 e2       	ldi	r30, 0x27	; 39
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8b 7f       	andi	r24, 0xFB	; 251
     fbc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC3
     fbe:	a7 e2       	ldi	r26, 0x27	; 39
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e7 e2       	ldi	r30, 0x27	; 39
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	87 7f       	andi	r24, 0xF7	; 247
     fca:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC3
     fcc:	a7 e2       	ldi	r26, 0x27	; 39
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e7 e2       	ldi	r30, 0x27	; 39
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 7e       	andi	r24, 0xEF	; 239
     fd8:	8c 93       	st	X, r24
	}

	if (pinno == 4) {
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	19 f5       	brne	.+70     	; 0x1026 <ADC_Init+0x1f8>
		CLR_BIT(ADMUX_Reg, 0);//Selecting ADC4
     fe0:	a7 e2       	ldi	r26, 0x27	; 39
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e7 e2       	ldi	r30, 0x27	; 39
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8e 7f       	andi	r24, 0xFE	; 254
     fec:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 1);//Selecting ADC4
     fee:	a7 e2       	ldi	r26, 0x27	; 39
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e7 e2       	ldi	r30, 0x27	; 39
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8d 7f       	andi	r24, 0xFD	; 253
     ffa:	8c 93       	st	X, r24
		SET_BIT(ADMUX_Reg, 2);//Selecting ADC4
     ffc:	a7 e2       	ldi	r26, 0x27	; 39
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e7 e2       	ldi	r30, 0x27	; 39
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	84 60       	ori	r24, 0x04	; 4
    1008:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC4
    100a:	a7 e2       	ldi	r26, 0x27	; 39
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e7 e2       	ldi	r30, 0x27	; 39
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	87 7f       	andi	r24, 0xF7	; 247
    1016:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC4
    1018:	a7 e2       	ldi	r26, 0x27	; 39
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e7 e2       	ldi	r30, 0x27	; 39
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8f 7e       	andi	r24, 0xEF	; 239
    1024:	8c 93       	st	X, r24
	}

	if (pinno == 5) {
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	85 30       	cpi	r24, 0x05	; 5
    102a:	19 f5       	brne	.+70     	; 0x1072 <ADC_Init+0x244>
		SET_BIT(ADMUX_Reg, 0);//Selecting ADC5
    102c:	a7 e2       	ldi	r26, 0x27	; 39
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e7 e2       	ldi	r30, 0x27	; 39
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 1);//Selecting ADC5
    103a:	a7 e2       	ldi	r26, 0x27	; 39
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e7 e2       	ldi	r30, 0x27	; 39
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8d 7f       	andi	r24, 0xFD	; 253
    1046:	8c 93       	st	X, r24
		SET_BIT(ADMUX_Reg, 2);//Selecting ADC5
    1048:	a7 e2       	ldi	r26, 0x27	; 39
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e7 e2       	ldi	r30, 0x27	; 39
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	84 60       	ori	r24, 0x04	; 4
    1054:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC5
    1056:	a7 e2       	ldi	r26, 0x27	; 39
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e7 e2       	ldi	r30, 0x27	; 39
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	87 7f       	andi	r24, 0xF7	; 247
    1062:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC5
    1064:	a7 e2       	ldi	r26, 0x27	; 39
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e7 e2       	ldi	r30, 0x27	; 39
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8f 7e       	andi	r24, 0xEF	; 239
    1070:	8c 93       	st	X, r24
	}

	if (pinno == 6) {
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	86 30       	cpi	r24, 0x06	; 6
    1076:	19 f5       	brne	.+70     	; 0x10be <ADC_Init+0x290>
		CLR_BIT(ADMUX_Reg, 0);//Selecting ADC6
    1078:	a7 e2       	ldi	r26, 0x27	; 39
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e7 e2       	ldi	r30, 0x27	; 39
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8e 7f       	andi	r24, 0xFE	; 254
    1084:	8c 93       	st	X, r24
		SET_BIT(ADMUX_Reg, 1);//Selecting ADC6
    1086:	a7 e2       	ldi	r26, 0x27	; 39
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e7 e2       	ldi	r30, 0x27	; 39
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	82 60       	ori	r24, 0x02	; 2
    1092:	8c 93       	st	X, r24
		SET_BIT(ADMUX_Reg, 2);//Selecting ADC6
    1094:	a7 e2       	ldi	r26, 0x27	; 39
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e7 e2       	ldi	r30, 0x27	; 39
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	84 60       	ori	r24, 0x04	; 4
    10a0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC6
    10a2:	a7 e2       	ldi	r26, 0x27	; 39
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e7 e2       	ldi	r30, 0x27	; 39
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	87 7f       	andi	r24, 0xF7	; 247
    10ae:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC6
    10b0:	a7 e2       	ldi	r26, 0x27	; 39
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e7 e2       	ldi	r30, 0x27	; 39
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	8f 7e       	andi	r24, 0xEF	; 239
    10bc:	8c 93       	st	X, r24
	}
	if (pinno == 7) {
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	87 30       	cpi	r24, 0x07	; 7
    10c2:	19 f5       	brne	.+70     	; 0x110a <ADC_Init+0x2dc>
		SET_BIT(ADMUX_Reg, 0);//Selecting ADC7
    10c4:	a7 e2       	ldi	r26, 0x27	; 39
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e7 e2       	ldi	r30, 0x27	; 39
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	81 60       	ori	r24, 0x01	; 1
    10d0:	8c 93       	st	X, r24
		SET_BIT(ADMUX_Reg, 1);//Selecting ADC7
    10d2:	a7 e2       	ldi	r26, 0x27	; 39
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e7 e2       	ldi	r30, 0x27	; 39
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	82 60       	ori	r24, 0x02	; 2
    10de:	8c 93       	st	X, r24
		SET_BIT(ADMUX_Reg, 2);//Selecting ADC7
    10e0:	a7 e2       	ldi	r26, 0x27	; 39
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e7 e2       	ldi	r30, 0x27	; 39
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	84 60       	ori	r24, 0x04	; 4
    10ec:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC7
    10ee:	a7 e2       	ldi	r26, 0x27	; 39
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e7 e2       	ldi	r30, 0x27	; 39
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	87 7f       	andi	r24, 0xF7	; 247
    10fa:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC7
    10fc:	a7 e2       	ldi	r26, 0x27	; 39
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e7 e2       	ldi	r30, 0x27	; 39
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8f 7e       	andi	r24, 0xEF	; 239
    1108:	8c 93       	st	X, r24
	}

	CLR_BIT(ADMUX_Reg, 5);//ADC Right Adjustment
    110a:	a7 e2       	ldi	r26, 0x27	; 39
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e7 e2       	ldi	r30, 0x27	; 39
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8f 7d       	andi	r24, 0xDF	; 223
    1116:	8c 93       	st	X, r24
	SET_BIT(ADMUX_Reg, 6);//Selecting AVCC as Vref
    1118:	a7 e2       	ldi	r26, 0x27	; 39
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e7 e2       	ldi	r30, 0x27	; 39
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	80 64       	ori	r24, 0x40	; 64
    1124:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_Reg, 7);//Selecting AVCC as Vref
    1126:	a7 e2       	ldi	r26, 0x27	; 39
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e7 e2       	ldi	r30, 0x27	; 39
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	8f 77       	andi	r24, 0x7F	; 127
    1132:	8c 93       	st	X, r24
}
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <ADC_GetResult>:


uint16 ADC_GetResult(uint8 pinno){
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <ADC_GetResult+0x6>
    1142:	0f 92       	push	r0
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ADC_Result = 0;//Result
    114a:	1a 82       	std	Y+2, r1	; 0x02
    114c:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(ADCSRA_Reg, 6);//Starting a single Conversion
    114e:	a6 e2       	ldi	r26, 0x26	; 38
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e6 e2       	ldi	r30, 0x26	; 38
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	80 64       	ori	r24, 0x40	; 64
    115a:	8c 93       	st	X, r24
	
	while (RD_BIT(ADCSRA_Reg, 4) == 0);//checking for the ADC Flag 
    115c:	e6 e2       	ldi	r30, 0x26	; 38
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	80 71       	andi	r24, 0x10	; 16
    1168:	90 70       	andi	r25, 0x00	; 0
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	b9 f3       	breq	.-18     	; 0x115c <ADC_GetResult+0x20>

	ADC_Result = (ADCL_Reg | (ADCH_Reg << 8));
    116e:	e4 e2       	ldi	r30, 0x24	; 36
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	e5 e2       	ldi	r30, 0x25	; 37
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	98 2f       	mov	r25, r24
    1184:	88 27       	eor	r24, r24
    1186:	82 2b       	or	r24, r18
    1188:	93 2b       	or	r25, r19
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(ADCSRA_Reg, 4);//Clearing the ADC Flag
    118e:	a6 e2       	ldi	r26, 0x26	; 38
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e6 e2       	ldi	r30, 0x26	; 38
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 61       	ori	r24, 0x10	; 16
    119a:	8c 93       	st	X, r24

	return ADC_Result;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <ADC_GetTemp>:

uint16 ADC_GetTemp(uint8 pinno) {
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	0f 92       	push	r0
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	89 83       	std	Y+1, r24	; 0x01

	ADC_Init(pinno);
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_Init>

	return ADC_GetResult(pinno) / 2;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	0e 94 9e 08 	call	0x113c	; 0x113c <ADC_GetResult>
    11c4:	96 95       	lsr	r25
    11c6:	87 95       	ror	r24
}
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <ADC_FlameState>:

uint8 ADC_FlameState(uint8 pinno) {
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <ADC_FlameState+0x6>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	89 83       	std	Y+1, r24	; 0x01

	ADC_Init(pinno);
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_Init>
    if(ADC_GetResult(pinno)==1023)return 1;
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	0e 94 9e 08 	call	0x113c	; 0x113c <ADC_GetResult>
    11e8:	23 e0       	ldi	r18, 0x03	; 3
    11ea:	8f 3f       	cpi	r24, 0xFF	; 255
    11ec:	92 07       	cpc	r25, r18
    11ee:	19 f4       	brne	.+6      	; 0x11f6 <ADC_FlameState+0x26>
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	8a 83       	std	Y+2, r24	; 0x02
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <ADC_FlameState+0x28>
    else return 0;
    11f6:	1a 82       	std	Y+2, r1	; 0x02
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02

}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <DIO_Init>:


#include "DIO_Interface.h"


void DIO_Init(void) {
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    DDRA_REG = DDRA_INIT;
    120c:	ea e3       	ldi	r30, 0x3A	; 58
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	10 82       	st	Z, r1
    DDRB_REG = DDRB_INIT;
    1212:	e7 e3       	ldi	r30, 0x37	; 55
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	10 82       	st	Z, r1
    DDRC_REG = DDRC_INIT;
    1218:	e4 e3       	ldi	r30, 0x34	; 52
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8f e3       	ldi	r24, 0x3F	; 63
    121e:	80 83       	st	Z, r24
    DDRD_REG = DDRD_INIT;
    1220:	e1 e3       	ldi	r30, 0x31	; 49
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	81 e1       	ldi	r24, 0x11	; 17
    1226:	80 83       	st	Z, r24
    PORTA_REG = PORTA_INIT; 
    1228:	eb e3       	ldi	r30, 0x3B	; 59
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	10 82       	st	Z, r1
    PORTB_REG = PORTB_INIT;
    122e:	e8 e3       	ldi	r30, 0x38	; 56
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	10 82       	st	Z, r1
    PORTC_REG = PORTC_INIT;
    1234:	e5 e3       	ldi	r30, 0x35	; 53
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	10 82       	st	Z, r1
    PORTD_REG = PORTD_INIT;
    123a:	e2 e3       	ldi	r30, 0x32	; 50
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	10 82       	st	Z, r1
} 
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <DIO_SetPinDirection>:

void DIO_SetPinDirection(uint8 portno, uint8 pinno, uint8 state) {
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	27 97       	sbiw	r28, 0x07	; 7
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	6a 83       	std	Y+2, r22	; 0x02
    125e:	4b 83       	std	Y+3, r20	; 0x03

    if (state == INPUT) {
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	88 23       	and	r24, r24
    1264:	09 f0       	breq	.+2      	; 0x1268 <DIO_SetPinDirection+0x22>
    1266:	74 c0       	rjmp	.+232    	; 0x1350 <DIO_SetPinDirection+0x10a>
        switch(portno) {
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	3f 83       	std	Y+7, r19	; 0x07
    1270:	2e 83       	std	Y+6, r18	; 0x06
    1272:	8e 81       	ldd	r24, Y+6	; 0x06
    1274:	9f 81       	ldd	r25, Y+7	; 0x07
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	91 05       	cpc	r25, r1
    127a:	59 f1       	breq	.+86     	; 0x12d2 <DIO_SetPinDirection+0x8c>
    127c:	2e 81       	ldd	r18, Y+6	; 0x06
    127e:	3f 81       	ldd	r19, Y+7	; 0x07
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	2c f4       	brge	.+10     	; 0x1290 <DIO_SetPinDirection+0x4a>
    1286:	8e 81       	ldd	r24, Y+6	; 0x06
    1288:	9f 81       	ldd	r25, Y+7	; 0x07
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	69 f0       	breq	.+26     	; 0x12a8 <DIO_SetPinDirection+0x62>
    128e:	d2 c0       	rjmp	.+420    	; 0x1434 <DIO_SetPinDirection+0x1ee>
    1290:	2e 81       	ldd	r18, Y+6	; 0x06
    1292:	3f 81       	ldd	r19, Y+7	; 0x07
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	89 f1       	breq	.+98     	; 0x12fc <DIO_SetPinDirection+0xb6>
    129a:	8e 81       	ldd	r24, Y+6	; 0x06
    129c:	9f 81       	ldd	r25, Y+7	; 0x07
    129e:	83 30       	cpi	r24, 0x03	; 3
    12a0:	91 05       	cpc	r25, r1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <DIO_SetPinDirection+0x60>
    12a4:	40 c0       	rjmp	.+128    	; 0x1326 <DIO_SetPinDirection+0xe0>
    12a6:	c6 c0       	rjmp	.+396    	; 0x1434 <DIO_SetPinDirection+0x1ee>
            case PORTA_: CLR_BIT(DDRA_REG, pinno); break;
    12a8:	aa e3       	ldi	r26, 0x3A	; 58
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ea e3       	ldi	r30, 0x3A	; 58
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_SetPinDirection+0x80>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_SetPinDirection+0x7c>
    12ca:	80 95       	com	r24
    12cc:	84 23       	and	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	b1 c0       	rjmp	.+354    	; 0x1434 <DIO_SetPinDirection+0x1ee>
            case PORTB_: CLR_BIT(DDRB_REG, pinno); break;
    12d2:	a7 e3       	ldi	r26, 0x37	; 55
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e7 e3       	ldi	r30, 0x37	; 55
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_SetPinDirection+0xaa>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_SetPinDirection+0xa6>
    12f4:	80 95       	com	r24
    12f6:	84 23       	and	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	9c c0       	rjmp	.+312    	; 0x1434 <DIO_SetPinDirection+0x1ee>
            case PORTC_: CLR_BIT(DDRC_REG, pinno); break;
    12fc:	a4 e3       	ldi	r26, 0x34	; 52
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_SetPinDirection+0xd4>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_SetPinDirection+0xd0>
    131e:	80 95       	com	r24
    1320:	84 23       	and	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	87 c0       	rjmp	.+270    	; 0x1434 <DIO_SetPinDirection+0x1ee>
            case PORTD_: CLR_BIT(DDRD_REG, pinno); break;       
    1326:	a1 e3       	ldi	r26, 0x31	; 49
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e1 e3       	ldi	r30, 0x31	; 49
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_SetPinDirection+0xfe>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_SetPinDirection+0xfa>
    1348:	80 95       	com	r24
    134a:	84 23       	and	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	72 c0       	rjmp	.+228    	; 0x1434 <DIO_SetPinDirection+0x1ee>
            default: break;  
        }
    }
    else if (state == OUTPUT) {
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	09 f0       	breq	.+2      	; 0x1358 <DIO_SetPinDirection+0x112>
    1356:	6e c0       	rjmp	.+220    	; 0x1434 <DIO_SetPinDirection+0x1ee>
        switch(portno) {
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3d 83       	std	Y+5, r19	; 0x05
    1360:	2c 83       	std	Y+4, r18	; 0x04
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	49 f1       	breq	.+82     	; 0x13be <DIO_SetPinDirection+0x178>
    136c:	2c 81       	ldd	r18, Y+4	; 0x04
    136e:	3d 81       	ldd	r19, Y+5	; 0x05
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	2c f4       	brge	.+10     	; 0x1380 <DIO_SetPinDirection+0x13a>
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	61 f0       	breq	.+24     	; 0x1396 <DIO_SetPinDirection+0x150>
    137e:	5a c0       	rjmp	.+180    	; 0x1434 <DIO_SetPinDirection+0x1ee>
    1380:	2c 81       	ldd	r18, Y+4	; 0x04
    1382:	3d 81       	ldd	r19, Y+5	; 0x05
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	71 f1       	breq	.+92     	; 0x13e6 <DIO_SetPinDirection+0x1a0>
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	e9 f1       	breq	.+122    	; 0x140e <DIO_SetPinDirection+0x1c8>
    1394:	4f c0       	rjmp	.+158    	; 0x1434 <DIO_SetPinDirection+0x1ee>
            case PORTA_: SET_BIT(DDRA_REG, pinno); break;
    1396:	aa e3       	ldi	r26, 0x3A	; 58
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ea e3       	ldi	r30, 0x3A	; 58
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_SetPinDirection+0x16e>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_SetPinDirection+0x16a>
    13b8:	84 2b       	or	r24, r20
    13ba:	8c 93       	st	X, r24
    13bc:	3b c0       	rjmp	.+118    	; 0x1434 <DIO_SetPinDirection+0x1ee>
            case PORTB_: SET_BIT(DDRB_REG, pinno); break;
    13be:	a7 e3       	ldi	r26, 0x37	; 55
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e7 e3       	ldi	r30, 0x37	; 55
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_SetPinDirection+0x196>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_SetPinDirection+0x192>
    13e0:	84 2b       	or	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	27 c0       	rjmp	.+78     	; 0x1434 <DIO_SetPinDirection+0x1ee>
            case PORTC_: SET_BIT(DDRC_REG, pinno); break;
    13e6:	a4 e3       	ldi	r26, 0x34	; 52
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e4 e3       	ldi	r30, 0x34	; 52
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_SetPinDirection+0x1be>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_SetPinDirection+0x1ba>
    1408:	84 2b       	or	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	13 c0       	rjmp	.+38     	; 0x1434 <DIO_SetPinDirection+0x1ee>
            case PORTD_: SET_BIT(DDRD_REG, pinno); break;    
    140e:	a1 e3       	ldi	r26, 0x31	; 49
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e1 e3       	ldi	r30, 0x31	; 49
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_SetPinDirection+0x1e6>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_SetPinDirection+0x1e2>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
            default: break;     
        }
    }
}
    1434:	27 96       	adiw	r28, 0x07	; 7
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <DIO_SetPortDirection>:

void DIO_SetPortDirection(uint8 portno, uint8 state) {
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <DIO_SetPortDirection+0x6>
    144c:	00 d0       	rcall	.+0      	; 0x144e <DIO_SetPortDirection+0x8>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	6a 83       	std	Y+2, r22	; 0x02
    switch(portno) {
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3c 83       	std	Y+4, r19	; 0x04
    145e:	2b 83       	std	Y+3, r18	; 0x03
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	d1 f0       	breq	.+52     	; 0x149e <DIO_SetPortDirection+0x58>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	2c f4       	brge	.+10     	; 0x147e <DIO_SetPortDirection+0x38>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	61 f0       	breq	.+24     	; 0x1494 <DIO_SetPortDirection+0x4e>
    147c:	1e c0       	rjmp	.+60     	; 0x14ba <DIO_SetPortDirection+0x74>
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	81 f0       	breq	.+32     	; 0x14a8 <DIO_SetPortDirection+0x62>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	91 05       	cpc	r25, r1
    1490:	81 f0       	breq	.+32     	; 0x14b2 <DIO_SetPortDirection+0x6c>
    1492:	13 c0       	rjmp	.+38     	; 0x14ba <DIO_SetPortDirection+0x74>
        case PORTA_: DDRA_REG = state; break;
    1494:	ea e3       	ldi	r30, 0x3A	; 58
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	80 83       	st	Z, r24
    149c:	0e c0       	rjmp	.+28     	; 0x14ba <DIO_SetPortDirection+0x74>
        case PORTB_: DDRB_REG = state; break;
    149e:	e7 e3       	ldi	r30, 0x37	; 55
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	80 83       	st	Z, r24
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <DIO_SetPortDirection+0x74>
        case PORTC_: DDRC_REG = state; break;
    14a8:	e4 e3       	ldi	r30, 0x34	; 52
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	80 83       	st	Z, r24
    14b0:	04 c0       	rjmp	.+8      	; 0x14ba <DIO_SetPortDirection+0x74>
        case PORTD_: DDRD_REG = state; break;        
    14b2:	e1 e3       	ldi	r30, 0x31	; 49
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	80 83       	st	Z, r24
        default: break; 
        }
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <DIO_SetPinValue>:

void DIO_SetPinValue(uint8 portno, uint8 pinno, uint8 value) {
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	27 97       	sbiw	r28, 0x07	; 7
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	6a 83       	std	Y+2, r22	; 0x02
    14e0:	4b 83       	std	Y+3, r20	; 0x03
    if (value == LOW) {
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 23       	and	r24, r24
    14e6:	09 f0       	breq	.+2      	; 0x14ea <DIO_SetPinValue+0x22>
    14e8:	74 c0       	rjmp	.+232    	; 0x15d2 <DIO_SetPinValue+0x10a>
        switch(portno) {
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3f 83       	std	Y+7, r19	; 0x07
    14f2:	2e 83       	std	Y+6, r18	; 0x06
    14f4:	8e 81       	ldd	r24, Y+6	; 0x06
    14f6:	9f 81       	ldd	r25, Y+7	; 0x07
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	91 05       	cpc	r25, r1
    14fc:	59 f1       	breq	.+86     	; 0x1554 <DIO_SetPinValue+0x8c>
    14fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1500:	3f 81       	ldd	r19, Y+7	; 0x07
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	2c f4       	brge	.+10     	; 0x1512 <DIO_SetPinValue+0x4a>
    1508:	8e 81       	ldd	r24, Y+6	; 0x06
    150a:	9f 81       	ldd	r25, Y+7	; 0x07
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	69 f0       	breq	.+26     	; 0x152a <DIO_SetPinValue+0x62>
    1510:	d2 c0       	rjmp	.+420    	; 0x16b6 <DIO_SetPinValue+0x1ee>
    1512:	2e 81       	ldd	r18, Y+6	; 0x06
    1514:	3f 81       	ldd	r19, Y+7	; 0x07
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	89 f1       	breq	.+98     	; 0x157e <DIO_SetPinValue+0xb6>
    151c:	8e 81       	ldd	r24, Y+6	; 0x06
    151e:	9f 81       	ldd	r25, Y+7	; 0x07
    1520:	83 30       	cpi	r24, 0x03	; 3
    1522:	91 05       	cpc	r25, r1
    1524:	09 f4       	brne	.+2      	; 0x1528 <DIO_SetPinValue+0x60>
    1526:	40 c0       	rjmp	.+128    	; 0x15a8 <DIO_SetPinValue+0xe0>
    1528:	c6 c0       	rjmp	.+396    	; 0x16b6 <DIO_SetPinValue+0x1ee>
            case PORTA_: CLR_BIT(PORTA_REG, pinno); break;
    152a:	ab e3       	ldi	r26, 0x3B	; 59
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e3       	ldi	r30, 0x3B	; 59
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_SetPinValue+0x80>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_SetPinValue+0x7c>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	b1 c0       	rjmp	.+354    	; 0x16b6 <DIO_SetPinValue+0x1ee>
            case PORTB_: CLR_BIT(PORTB_REG, pinno); break;
    1554:	a8 e3       	ldi	r26, 0x38	; 56
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e8 e3       	ldi	r30, 0x38	; 56
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_SetPinValue+0xaa>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_SetPinValue+0xa6>
    1576:	80 95       	com	r24
    1578:	84 23       	and	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	9c c0       	rjmp	.+312    	; 0x16b6 <DIO_SetPinValue+0x1ee>
            case PORTC_: CLR_BIT(PORTC_REG, pinno); break;
    157e:	a5 e3       	ldi	r26, 0x35	; 53
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 e3       	ldi	r30, 0x35	; 53
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_SetPinValue+0xd4>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_SetPinValue+0xd0>
    15a0:	80 95       	com	r24
    15a2:	84 23       	and	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	87 c0       	rjmp	.+270    	; 0x16b6 <DIO_SetPinValue+0x1ee>
            case PORTD_: CLR_BIT(PORTD_REG, pinno); break;   
    15a8:	a2 e3       	ldi	r26, 0x32	; 50
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e2 e3       	ldi	r30, 0x32	; 50
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_SetPinValue+0xfe>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_SetPinValue+0xfa>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	72 c0       	rjmp	.+228    	; 0x16b6 <DIO_SetPinValue+0x1ee>
            default: break;      
        }
    }
    else if (value == HIGH) {
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	09 f0       	breq	.+2      	; 0x15da <DIO_SetPinValue+0x112>
    15d8:	6e c0       	rjmp	.+220    	; 0x16b6 <DIO_SetPinValue+0x1ee>
        switch(portno) {
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3d 83       	std	Y+5, r19	; 0x05
    15e2:	2c 83       	std	Y+4, r18	; 0x04
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	91 05       	cpc	r25, r1
    15ec:	49 f1       	breq	.+82     	; 0x1640 <DIO_SetPinValue+0x178>
    15ee:	2c 81       	ldd	r18, Y+4	; 0x04
    15f0:	3d 81       	ldd	r19, Y+5	; 0x05
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	2c f4       	brge	.+10     	; 0x1602 <DIO_SetPinValue+0x13a>
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	61 f0       	breq	.+24     	; 0x1618 <DIO_SetPinValue+0x150>
    1600:	5a c0       	rjmp	.+180    	; 0x16b6 <DIO_SetPinValue+0x1ee>
    1602:	2c 81       	ldd	r18, Y+4	; 0x04
    1604:	3d 81       	ldd	r19, Y+5	; 0x05
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	71 f1       	breq	.+92     	; 0x1668 <DIO_SetPinValue+0x1a0>
    160c:	8c 81       	ldd	r24, Y+4	; 0x04
    160e:	9d 81       	ldd	r25, Y+5	; 0x05
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	91 05       	cpc	r25, r1
    1614:	e9 f1       	breq	.+122    	; 0x1690 <DIO_SetPinValue+0x1c8>
    1616:	4f c0       	rjmp	.+158    	; 0x16b6 <DIO_SetPinValue+0x1ee>
            case PORTA_: SET_BIT(PORTA_REG, pinno); break;
    1618:	ab e3       	ldi	r26, 0x3B	; 59
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e3       	ldi	r30, 0x3B	; 59
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_SetPinValue+0x16e>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <DIO_SetPinValue+0x16a>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	3b c0       	rjmp	.+118    	; 0x16b6 <DIO_SetPinValue+0x1ee>
            case PORTB_: SET_BIT(PORTB_REG, pinno); break;
    1640:	a8 e3       	ldi	r26, 0x38	; 56
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e8 e3       	ldi	r30, 0x38	; 56
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	48 2f       	mov	r20, r24
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 2e       	mov	r0, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_SetPinValue+0x196>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DIO_SetPinValue+0x192>
    1662:	84 2b       	or	r24, r20
    1664:	8c 93       	st	X, r24
    1666:	27 c0       	rjmp	.+78     	; 0x16b6 <DIO_SetPinValue+0x1ee>
            case PORTC_: SET_BIT(PORTC_REG, pinno); break;
    1668:	a5 e3       	ldi	r26, 0x35	; 53
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e5 e3       	ldi	r30, 0x35	; 53
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_SetPinValue+0x1be>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_SetPinValue+0x1ba>
    168a:	84 2b       	or	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	13 c0       	rjmp	.+38     	; 0x16b6 <DIO_SetPinValue+0x1ee>
            case PORTD_: SET_BIT(PORTD_REG, pinno); break;    
    1690:	a2 e3       	ldi	r26, 0x32	; 50
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e2 e3       	ldi	r30, 0x32	; 50
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_SetPinValue+0x1e6>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_SetPinValue+0x1e2>
    16b2:	84 2b       	or	r24, r20
    16b4:	8c 93       	st	X, r24
            default: break;     
        }
    }
}
    16b6:	27 96       	adiw	r28, 0x07	; 7
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <DIO_SetPortValue>:

void DIO_SetPortValue(uint8 portno, uint8 value) { 
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <DIO_SetPortValue+0x6>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <DIO_SetPortValue+0x8>
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	6a 83       	std	Y+2, r22	; 0x02
    switch(portno) {
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3c 83       	std	Y+4, r19	; 0x04
    16e0:	2b 83       	std	Y+3, r18	; 0x03
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	d1 f0       	breq	.+52     	; 0x1720 <DIO_SetPortValue+0x58>
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	2c f4       	brge	.+10     	; 0x1700 <DIO_SetPortValue+0x38>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	61 f0       	breq	.+24     	; 0x1716 <DIO_SetPortValue+0x4e>
    16fe:	1e c0       	rjmp	.+60     	; 0x173c <DIO_SetPortValue+0x74>
    1700:	2b 81       	ldd	r18, Y+3	; 0x03
    1702:	3c 81       	ldd	r19, Y+4	; 0x04
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	81 f0       	breq	.+32     	; 0x172a <DIO_SetPortValue+0x62>
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	91 05       	cpc	r25, r1
    1712:	81 f0       	breq	.+32     	; 0x1734 <DIO_SetPortValue+0x6c>
    1714:	13 c0       	rjmp	.+38     	; 0x173c <DIO_SetPortValue+0x74>
        case PORTA_: PORTA_REG = value; break;
    1716:	eb e3       	ldi	r30, 0x3B	; 59
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 83       	st	Z, r24
    171e:	0e c0       	rjmp	.+28     	; 0x173c <DIO_SetPortValue+0x74>
        case PORTB_: PORTB_REG = value; break;
    1720:	e8 e3       	ldi	r30, 0x38	; 56
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 83       	st	Z, r24
    1728:	09 c0       	rjmp	.+18     	; 0x173c <DIO_SetPortValue+0x74>
        case PORTC_: PORTC_REG = value; break;
    172a:	e5 e3       	ldi	r30, 0x35	; 53
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	80 83       	st	Z, r24
    1732:	04 c0       	rjmp	.+8      	; 0x173c <DIO_SetPortValue+0x74>
        case PORTD_: PORTD_REG = value; break;      
    1734:	e2 e3       	ldi	r30, 0x32	; 50
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	80 83       	st	Z, r24
        default: break;  
        }
}
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <DIO_RdPinValue>:

uint8 DIO_RdPinValue(uint8 portno, uint8 pinno) {
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	00 d0       	rcall	.+0      	; 0x1750 <DIO_RdPinValue+0x6>
    1750:	00 d0       	rcall	.+0      	; 0x1752 <DIO_RdPinValue+0x8>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <DIO_RdPinValue+0xa>
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	6a 83       	std	Y+2, r22	; 0x02
    switch(portno) {
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	3d 83       	std	Y+5, r19	; 0x05
    1764:	2c 83       	std	Y+4, r18	; 0x04
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	91 05       	cpc	r25, r1
    176e:	39 f1       	breq	.+78     	; 0x17be <DIO_RdPinValue+0x74>
    1770:	2c 81       	ldd	r18, Y+4	; 0x04
    1772:	3d 81       	ldd	r19, Y+5	; 0x05
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	2c f4       	brge	.+10     	; 0x1784 <DIO_RdPinValue+0x3a>
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	9d 81       	ldd	r25, Y+5	; 0x05
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	61 f0       	breq	.+24     	; 0x179a <DIO_RdPinValue+0x50>
    1782:	53 c0       	rjmp	.+166    	; 0x182a <DIO_RdPinValue+0xe0>
    1784:	2c 81       	ldd	r18, Y+4	; 0x04
    1786:	3d 81       	ldd	r19, Y+5	; 0x05
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	51 f1       	breq	.+84     	; 0x17e2 <DIO_RdPinValue+0x98>
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	9d 81       	ldd	r25, Y+5	; 0x05
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	91 05       	cpc	r25, r1
    1796:	b9 f1       	breq	.+110    	; 0x1806 <DIO_RdPinValue+0xbc>
    1798:	48 c0       	rjmp	.+144    	; 0x182a <DIO_RdPinValue+0xe0>
            case PORTA_: return RD_BIT(PINA_REG, pinno); break;
    179a:	e9 e3       	ldi	r30, 0x39	; 57
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_RdPinValue+0x6a>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_RdPinValue+0x66>
    17b8:	84 23       	and	r24, r20
    17ba:	8b 83       	std	Y+3, r24	; 0x03
    17bc:	37 c0       	rjmp	.+110    	; 0x182c <DIO_RdPinValue+0xe2>
            case PORTB_: return RD_BIT(PINB_REG, pinno); break;
    17be:	e6 e3       	ldi	r30, 0x36	; 54
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_RdPinValue+0x8e>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_RdPinValue+0x8a>
    17dc:	84 23       	and	r24, r20
    17de:	8b 83       	std	Y+3, r24	; 0x03
    17e0:	25 c0       	rjmp	.+74     	; 0x182c <DIO_RdPinValue+0xe2>
            case PORTC_: return RD_BIT(PINC_REG, pinno); break;
    17e2:	e3 e3       	ldi	r30, 0x33	; 51
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_RdPinValue+0xb2>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <DIO_RdPinValue+0xae>
    1800:	84 23       	and	r24, r20
    1802:	8b 83       	std	Y+3, r24	; 0x03
    1804:	13 c0       	rjmp	.+38     	; 0x182c <DIO_RdPinValue+0xe2>
            case PORTD_: return RD_BIT(PIND_REG, pinno); break;     
    1806:	e0 e3       	ldi	r30, 0x30	; 48
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <DIO_RdPinValue+0xd6>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <DIO_RdPinValue+0xd2>
    1824:	84 23       	and	r24, r20
    1826:	8b 83       	std	Y+3, r24	; 0x03
    1828:	01 c0       	rjmp	.+2      	; 0x182c <DIO_RdPinValue+0xe2>
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_RdPinValue+0xe6>
            default: break;    
        } 
}
    182c:	9b 81       	ldd	r25, Y+3	; 0x03
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8e 81       	ldd	r24, Y+6	; 0x06
    1832:	26 96       	adiw	r28, 0x06	; 6
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <DIO_RdPortValue>:

uint8 DIO_RdPortValue(uint8 portno) { 
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <DIO_RdPortValue+0x6>
    184a:	00 d0       	rcall	.+0      	; 0x184c <DIO_RdPortValue+0x8>
    184c:	0f 92       	push	r0
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	89 83       	std	Y+1, r24	; 0x01
    switch(portno) {
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3c 83       	std	Y+4, r19	; 0x04
    185c:	2b 83       	std	Y+3, r18	; 0x03
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	91 05       	cpc	r25, r1
    1866:	d1 f0       	breq	.+52     	; 0x189c <DIO_RdPortValue+0x58>
    1868:	2b 81       	ldd	r18, Y+3	; 0x03
    186a:	3c 81       	ldd	r19, Y+4	; 0x04
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	2c f4       	brge	.+10     	; 0x187c <DIO_RdPortValue+0x38>
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	61 f0       	breq	.+24     	; 0x1892 <DIO_RdPortValue+0x4e>
    187a:	1f c0       	rjmp	.+62     	; 0x18ba <DIO_RdPortValue+0x76>
    187c:	2b 81       	ldd	r18, Y+3	; 0x03
    187e:	3c 81       	ldd	r19, Y+4	; 0x04
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	81 f0       	breq	.+32     	; 0x18a6 <DIO_RdPortValue+0x62>
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	81 f0       	breq	.+32     	; 0x18b0 <DIO_RdPortValue+0x6c>
    1890:	14 c0       	rjmp	.+40     	; 0x18ba <DIO_RdPortValue+0x76>
            case PORTA_: return PINA_REG; break;
    1892:	e9 e3       	ldi	r30, 0x39	; 57
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	90 81       	ld	r25, Z
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	10 c0       	rjmp	.+32     	; 0x18bc <DIO_RdPortValue+0x78>
            case PORTB_: return PINB_REG; break;
    189c:	e6 e3       	ldi	r30, 0x36	; 54
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	20 81       	ld	r18, Z
    18a2:	2a 83       	std	Y+2, r18	; 0x02
    18a4:	0b c0       	rjmp	.+22     	; 0x18bc <DIO_RdPortValue+0x78>
            case PORTC_: return PINC_REG; break;
    18a6:	e3 e3       	ldi	r30, 0x33	; 51
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	30 81       	ld	r19, Z
    18ac:	3a 83       	std	Y+2, r19	; 0x02
    18ae:	06 c0       	rjmp	.+12     	; 0x18bc <DIO_RdPortValue+0x78>
            case PORTD_: return PIND_REG; break;        
    18b0:	e0 e3       	ldi	r30, 0x30	; 48
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8a 83       	std	Y+2, r24	; 0x02
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <DIO_RdPortValue+0x78>
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <DIO_RdPortValue+0x7c>
            default: break; 
    } 
    18bc:	9a 81       	ldd	r25, Y+2	; 0x02
    18be:	9d 83       	std	Y+5, r25	; 0x05
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <LED_Init>:
/* Version: 01                                               */
/*************************************************************/

#include "LED_Interface.h"

void LED_Init(uint8 portno, uint8 pinno) {
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <LED_Init+0x6>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	6a 83       	std	Y+2, r22	; 0x02
    DIO_SetPinDirection(portno, pinno, OUTPUT);
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	6a 81       	ldd	r22, Y+2	; 0x02
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_SetPinDirection>
}
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <LED_On>:

void LED_On(uint8 portno, uint8 pinno) {
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <LED_On+0x6>
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	6a 83       	std	Y+2, r22	; 0x02
    DIO_SetPinValue(portno, pinno, HIGH);
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	6a 81       	ldd	r22, Y+2	; 0x02
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <LED_Off>:

void LED_Off(uint8 portno, uint8 pinno) {
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <LED_Off+0x6>
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	6a 83       	std	Y+2, r22	; 0x02
    DIO_SetPinValue(portno, pinno, LOW);
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	6a 81       	ldd	r22, Y+2	; 0x02
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <LED_Toggle>:

void LED_Toggle(uint8 portno, uint8 pinno) {
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <LED_Toggle+0x6>
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	6a 83       	std	Y+2, r22	; 0x02
    if (DIO_RdPinValue(portno, pinno) == LOW)
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	6a 81       	ldd	r22, Y+2	; 0x02
    194a:	0e 94 a5 0b 	call	0x174a	; 0x174a <DIO_RdPinValue>
    194e:	88 23       	and	r24, r24
    1950:	31 f4       	brne	.+12     	; 0x195e <LED_Toggle+0x26>
        DIO_SetPinValue(portno, pinno, HIGH);
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	6a 81       	ldd	r22, Y+2	; 0x02
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
    195c:	05 c0       	rjmp	.+10     	; 0x1968 <LED_Toggle+0x30>
    else
        DIO_SetPinValue(portno, pinno, LOW);   
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	6a 81       	ldd	r22, Y+2	; 0x02
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <LED_Rdstatus>:

uint8 LED_Rdstatus(uint8 portno, uint8 pinno) {
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <LED_Rdstatus+0x6>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	6a 83       	std	Y+2, r22	; 0x02
    return DIO_RdPinValue(portno, pinno);
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	6a 81       	ldd	r22, Y+2	; 0x02
    1984:	0e 94 a5 0b 	call	0x174a	; 0x174a <DIO_RdPinValue>
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <SPI_init_as_master>:


#include "SPI.h"

void SPI_init_as_master(bool slow_mode)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	0f 92       	push	r0
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(SPI_port,MISO,INPUT);
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	66 e0       	ldi	r22, 0x06	; 6
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,MOSI,OUTPUT);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	65 e0       	ldi	r22, 0x05	; 5
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,sck,OUTPUT);
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	67 e0       	ldi	r22, 0x07	; 7
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,SS_bar,OUTPUT);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	64 e0       	ldi	r22, 0x04	; 4
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_SetPinDirection>
	DIO_SetPinValue(SPI_port,SS_bar,HIGH);       //disable slave selection
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	64 e0       	ldi	r22, 0x04	; 4
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
	if (slow_mode){                    //speed = Fosc/128
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	88 23       	and	r24, r24
    19d4:	41 f0       	breq	.+16     	; 0x19e6 <SPI_init_as_master+0x54>
			SPCR = 0x53;               //SPIE=0 SPE=1 Master=1 SPR0=1 SPR1=1
    19d6:	ed e2       	ldi	r30, 0x2D	; 45
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	83 e5       	ldi	r24, 0x53	; 83
    19dc:	80 83       	st	Z, r24
			SPSR = 0x00;               //SPI2X = 0
    19de:	ee e2       	ldi	r30, 0x2E	; 46
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	10 82       	st	Z, r1
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <SPI_init_as_master+0x64>
	}
	else{							   //speed = Fosc/2
			SPCR = 0x50;               //SPIE=0 SPE=1 Master=1 SPR0=0 SPR1=0
    19e6:	ed e2       	ldi	r30, 0x2D	; 45
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 e5       	ldi	r24, 0x50	; 80
    19ec:	80 83       	st	Z, r24
			SPSR = 0x01;               //SPI2X = 1
    19ee:	ee e2       	ldi	r30, 0x2E	; 46
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	80 83       	st	Z, r24
	}
}
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <SPI_init_as_slave>:

void SPI_init_as_slave(bool slow_mode)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	0f 92       	push	r0
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(SPI_port,MISO,OUTPUT);
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	66 e0       	ldi	r22, 0x06	; 6
    1a0e:	41 e0       	ldi	r20, 0x01	; 1
    1a10:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,MOSI,INPUT);
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	65 e0       	ldi	r22, 0x05	; 5
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,sck,INPUT);
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	67 e0       	ldi	r22, 0x07	; 7
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,SS_bar,INPUT);
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	64 e0       	ldi	r22, 0x04	; 4
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_SetPinDirection>
	DIO_SetPinValue(SPI_port,SS_bar,HIGH);       //pull up for ss_bar pin 
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	64 e0       	ldi	r22, 0x04	; 4
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
		if (slow_mode){                //speed = Fosc/128
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	88 23       	and	r24, r24
    1a40:	41 f0       	breq	.+16     	; 0x1a52 <SPI_init_as_slave+0x54>
			SPCR = 0xC3;               //SPIE=1 SPE=1 Master=0 SPR0=1 SPR1=1
    1a42:	ed e2       	ldi	r30, 0x2D	; 45
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	83 ec       	ldi	r24, 0xC3	; 195
    1a48:	80 83       	st	Z, r24
			SPSR = 0x00;               //SPI2X = 0
    1a4a:	ee e2       	ldi	r30, 0x2E	; 46
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	10 82       	st	Z, r1
    1a50:	08 c0       	rjmp	.+16     	; 0x1a62 <SPI_init_as_slave+0x64>
		}
		else{						   //speed = Fosc/2
			SPCR = 0xC0;               //SPIE=1 SPE=1 Master=0 SPR0=0 SPR1=0
    1a52:	ed e2       	ldi	r30, 0x2D	; 45
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 ec       	ldi	r24, 0xC0	; 192
    1a58:	80 83       	st	Z, r24
			SPSR = 0x01;               //SPI2X = 1
    1a5a:	ee e2       	ldi	r30, 0x2E	; 46
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	80 83       	st	Z, r24
		}

}
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <SPI_send_char>:


void SPI_send_char(uint8 data)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	0f 92       	push	r0
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinValue(SPI_port,SS_bar,LOW);   //select slave     
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	64 e0       	ldi	r22, 0x04	; 4
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
	SPDR=data;
    1a80:	ef e2       	ldi	r30, 0x2F	; 47
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	80 83       	st	Z, r24
	while((SPSR & (1<<7))==0) ;     //wait for SPIF to set (transfer of data is complete )
    1a88:	ee e2       	ldi	r30, 0x2E	; 46
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	88 23       	and	r24, r24
    1a90:	dc f7       	brge	.-10     	; 0x1a88 <SPI_send_char+0x1e>
	DIO_SetPinValue(SPI_port,SS_bar,HIGH);   //leave slave
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	64 e0       	ldi	r22, 0x04	; 4
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
	
}
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <SPI_recieve_char_no_ISR>:


uint8 SPI_recieve_char_no_ISR()
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
	while((SPSR & (1<<7))==0) ;    //wait for SPIF to set (transfer of data is complete )
    1aac:	ee e2       	ldi	r30, 0x2E	; 46
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	88 23       	and	r24, r24
    1ab4:	dc f7       	brge	.-10     	; 0x1aac <SPI_recieve_char_no_ISR+0x8>
	return SPDR;
    1ab6:	ef e2       	ldi	r30, 0x2F	; 47
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z

}
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <SPI_recieve_char_ISR>:
uint8 SPI_recieve_char_ISR()
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
    1aca:	ef e2       	ldi	r30, 0x2F	; 47
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
}
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <SPI_turn_to_slave>:

void SPI_turn_to_slave(){
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62

	SPI_send_char(0x7f);           //code for swapping master and slave
    1ade:	8f e7       	ldi	r24, 0x7F	; 127
    1ae0:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <SPI_send_char>
	SPI_init_as_slave(false);
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <SPI_init_as_slave>
	
}
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <SPI_should_turn_to_master>:

bool SPI_should_turn_to_master(uint8 data){
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <SPI_should_turn_to_master+0x6>
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	89 83       	std	Y+1, r24	; 0x01
	if (data==0x7f)                //code for swapping master and slave
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	8f 37       	cpi	r24, 0x7F	; 127
    1b00:	31 f4       	brne	.+12     	; 0x1b0e <SPI_should_turn_to_master+0x1e>
	{
		SPI_init_as_master(false);
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	0e 94 c9 0c 	call	0x1992	; 0x1992 <SPI_init_as_master>
		return true;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	8a 83       	std	Y+2, r24	; 0x02
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <SPI_should_turn_to_master+0x20>

	}
	return false;
    1b0e:	1a 82       	std	Y+2, r1	; 0x02
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <Servo_Init>:
 */ 

#include "Servo.h"

void Servo_Init(void)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
	//Configure TIMER1
	Timer1_Init(Fast_PWM_ICR1, Timer_Scaler_64, OC1A_Inverting, OC1B_Inverting);
    1b24:	8d e0       	ldi	r24, 0x0D	; 13
    1b26:	63 e0       	ldi	r22, 0x03	; 3
    1b28:	43 e0       	ldi	r20, 0x03	; 3
    1b2a:	23 e0       	ldi	r18, 0x03	; 3
    1b2c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <Timer1_Init>

	ICR1=19999;  //fPWM=50Hz (Period = 20ms Standard).
    1b30:	e6 e4       	ldi	r30, 0x46	; 70
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	8f e1       	ldi	r24, 0x1F	; 31
    1b36:	9e e4       	ldi	r25, 0x4E	; 78
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	80 83       	st	Z, r24
	OCR1B = 97;
    1b3c:	e8 e4       	ldi	r30, 0x48	; 72
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	81 e6       	ldi	r24, 0x61	; 97
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	91 83       	std	Z+1, r25	; 0x01
    1b46:	80 83       	st	Z, r24
}
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <Servo_SetAngle>:

void Servo_SetAngle(uint8 angle)
{
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	0f 92       	push	r0
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = (((uint16)angle*100)/41.1)+97;
    1b5e:	08 e4       	ldi	r16, 0x48	; 72
    1b60:	10 e0       	ldi	r17, 0x00	; 0
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	84 e6       	ldi	r24, 0x64	; 100
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	ac 01       	movw	r20, r24
    1b6e:	24 9f       	mul	r18, r20
    1b70:	c0 01       	movw	r24, r0
    1b72:	25 9f       	mul	r18, r21
    1b74:	90 0d       	add	r25, r0
    1b76:	34 9f       	mul	r19, r20
    1b78:	90 0d       	add	r25, r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	cc 01       	movw	r24, r24
    1b7e:	a0 e0       	ldi	r26, 0x00	; 0
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	26 e6       	ldi	r18, 0x66	; 102
    1b94:	36 e6       	ldi	r19, 0x66	; 102
    1b96:	44 e2       	ldi	r20, 0x24	; 36
    1b98:	52 e4       	ldi	r21, 0x42	; 66
    1b9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	42 ec       	ldi	r20, 0xC2	; 194
    1bac:	52 e4       	ldi	r21, 0x42	; 66
    1bae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	bc 01       	movw	r22, r24
    1bb8:	cd 01       	movw	r24, r26
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	f8 01       	movw	r30, r16
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
}
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	08 95       	ret

00001bd4 <Timer0_Init>:

/************************************************************************/
/*					   Timer0 Functions Definitions                     */
/************************************************************************/
void Timer0_Init(Timer0Mode t_mode, TimerScale scaler, OC0Mode oc0_mode)
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	27 97       	sbiw	r28, 0x07	; 7
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	6a 83       	std	Y+2, r22	; 0x02
    1bec:	4b 83       	std	Y+3, r20	; 0x03
	/* switch over all modes and set its bits from datasheet */
	switch(t_mode)
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	3f 83       	std	Y+7, r19	; 0x07
    1bf6:	2e 83       	std	Y+6, r18	; 0x06
    1bf8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	91 05       	cpc	r25, r1
    1c00:	99 f1       	breq	.+102    	; 0x1c68 <Timer0_Init+0x94>
    1c02:	2e 81       	ldd	r18, Y+6	; 0x06
    1c04:	3f 81       	ldd	r19, Y+7	; 0x07
    1c06:	22 30       	cpi	r18, 0x02	; 2
    1c08:	31 05       	cpc	r19, r1
    1c0a:	2c f4       	brge	.+10     	; 0x1c16 <Timer0_Init+0x42>
    1c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	61 f0       	breq	.+24     	; 0x1c2c <Timer0_Init+0x58>
    1c14:	46 c0       	rjmp	.+140    	; 0x1ca2 <Timer0_Init+0xce>
    1c16:	2e 81       	ldd	r18, Y+6	; 0x06
    1c18:	3f 81       	ldd	r19, Y+7	; 0x07
    1c1a:	22 30       	cpi	r18, 0x02	; 2
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	a9 f0       	breq	.+42     	; 0x1c4a <Timer0_Init+0x76>
    1c20:	8e 81       	ldd	r24, Y+6	; 0x06
    1c22:	9f 81       	ldd	r25, Y+7	; 0x07
    1c24:	83 30       	cpi	r24, 0x03	; 3
    1c26:	91 05       	cpc	r25, r1
    1c28:	71 f1       	breq	.+92     	; 0x1c86 <Timer0_Init+0xb2>
    1c2a:	3b c0       	rjmp	.+118    	; 0x1ca2 <Timer0_Init+0xce>
	{
		case Timer0_Normal_Mode:
			CLR_BIT(TCCR0, WGM00);
    1c2c:	a3 e5       	ldi	r26, 0x53	; 83
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e3 e5       	ldi	r30, 0x53	; 83
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	8f 7b       	andi	r24, 0xBF	; 191
    1c38:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, WGM01);
    1c3a:	a3 e5       	ldi	r26, 0x53	; 83
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e3 e5       	ldi	r30, 0x53	; 83
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	87 7f       	andi	r24, 0xF7	; 247
    1c46:	8c 93       	st	X, r24
    1c48:	2c c0       	rjmp	.+88     	; 0x1ca2 <Timer0_Init+0xce>
			break;
		case Timer0_CTC_Mode:
			CLR_BIT(TCCR0, WGM00);
    1c4a:	a3 e5       	ldi	r26, 0x53	; 83
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e3 e5       	ldi	r30, 0x53	; 83
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 7b       	andi	r24, 0xBF	; 191
    1c56:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    1c58:	a3 e5       	ldi	r26, 0x53	; 83
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e3 e5       	ldi	r30, 0x53	; 83
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	88 60       	ori	r24, 0x08	; 8
    1c64:	8c 93       	st	X, r24
    1c66:	1d c0       	rjmp	.+58     	; 0x1ca2 <Timer0_Init+0xce>
			break;
		case Timer0_PhaseCorrect_Mode:
			SET_BIT(TCCR0, WGM00);
    1c68:	a3 e5       	ldi	r26, 0x53	; 83
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e3 e5       	ldi	r30, 0x53	; 83
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	80 64       	ori	r24, 0x40	; 64
    1c74:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, WGM01);
    1c76:	a3 e5       	ldi	r26, 0x53	; 83
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e3 e5       	ldi	r30, 0x53	; 83
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	87 7f       	andi	r24, 0xF7	; 247
    1c82:	8c 93       	st	X, r24
    1c84:	0e c0       	rjmp	.+28     	; 0x1ca2 <Timer0_Init+0xce>
			break;
		case Timer0_FastPWM_Mode:
			SET_BIT(TCCR0, WGM00);
    1c86:	a3 e5       	ldi	r26, 0x53	; 83
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e3 e5       	ldi	r30, 0x53	; 83
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 64       	ori	r24, 0x40	; 64
    1c92:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    1c94:	a3 e5       	ldi	r26, 0x53	; 83
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e3 e5       	ldi	r30, 0x53	; 83
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	88 60       	ori	r24, 0x08	; 8
    1ca0:	8c 93       	st	X, r24
			break;
	}
	switch(oc0_mode)
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	3d 83       	std	Y+5, r19	; 0x05
    1caa:	2c 83       	std	Y+4, r18	; 0x04
    1cac:	8c 81       	ldd	r24, Y+4	; 0x04
    1cae:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	21 f1       	breq	.+72     	; 0x1cfe <Timer0_Init+0x12a>
    1cb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cba:	22 30       	cpi	r18, 0x02	; 2
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <Timer0_Init+0xf6>
    1cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	61 f0       	breq	.+24     	; 0x1ce0 <Timer0_Init+0x10c>
    1cc8:	46 c0       	rjmp	.+140    	; 0x1d56 <Timer0_Init+0x182>
    1cca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ccc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	21 f1       	breq	.+72     	; 0x1d1c <Timer0_Init+0x148>
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd8:	83 30       	cpi	r24, 0x03	; 3
    1cda:	91 05       	cpc	r25, r1
    1cdc:	71 f1       	breq	.+92     	; 0x1d3a <Timer0_Init+0x166>
    1cde:	3b c0       	rjmp	.+118    	; 0x1d56 <Timer0_Init+0x182>
	{
		case OCO_Disconnected:
			CLR_BIT(TCCR0, COM00);
    1ce0:	a3 e5       	ldi	r26, 0x53	; 83
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e3 e5       	ldi	r30, 0x53	; 83
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	8f 7e       	andi	r24, 0xEF	; 239
    1cec:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    1cee:	a3 e5       	ldi	r26, 0x53	; 83
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e3 e5       	ldi	r30, 0x53	; 83
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	8f 7d       	andi	r24, 0xDF	; 223
    1cfa:	8c 93       	st	X, r24
    1cfc:	2c c0       	rjmp	.+88     	; 0x1d56 <Timer0_Init+0x182>
			break;
		case OCO_Toggle:
			SET_BIT(TCCR0, COM00);
    1cfe:	a3 e5       	ldi	r26, 0x53	; 83
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e3 e5       	ldi	r30, 0x53	; 83
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	80 61       	ori	r24, 0x10	; 16
    1d0a:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM01);
    1d0c:	a3 e5       	ldi	r26, 0x53	; 83
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e3 e5       	ldi	r30, 0x53	; 83
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	8f 7d       	andi	r24, 0xDF	; 223
    1d18:	8c 93       	st	X, r24
    1d1a:	1d c0       	rjmp	.+58     	; 0x1d56 <Timer0_Init+0x182>
			break;
		case OCO_NON_Inverting:
			CLR_BIT(TCCR0, COM00);
    1d1c:	a3 e5       	ldi	r26, 0x53	; 83
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e3 e5       	ldi	r30, 0x53	; 83
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8f 7e       	andi	r24, 0xEF	; 239
    1d28:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
    1d2a:	a3 e5       	ldi	r26, 0x53	; 83
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e3 e5       	ldi	r30, 0x53	; 83
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	80 62       	ori	r24, 0x20	; 32
    1d36:	8c 93       	st	X, r24
    1d38:	0e c0       	rjmp	.+28     	; 0x1d56 <Timer0_Init+0x182>
			break;
		case OCO_Inverting:
			SET_BIT(TCCR0, COM00);
    1d3a:	a3 e5       	ldi	r26, 0x53	; 83
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e3 e5       	ldi	r30, 0x53	; 83
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	80 61       	ori	r24, 0x10	; 16
    1d46:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01);
    1d48:	a3 e5       	ldi	r26, 0x53	; 83
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e3 e5       	ldi	r30, 0x53	; 83
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	80 62       	ori	r24, 0x20	; 32
    1d54:	8c 93       	st	X, r24
			break;
	}
	/* set scaler for timer */
	CLR_BIT(TCCR0, CS00);
    1d56:	a3 e5       	ldi	r26, 0x53	; 83
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e3 e5       	ldi	r30, 0x53	; 83
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8e 7f       	andi	r24, 0xFE	; 254
    1d62:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    1d64:	a3 e5       	ldi	r26, 0x53	; 83
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e3 e5       	ldi	r30, 0x53	; 83
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8d 7f       	andi	r24, 0xFD	; 253
    1d70:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    1d72:	a3 e5       	ldi	r26, 0x53	; 83
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e3 e5       	ldi	r30, 0x53	; 83
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8b 7f       	andi	r24, 0xFB	; 251
    1d7e:	8c 93       	st	X, r24
	TCCR0 |= scaler; 
    1d80:	a3 e5       	ldi	r26, 0x53	; 83
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e3 e5       	ldi	r30, 0x53	; 83
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	90 81       	ld	r25, Z
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	89 2b       	or	r24, r25
    1d8e:	8c 93       	st	X, r24
}
    1d90:	27 96       	adiw	r28, 0x07	; 7
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <Timer0_OV_InterruptEnable>:

void Timer0_OV_InterruptEnable(void)
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE0);
    1daa:	a9 e5       	ldi	r26, 0x59	; 89
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e9 e5       	ldi	r30, 0x59	; 89
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	81 60       	ori	r24, 0x01	; 1
    1db6:	8c 93       	st	X, r24
}
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <Timer0_OV_InterruptDisable>:

void Timer0_OV_InterruptDisable(void)
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TOIE0);
    1dc6:	a9 e5       	ldi	r26, 0x59	; 89
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e9 e5       	ldi	r30, 0x59	; 89
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8e 7f       	andi	r24, 0xFE	; 254
    1dd2:	8c 93       	st	X, r24
}
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <Timer0_OC_InterruptEnable>:

void Timer0_OC_InterruptEnable(void)
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE0);
    1de2:	a9 e5       	ldi	r26, 0x59	; 89
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e9 e5       	ldi	r30, 0x59	; 89
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	82 60       	ori	r24, 0x02	; 2
    1dee:	8c 93       	st	X, r24
}
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <Timer0_OC_InterruptDisable>:

void Timer0_OC_InterruptDisable(void)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, OCIE0);
    1dfe:	a9 e5       	ldi	r26, 0x59	; 89
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e9 e5       	ldi	r30, 0x59	; 89
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	8d 7f       	andi	r24, 0xFD	; 253
    1e0a:	8c 93       	st	X, r24
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <SetCallBack_Timer0_OC0>:

/*********************** Timer 0 Call Back functions ********************/
void SetCallBack_Timer0_OC0(void(*LocalFptr)(void))
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <SetCallBack_Timer0_OC0+0x6>
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	9a 83       	std	Y+2, r25	; 0x02
    1e1e:	89 83       	std	Y+1, r24	; 0x01
	Timer0_callBackPtr = LocalFptr;
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	90 93 6b 01 	sts	0x016B, r25
    1e28:	80 93 6a 01 	sts	0x016A, r24
}
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <SetCallBack_Timer0_OVF>:

void SetCallBack_Timer0_OVF(void(*LocalFptr)(void))
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <SetCallBack_Timer0_OVF+0x6>
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
	Timer0_callBackPtr = LocalFptr;
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	90 93 6b 01 	sts	0x016B, r25
    1e4c:	80 93 6a 01 	sts	0x016A, r24
}
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <__vector_11>:

/************************* Timer 0 ISR functions ************************/
ISR(TIMER0_OVF_vect)
{
    1e5a:	1f 92       	push	r1
    1e5c:	0f 92       	push	r0
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	0f 92       	push	r0
    1e62:	11 24       	eor	r1, r1
    1e64:	2f 93       	push	r18
    1e66:	3f 93       	push	r19
    1e68:	4f 93       	push	r20
    1e6a:	5f 93       	push	r21
    1e6c:	6f 93       	push	r22
    1e6e:	7f 93       	push	r23
    1e70:	8f 93       	push	r24
    1e72:	9f 93       	push	r25
    1e74:	af 93       	push	r26
    1e76:	bf 93       	push	r27
    1e78:	ef 93       	push	r30
    1e7a:	ff 93       	push	r31
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_callBackPtr != NULLPTR)
    1e84:	80 91 6a 01 	lds	r24, 0x016A
    1e88:	90 91 6b 01 	lds	r25, 0x016B
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	29 f0       	breq	.+10     	; 0x1e9a <__vector_11+0x40>
	{
		Timer0_callBackPtr();
    1e90:	e0 91 6a 01 	lds	r30, 0x016A
    1e94:	f0 91 6b 01 	lds	r31, 0x016B
    1e98:	09 95       	icall
	}
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	ff 91       	pop	r31
    1ea0:	ef 91       	pop	r30
    1ea2:	bf 91       	pop	r27
    1ea4:	af 91       	pop	r26
    1ea6:	9f 91       	pop	r25
    1ea8:	8f 91       	pop	r24
    1eaa:	7f 91       	pop	r23
    1eac:	6f 91       	pop	r22
    1eae:	5f 91       	pop	r21
    1eb0:	4f 91       	pop	r20
    1eb2:	3f 91       	pop	r19
    1eb4:	2f 91       	pop	r18
    1eb6:	0f 90       	pop	r0
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	0f 90       	pop	r0
    1ebc:	1f 90       	pop	r1
    1ebe:	18 95       	reti

00001ec0 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1ec0:	1f 92       	push	r1
    1ec2:	0f 92       	push	r0
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	0f 92       	push	r0
    1ec8:	11 24       	eor	r1, r1
    1eca:	2f 93       	push	r18
    1ecc:	3f 93       	push	r19
    1ece:	4f 93       	push	r20
    1ed0:	5f 93       	push	r21
    1ed2:	6f 93       	push	r22
    1ed4:	7f 93       	push	r23
    1ed6:	8f 93       	push	r24
    1ed8:	9f 93       	push	r25
    1eda:	af 93       	push	r26
    1edc:	bf 93       	push	r27
    1ede:	ef 93       	push	r30
    1ee0:	ff 93       	push	r31
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_callBackPtr != NULLPTR)
    1eea:	80 91 6a 01 	lds	r24, 0x016A
    1eee:	90 91 6b 01 	lds	r25, 0x016B
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	29 f0       	breq	.+10     	; 0x1f00 <__vector_10+0x40>
	{
		Timer0_callBackPtr();
    1ef6:	e0 91 6a 01 	lds	r30, 0x016A
    1efa:	f0 91 6b 01 	lds	r31, 0x016B
    1efe:	09 95       	icall
	}
}
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	bf 91       	pop	r27
    1f0a:	af 91       	pop	r26
    1f0c:	9f 91       	pop	r25
    1f0e:	8f 91       	pop	r24
    1f10:	7f 91       	pop	r23
    1f12:	6f 91       	pop	r22
    1f14:	5f 91       	pop	r21
    1f16:	4f 91       	pop	r20
    1f18:	3f 91       	pop	r19
    1f1a:	2f 91       	pop	r18
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <Timer1_Init>:
/************************************************************************/
/*					   Timer1 Functions Definitions                     */
/************************************************************************/

void Timer1_Init( Timer1_Mode t_mode, TimerScale scaler,OC1A_Mode oc1a, OC1B_Mode oc1b)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	2a 97       	sbiw	r28, 0x0a	; 10
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	6a 83       	std	Y+2, r22	; 0x02
    1f3e:	4b 83       	std	Y+3, r20	; 0x03
    1f40:	2c 83       	std	Y+4, r18	; 0x04
	switch(t_mode)
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	3a 87       	std	Y+10, r19	; 0x0a
    1f4a:	29 87       	std	Y+9, r18	; 0x09
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	87 30       	cpi	r24, 0x07	; 7
    1f52:	91 05       	cpc	r25, r1
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <Timer1_Init+0x32>
    1f56:	24 c1       	rjmp	.+584    	; 0x21a0 <Timer1_Init+0x27a>
    1f58:	29 85       	ldd	r18, Y+9	; 0x09
    1f5a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f5c:	28 30       	cpi	r18, 0x08	; 8
    1f5e:	31 05       	cpc	r19, r1
    1f60:	4c f5       	brge	.+82     	; 0x1fb4 <Timer1_Init+0x8e>
    1f62:	89 85       	ldd	r24, Y+9	; 0x09
    1f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f66:	83 30       	cpi	r24, 0x03	; 3
    1f68:	91 05       	cpc	r25, r1
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <Timer1_Init+0x48>
    1f6c:	a5 c0       	rjmp	.+330    	; 0x20b8 <Timer1_Init+0x192>
    1f6e:	29 85       	ldd	r18, Y+9	; 0x09
    1f70:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f72:	24 30       	cpi	r18, 0x04	; 4
    1f74:	31 05       	cpc	r19, r1
    1f76:	8c f4       	brge	.+34     	; 0x1f9a <Timer1_Init+0x74>
    1f78:	89 85       	ldd	r24, Y+9	; 0x09
    1f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	91 05       	cpc	r25, r1
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <Timer1_Init+0x5e>
    1f82:	60 c0       	rjmp	.+192    	; 0x2044 <Timer1_Init+0x11e>
    1f84:	29 85       	ldd	r18, Y+9	; 0x09
    1f86:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f88:	22 30       	cpi	r18, 0x02	; 2
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	0c f0       	brlt	.+2      	; 0x1f90 <Timer1_Init+0x6a>
    1f8e:	77 c0       	rjmp	.+238    	; 0x207e <Timer1_Init+0x158>
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	c9 f1       	breq	.+114    	; 0x200a <Timer1_Init+0xe4>
    1f98:	ea c1       	rjmp	.+980    	; 0x236e <Timer1_Init+0x448>
    1f9a:	29 85       	ldd	r18, Y+9	; 0x09
    1f9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f9e:	25 30       	cpi	r18, 0x05	; 5
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <Timer1_Init+0x80>
    1fa4:	c3 c0       	rjmp	.+390    	; 0x212c <Timer1_Init+0x206>
    1fa6:	89 85       	ldd	r24, Y+9	; 0x09
    1fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1faa:	86 30       	cpi	r24, 0x06	; 6
    1fac:	91 05       	cpc	r25, r1
    1fae:	0c f0       	brlt	.+2      	; 0x1fb2 <Timer1_Init+0x8c>
    1fb0:	da c0       	rjmp	.+436    	; 0x2166 <Timer1_Init+0x240>
    1fb2:	9f c0       	rjmp	.+318    	; 0x20f2 <Timer1_Init+0x1cc>
    1fb4:	29 85       	ldd	r18, Y+9	; 0x09
    1fb6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fb8:	2b 30       	cpi	r18, 0x0B	; 11
    1fba:	31 05       	cpc	r19, r1
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <Timer1_Init+0x9a>
    1fbe:	64 c1       	rjmp	.+712    	; 0x2288 <Timer1_Init+0x362>
    1fc0:	89 85       	ldd	r24, Y+9	; 0x09
    1fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc4:	8c 30       	cpi	r24, 0x0C	; 12
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	6c f4       	brge	.+26     	; 0x1fe4 <Timer1_Init+0xbe>
    1fca:	29 85       	ldd	r18, Y+9	; 0x09
    1fcc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fce:	29 30       	cpi	r18, 0x09	; 9
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <Timer1_Init+0xb0>
    1fd4:	1f c1       	rjmp	.+574    	; 0x2214 <Timer1_Init+0x2ee>
    1fd6:	89 85       	ldd	r24, Y+9	; 0x09
    1fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fda:	8a 30       	cpi	r24, 0x0A	; 10
    1fdc:	91 05       	cpc	r25, r1
    1fde:	0c f0       	brlt	.+2      	; 0x1fe2 <Timer1_Init+0xbc>
    1fe0:	36 c1       	rjmp	.+620    	; 0x224e <Timer1_Init+0x328>
    1fe2:	fb c0       	rjmp	.+502    	; 0x21da <Timer1_Init+0x2b4>
    1fe4:	29 85       	ldd	r18, Y+9	; 0x09
    1fe6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fe8:	2d 30       	cpi	r18, 0x0D	; 13
    1fea:	31 05       	cpc	r19, r1
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <Timer1_Init+0xca>
    1fee:	86 c1       	rjmp	.+780    	; 0x22fc <Timer1_Init+0x3d6>
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	8d 30       	cpi	r24, 0x0D	; 13
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	0c f4       	brge	.+2      	; 0x1ffc <Timer1_Init+0xd6>
    1ffa:	63 c1       	rjmp	.+710    	; 0x22c2 <Timer1_Init+0x39c>
    1ffc:	29 85       	ldd	r18, Y+9	; 0x09
    1ffe:	3a 85       	ldd	r19, Y+10	; 0x0a
    2000:	2e 30       	cpi	r18, 0x0E	; 14
    2002:	31 05       	cpc	r19, r1
    2004:	09 f4       	brne	.+2      	; 0x2008 <Timer1_Init+0xe2>
    2006:	97 c1       	rjmp	.+814    	; 0x2336 <Timer1_Init+0x410>
    2008:	b2 c1       	rjmp	.+868    	; 0x236e <Timer1_Init+0x448>
	{
		case Normal_Mode:
			CLR_BIT(TCCR1A, WGM10);
    200a:	af e4       	ldi	r26, 0x4F	; 79
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	ef e4       	ldi	r30, 0x4F	; 79
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8e 7f       	andi	r24, 0xFE	; 254
    2016:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, WGM11);
    2018:	af e4       	ldi	r26, 0x4F	; 79
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	ef e4       	ldi	r30, 0x4F	; 79
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	8d 7f       	andi	r24, 0xFD	; 253
    2024:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);
    2026:	ae e4       	ldi	r26, 0x4E	; 78
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	ee e4       	ldi	r30, 0x4E	; 78
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	87 7f       	andi	r24, 0xF7	; 247
    2032:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM13);
    2034:	ae e4       	ldi	r26, 0x4E	; 78
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	ee e4       	ldi	r30, 0x4E	; 78
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8f 7e       	andi	r24, 0xEF	; 239
    2040:	8c 93       	st	X, r24
    2042:	95 c1       	rjmp	.+810    	; 0x236e <Timer1_Init+0x448>
			break;
		case PWM_Mode_8BIT:
			SET_BIT(TCCR1A, WGM10);
    2044:	af e4       	ldi	r26, 0x4F	; 79
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	ef e4       	ldi	r30, 0x4F	; 79
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	81 60       	ori	r24, 0x01	; 1
    2050:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, WGM11);
    2052:	af e4       	ldi	r26, 0x4F	; 79
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	ef e4       	ldi	r30, 0x4F	; 79
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8d 7f       	andi	r24, 0xFD	; 253
    205e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);
    2060:	ae e4       	ldi	r26, 0x4E	; 78
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	ee e4       	ldi	r30, 0x4E	; 78
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	87 7f       	andi	r24, 0xF7	; 247
    206c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM13);
    206e:	ae e4       	ldi	r26, 0x4E	; 78
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	ee e4       	ldi	r30, 0x4E	; 78
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	8f 7e       	andi	r24, 0xEF	; 239
    207a:	8c 93       	st	X, r24
    207c:	78 c1       	rjmp	.+752    	; 0x236e <Timer1_Init+0x448>
			break;
		case PWM_Mode_9BIT:
			CLR_BIT(TCCR1A, WGM10);
    207e:	af e4       	ldi	r26, 0x4F	; 79
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	ef e4       	ldi	r30, 0x4F	; 79
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	8e 7f       	andi	r24, 0xFE	; 254
    208a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    208c:	af e4       	ldi	r26, 0x4F	; 79
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	ef e4       	ldi	r30, 0x4F	; 79
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	82 60       	ori	r24, 0x02	; 2
    2098:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);
    209a:	ae e4       	ldi	r26, 0x4E	; 78
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	ee e4       	ldi	r30, 0x4E	; 78
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	87 7f       	andi	r24, 0xF7	; 247
    20a6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM13);
    20a8:	ae e4       	ldi	r26, 0x4E	; 78
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	ee e4       	ldi	r30, 0x4E	; 78
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	8f 7e       	andi	r24, 0xEF	; 239
    20b4:	8c 93       	st	X, r24
    20b6:	5b c1       	rjmp	.+694    	; 0x236e <Timer1_Init+0x448>
			break;
		case PWM_Mode_10BIT:
			SET_BIT(TCCR1A, WGM10);
    20b8:	af e4       	ldi	r26, 0x4F	; 79
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	ef e4       	ldi	r30, 0x4F	; 79
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	81 60       	ori	r24, 0x01	; 1
    20c4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    20c6:	af e4       	ldi	r26, 0x4F	; 79
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	ef e4       	ldi	r30, 0x4F	; 79
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	82 60       	ori	r24, 0x02	; 2
    20d2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);
    20d4:	ae e4       	ldi	r26, 0x4E	; 78
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	ee e4       	ldi	r30, 0x4E	; 78
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	87 7f       	andi	r24, 0xF7	; 247
    20e0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM13);
    20e2:	ae e4       	ldi	r26, 0x4E	; 78
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	ee e4       	ldi	r30, 0x4E	; 78
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	8f 7e       	andi	r24, 0xEF	; 239
    20ee:	8c 93       	st	X, r24
    20f0:	3e c1       	rjmp	.+636    	; 0x236e <Timer1_Init+0x448>
			break;
		case CTC_Mode_OCR1A:
			CLR_BIT(TCCR1A, WGM10);
    20f2:	af e4       	ldi	r26, 0x4F	; 79
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	ef e4       	ldi	r30, 0x4F	; 79
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	8e 7f       	andi	r24, 0xFE	; 254
    20fe:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, WGM11);
    2100:	af e4       	ldi	r26, 0x4F	; 79
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	ef e4       	ldi	r30, 0x4F	; 79
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	8d 7f       	andi	r24, 0xFD	; 253
    210c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    210e:	ae e4       	ldi	r26, 0x4E	; 78
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ee e4       	ldi	r30, 0x4E	; 78
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	88 60       	ori	r24, 0x08	; 8
    211a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM13);
    211c:	ae e4       	ldi	r26, 0x4E	; 78
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	ee e4       	ldi	r30, 0x4E	; 78
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	8f 7e       	andi	r24, 0xEF	; 239
    2128:	8c 93       	st	X, r24
    212a:	21 c1       	rjmp	.+578    	; 0x236e <Timer1_Init+0x448>
			break;
		case Fast_PWM_8BIT:
			SET_BIT(TCCR1A, WGM10);
    212c:	af e4       	ldi	r26, 0x4F	; 79
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	ef e4       	ldi	r30, 0x4F	; 79
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	81 60       	ori	r24, 0x01	; 1
    2138:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, WGM11);
    213a:	af e4       	ldi	r26, 0x4F	; 79
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	ef e4       	ldi	r30, 0x4F	; 79
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	8d 7f       	andi	r24, 0xFD	; 253
    2146:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2148:	ae e4       	ldi	r26, 0x4E	; 78
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	ee e4       	ldi	r30, 0x4E	; 78
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	88 60       	ori	r24, 0x08	; 8
    2154:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM13);
    2156:	ae e4       	ldi	r26, 0x4E	; 78
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	ee e4       	ldi	r30, 0x4E	; 78
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	8f 7e       	andi	r24, 0xEF	; 239
    2162:	8c 93       	st	X, r24
    2164:	04 c1       	rjmp	.+520    	; 0x236e <Timer1_Init+0x448>
			break;
		case Fast_PWM_9BIT:
			CLR_BIT(TCCR1A, WGM10);
    2166:	af e4       	ldi	r26, 0x4F	; 79
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	ef e4       	ldi	r30, 0x4F	; 79
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	8e 7f       	andi	r24, 0xFE	; 254
    2172:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2174:	af e4       	ldi	r26, 0x4F	; 79
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	ef e4       	ldi	r30, 0x4F	; 79
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	82 60       	ori	r24, 0x02	; 2
    2180:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2182:	ae e4       	ldi	r26, 0x4E	; 78
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	ee e4       	ldi	r30, 0x4E	; 78
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	88 60       	ori	r24, 0x08	; 8
    218e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM13);
    2190:	ae e4       	ldi	r26, 0x4E	; 78
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	ee e4       	ldi	r30, 0x4E	; 78
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	8f 7e       	andi	r24, 0xEF	; 239
    219c:	8c 93       	st	X, r24
    219e:	e7 c0       	rjmp	.+462    	; 0x236e <Timer1_Init+0x448>
			break;
		case Fast_PWM_10BIT:
			SET_BIT(TCCR1A, WGM10);
    21a0:	af e4       	ldi	r26, 0x4F	; 79
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	ef e4       	ldi	r30, 0x4F	; 79
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	81 60       	ori	r24, 0x01	; 1
    21ac:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    21ae:	af e4       	ldi	r26, 0x4F	; 79
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	ef e4       	ldi	r30, 0x4F	; 79
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	82 60       	ori	r24, 0x02	; 2
    21ba:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    21bc:	ae e4       	ldi	r26, 0x4E	; 78
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	ee e4       	ldi	r30, 0x4E	; 78
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	88 60       	ori	r24, 0x08	; 8
    21c8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM13);
    21ca:	ae e4       	ldi	r26, 0x4E	; 78
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	ee e4       	ldi	r30, 0x4E	; 78
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	8f 7e       	andi	r24, 0xEF	; 239
    21d6:	8c 93       	st	X, r24
    21d8:	ca c0       	rjmp	.+404    	; 0x236e <Timer1_Init+0x448>
			break;
		case PhaseCorrect_Mode_ICR1_BOTTOM:
			CLR_BIT(TCCR1A, WGM10);
    21da:	af e4       	ldi	r26, 0x4F	; 79
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	ef e4       	ldi	r30, 0x4F	; 79
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8e 7f       	andi	r24, 0xFE	; 254
    21e6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, WGM11);
    21e8:	af e4       	ldi	r26, 0x4F	; 79
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	ef e4       	ldi	r30, 0x4F	; 79
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8d 7f       	andi	r24, 0xFD	; 253
    21f4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);
    21f6:	ae e4       	ldi	r26, 0x4E	; 78
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	ee e4       	ldi	r30, 0x4E	; 78
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	87 7f       	andi	r24, 0xF7	; 247
    2202:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    2204:	ae e4       	ldi	r26, 0x4E	; 78
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	ee e4       	ldi	r30, 0x4E	; 78
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	80 61       	ori	r24, 0x10	; 16
    2210:	8c 93       	st	X, r24
    2212:	ad c0       	rjmp	.+346    	; 0x236e <Timer1_Init+0x448>
			break;
		case PhaseCorrect_Mode_OCR1A_BOTTOM:
			SET_BIT(TCCR1A, WGM10);
    2214:	af e4       	ldi	r26, 0x4F	; 79
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	ef e4       	ldi	r30, 0x4F	; 79
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	81 60       	ori	r24, 0x01	; 1
    2220:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, WGM11);
    2222:	af e4       	ldi	r26, 0x4F	; 79
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	ef e4       	ldi	r30, 0x4F	; 79
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	8d 7f       	andi	r24, 0xFD	; 253
    222e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);
    2230:	ae e4       	ldi	r26, 0x4E	; 78
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	ee e4       	ldi	r30, 0x4E	; 78
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	87 7f       	andi	r24, 0xF7	; 247
    223c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    223e:	ae e4       	ldi	r26, 0x4E	; 78
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	ee e4       	ldi	r30, 0x4E	; 78
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	80 61       	ori	r24, 0x10	; 16
    224a:	8c 93       	st	X, r24
    224c:	90 c0       	rjmp	.+288    	; 0x236e <Timer1_Init+0x448>
			break;
		case PhaseCorrect_Mode_ICR1_TOP:
			CLR_BIT(TCCR1A, WGM10);
    224e:	af e4       	ldi	r26, 0x4F	; 79
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ef e4       	ldi	r30, 0x4F	; 79
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8e 7f       	andi	r24, 0xFE	; 254
    225a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    225c:	af e4       	ldi	r26, 0x4F	; 79
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	ef e4       	ldi	r30, 0x4F	; 79
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	82 60       	ori	r24, 0x02	; 2
    2268:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);
    226a:	ae e4       	ldi	r26, 0x4E	; 78
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	ee e4       	ldi	r30, 0x4E	; 78
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	87 7f       	andi	r24, 0xF7	; 247
    2276:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    2278:	ae e4       	ldi	r26, 0x4E	; 78
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	ee e4       	ldi	r30, 0x4E	; 78
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	80 61       	ori	r24, 0x10	; 16
    2284:	8c 93       	st	X, r24
    2286:	73 c0       	rjmp	.+230    	; 0x236e <Timer1_Init+0x448>
			break;
		case PhaseCorrect_Mode_OCR1A_TOP:
			SET_BIT(TCCR1A, WGM10);
    2288:	af e4       	ldi	r26, 0x4F	; 79
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ef e4       	ldi	r30, 0x4F	; 79
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	81 60       	ori	r24, 0x01	; 1
    2294:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2296:	af e4       	ldi	r26, 0x4F	; 79
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ef e4       	ldi	r30, 0x4F	; 79
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	82 60       	ori	r24, 0x02	; 2
    22a2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, WGM12);
    22a4:	ae e4       	ldi	r26, 0x4E	; 78
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ee e4       	ldi	r30, 0x4E	; 78
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	87 7f       	andi	r24, 0xF7	; 247
    22b0:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    22b2:	ae e4       	ldi	r26, 0x4E	; 78
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ee e4       	ldi	r30, 0x4E	; 78
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	80 61       	ori	r24, 0x10	; 16
    22be:	8c 93       	st	X, r24
    22c0:	56 c0       	rjmp	.+172    	; 0x236e <Timer1_Init+0x448>
			break;
		case CTC_Mode_ICR1:
			CLR_BIT(TCCR1A, WGM10);
    22c2:	af e4       	ldi	r26, 0x4F	; 79
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	ef e4       	ldi	r30, 0x4F	; 79
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	8e 7f       	andi	r24, 0xFE	; 254
    22ce:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, WGM11);
    22d0:	af e4       	ldi	r26, 0x4F	; 79
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	ef e4       	ldi	r30, 0x4F	; 79
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	8d 7f       	andi	r24, 0xFD	; 253
    22dc:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    22de:	ae e4       	ldi	r26, 0x4E	; 78
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	ee e4       	ldi	r30, 0x4E	; 78
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	88 60       	ori	r24, 0x08	; 8
    22ea:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    22ec:	ae e4       	ldi	r26, 0x4E	; 78
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	ee e4       	ldi	r30, 0x4E	; 78
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	80 61       	ori	r24, 0x10	; 16
    22f8:	8c 93       	st	X, r24
    22fa:	39 c0       	rjmp	.+114    	; 0x236e <Timer1_Init+0x448>
			break;
		case Fast_PWM_ICR1:
			CLR_BIT(TCCR1A, WGM10);
    22fc:	af e4       	ldi	r26, 0x4F	; 79
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	ef e4       	ldi	r30, 0x4F	; 79
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	8e 7f       	andi	r24, 0xFE	; 254
    2308:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    230a:	af e4       	ldi	r26, 0x4F	; 79
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	ef e4       	ldi	r30, 0x4F	; 79
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	82 60       	ori	r24, 0x02	; 2
    2316:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2318:	ae e4       	ldi	r26, 0x4E	; 78
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	ee e4       	ldi	r30, 0x4E	; 78
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	88 60       	ori	r24, 0x08	; 8
    2324:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    2326:	ae e4       	ldi	r26, 0x4E	; 78
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	ee e4       	ldi	r30, 0x4E	; 78
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	80 61       	ori	r24, 0x10	; 16
    2332:	8c 93       	st	X, r24
    2334:	1c c0       	rjmp	.+56     	; 0x236e <Timer1_Init+0x448>
			break;
		case Fast_PWM_OCR1A:
			SET_BIT(TCCR1A, WGM10);
    2336:	af e4       	ldi	r26, 0x4F	; 79
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	ef e4       	ldi	r30, 0x4F	; 79
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	81 60       	ori	r24, 0x01	; 1
    2342:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, WGM11);
    2344:	af e4       	ldi	r26, 0x4F	; 79
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	ef e4       	ldi	r30, 0x4F	; 79
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	82 60       	ori	r24, 0x02	; 2
    2350:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM12);
    2352:	ae e4       	ldi	r26, 0x4E	; 78
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	ee e4       	ldi	r30, 0x4E	; 78
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	88 60       	ori	r24, 0x08	; 8
    235e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, WGM13);
    2360:	ae e4       	ldi	r26, 0x4E	; 78
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	ee e4       	ldi	r30, 0x4E	; 78
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	80 61       	ori	r24, 0x10	; 16
    236c:	8c 93       	st	X, r24
			break;
	}
	
	switch(oc1a)
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	38 87       	std	Y+8, r19	; 0x08
    2376:	2f 83       	std	Y+7, r18	; 0x07
    2378:	8f 81       	ldd	r24, Y+7	; 0x07
    237a:	98 85       	ldd	r25, Y+8	; 0x08
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	91 05       	cpc	r25, r1
    2380:	21 f1       	breq	.+72     	; 0x23ca <Timer1_Init+0x4a4>
    2382:	2f 81       	ldd	r18, Y+7	; 0x07
    2384:	38 85       	ldd	r19, Y+8	; 0x08
    2386:	22 30       	cpi	r18, 0x02	; 2
    2388:	31 05       	cpc	r19, r1
    238a:	2c f4       	brge	.+10     	; 0x2396 <Timer1_Init+0x470>
    238c:	8f 81       	ldd	r24, Y+7	; 0x07
    238e:	98 85       	ldd	r25, Y+8	; 0x08
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	61 f0       	breq	.+24     	; 0x23ac <Timer1_Init+0x486>
    2394:	46 c0       	rjmp	.+140    	; 0x2422 <Timer1_Init+0x4fc>
    2396:	2f 81       	ldd	r18, Y+7	; 0x07
    2398:	38 85       	ldd	r19, Y+8	; 0x08
    239a:	22 30       	cpi	r18, 0x02	; 2
    239c:	31 05       	cpc	r19, r1
    239e:	99 f1       	breq	.+102    	; 0x2406 <Timer1_Init+0x4e0>
    23a0:	8f 81       	ldd	r24, Y+7	; 0x07
    23a2:	98 85       	ldd	r25, Y+8	; 0x08
    23a4:	83 30       	cpi	r24, 0x03	; 3
    23a6:	91 05       	cpc	r25, r1
    23a8:	f9 f0       	breq	.+62     	; 0x23e8 <Timer1_Init+0x4c2>
    23aa:	3b c0       	rjmp	.+118    	; 0x2422 <Timer1_Init+0x4fc>
	{
		case OC1A_Disconnected:
			CLR_BIT(TCCR1A, COM1A0);
    23ac:	af e4       	ldi	r26, 0x4F	; 79
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	ef e4       	ldi	r30, 0x4F	; 79
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 7b       	andi	r24, 0xBF	; 191
    23b8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, COM1A1);
    23ba:	af e4       	ldi	r26, 0x4F	; 79
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	ef e4       	ldi	r30, 0x4F	; 79
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	8f 77       	andi	r24, 0x7F	; 127
    23c6:	8c 93       	st	X, r24
    23c8:	2c c0       	rjmp	.+88     	; 0x2422 <Timer1_Init+0x4fc>
			break;
		case OC1A_Toggle:
			SET_BIT(TCCR1A, COM1A0);
    23ca:	af e4       	ldi	r26, 0x4F	; 79
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	ef e4       	ldi	r30, 0x4F	; 79
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	80 64       	ori	r24, 0x40	; 64
    23d6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, COM1A1);
    23d8:	af e4       	ldi	r26, 0x4F	; 79
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	ef e4       	ldi	r30, 0x4F	; 79
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	8f 77       	andi	r24, 0x7F	; 127
    23e4:	8c 93       	st	X, r24
    23e6:	1d c0       	rjmp	.+58     	; 0x2422 <Timer1_Init+0x4fc>
			break;
		case OC1A_Inverting:
			CLR_BIT(TCCR1A, COM1A0);
    23e8:	af e4       	ldi	r26, 0x4F	; 79
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	ef e4       	ldi	r30, 0x4F	; 79
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	8f 7b       	andi	r24, 0xBF	; 191
    23f4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, COM1A1);
    23f6:	af e4       	ldi	r26, 0x4F	; 79
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	ef e4       	ldi	r30, 0x4F	; 79
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	80 68       	ori	r24, 0x80	; 128
    2402:	8c 93       	st	X, r24
    2404:	0e c0       	rjmp	.+28     	; 0x2422 <Timer1_Init+0x4fc>
			break;
		case OC1A_NON_Inverting:
			SET_BIT(TCCR1A, COM1A0);
    2406:	af e4       	ldi	r26, 0x4F	; 79
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	ef e4       	ldi	r30, 0x4F	; 79
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	80 64       	ori	r24, 0x40	; 64
    2412:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, COM1A1);
    2414:	af e4       	ldi	r26, 0x4F	; 79
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	ef e4       	ldi	r30, 0x4F	; 79
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	80 68       	ori	r24, 0x80	; 128
    2420:	8c 93       	st	X, r24
			break;
	}
	
	switch(oc1b)
    2422:	8c 81       	ldd	r24, Y+4	; 0x04
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	3e 83       	std	Y+6, r19	; 0x06
    242a:	2d 83       	std	Y+5, r18	; 0x05
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	81 30       	cpi	r24, 0x01	; 1
    2432:	91 05       	cpc	r25, r1
    2434:	21 f1       	breq	.+72     	; 0x247e <Timer1_Init+0x558>
    2436:	2d 81       	ldd	r18, Y+5	; 0x05
    2438:	3e 81       	ldd	r19, Y+6	; 0x06
    243a:	22 30       	cpi	r18, 0x02	; 2
    243c:	31 05       	cpc	r19, r1
    243e:	2c f4       	brge	.+10     	; 0x244a <Timer1_Init+0x524>
    2440:	8d 81       	ldd	r24, Y+5	; 0x05
    2442:	9e 81       	ldd	r25, Y+6	; 0x06
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	61 f0       	breq	.+24     	; 0x2460 <Timer1_Init+0x53a>
    2448:	46 c0       	rjmp	.+140    	; 0x24d6 <Timer1_Init+0x5b0>
    244a:	2d 81       	ldd	r18, Y+5	; 0x05
    244c:	3e 81       	ldd	r19, Y+6	; 0x06
    244e:	22 30       	cpi	r18, 0x02	; 2
    2450:	31 05       	cpc	r19, r1
    2452:	99 f1       	breq	.+102    	; 0x24ba <Timer1_Init+0x594>
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	9e 81       	ldd	r25, Y+6	; 0x06
    2458:	83 30       	cpi	r24, 0x03	; 3
    245a:	91 05       	cpc	r25, r1
    245c:	f9 f0       	breq	.+62     	; 0x249c <Timer1_Init+0x576>
    245e:	3b c0       	rjmp	.+118    	; 0x24d6 <Timer1_Init+0x5b0>
	{
		case OC1B_Disconnected:
			CLR_BIT(TCCR1A, COM1B0);
    2460:	af e4       	ldi	r26, 0x4F	; 79
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	ef e4       	ldi	r30, 0x4F	; 79
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	8f 7e       	andi	r24, 0xEF	; 239
    246c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, COM1B1);
    246e:	af e4       	ldi	r26, 0x4F	; 79
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	ef e4       	ldi	r30, 0x4F	; 79
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	8f 7d       	andi	r24, 0xDF	; 223
    247a:	8c 93       	st	X, r24
    247c:	2c c0       	rjmp	.+88     	; 0x24d6 <Timer1_Init+0x5b0>
			break;
		case OC1B_Toggle:
			SET_BIT(TCCR1A, COM1B0);
    247e:	af e4       	ldi	r26, 0x4F	; 79
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	ef e4       	ldi	r30, 0x4F	; 79
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	80 61       	ori	r24, 0x10	; 16
    248a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, COM1B1);
    248c:	af e4       	ldi	r26, 0x4F	; 79
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ef e4       	ldi	r30, 0x4F	; 79
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	8f 7d       	andi	r24, 0xDF	; 223
    2498:	8c 93       	st	X, r24
    249a:	1d c0       	rjmp	.+58     	; 0x24d6 <Timer1_Init+0x5b0>
			break;
		case OC1B_Inverting:
			CLR_BIT(TCCR1A, COM1B0);
    249c:	af e4       	ldi	r26, 0x4F	; 79
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	ef e4       	ldi	r30, 0x4F	; 79
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	8f 7e       	andi	r24, 0xEF	; 239
    24a8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, COM1B1);
    24aa:	af e4       	ldi	r26, 0x4F	; 79
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	ef e4       	ldi	r30, 0x4F	; 79
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	80 62       	ori	r24, 0x20	; 32
    24b6:	8c 93       	st	X, r24
    24b8:	0e c0       	rjmp	.+28     	; 0x24d6 <Timer1_Init+0x5b0>
			break;
		case OC1B_NON_Inverting:
			SET_BIT(TCCR1A, COM1B0);
    24ba:	af e4       	ldi	r26, 0x4F	; 79
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	ef e4       	ldi	r30, 0x4F	; 79
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	80 61       	ori	r24, 0x10	; 16
    24c6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, COM1B1);
    24c8:	af e4       	ldi	r26, 0x4F	; 79
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	ef e4       	ldi	r30, 0x4F	; 79
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	80 62       	ori	r24, 0x20	; 32
    24d4:	8c 93       	st	X, r24
			break;
	}
	CLR_BIT(TCCR1B, CS10);
    24d6:	ae e4       	ldi	r26, 0x4E	; 78
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	ee e4       	ldi	r30, 0x4E	; 78
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8e 7f       	andi	r24, 0xFE	; 254
    24e2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    24e4:	ae e4       	ldi	r26, 0x4E	; 78
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	ee e4       	ldi	r30, 0x4E	; 78
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	8d 7f       	andi	r24, 0xFD	; 253
    24f0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    24f2:	ae e4       	ldi	r26, 0x4E	; 78
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	ee e4       	ldi	r30, 0x4E	; 78
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	8b 7f       	andi	r24, 0xFB	; 251
    24fe:	8c 93       	st	X, r24
	TCCR1B |= scaler;
    2500:	ae e4       	ldi	r26, 0x4E	; 78
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	ee e4       	ldi	r30, 0x4E	; 78
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	90 81       	ld	r25, Z
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	89 2b       	or	r24, r25
    250e:	8c 93       	st	X, r24
}
    2510:	2a 96       	adiw	r28, 0x0a	; 10
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <Timer1_InputCaptureEdge>:

void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	0f 92       	push	r0
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	89 83       	std	Y+1, r24	; 0x01
	if (FALLING)
	{
		CLR_BIT(TCCR1B, ICES1);
    252e:	ae e4       	ldi	r26, 0x4E	; 78
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	ee e4       	ldi	r30, 0x4E	; 78
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	8f 7b       	andi	r24, 0xBF	; 191
    253a:	8c 93       	st	X, r24
	}
	else if(RISING)
	{
		SET_BIT(TCCR1B, ICES1);
	}
}
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <Timer1_ICU_InterruptEnable>:

void Timer1_ICU_InterruptEnable(void)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TICIE1);
    254c:	a9 e5       	ldi	r26, 0x59	; 89
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e9 e5       	ldi	r30, 0x59	; 89
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	80 62       	ori	r24, 0x20	; 32
    2558:	8c 93       	st	X, r24
}
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <Timer1_ICU_InterruptDisable>:

void Timer1_ICU_InterruptDisable(void)
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TICIE1);
    2568:	a9 e5       	ldi	r26, 0x59	; 89
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e9 e5       	ldi	r30, 0x59	; 89
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8f 7d       	andi	r24, 0xDF	; 223
    2574:	8c 93       	st	X, r24
}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <Timer1_OVF_InterruptEnable>:

void Timer1_OVF_InterruptEnable(void)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE1);
    2584:	a9 e5       	ldi	r26, 0x59	; 89
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e9 e5       	ldi	r30, 0x59	; 89
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	84 60       	ori	r24, 0x04	; 4
    2590:	8c 93       	st	X, r24
}
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <Timer1_OVF_InterruptDisable>:

void Timer1_OVF_InterruptDisable(void)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TOIE1);
    25a0:	a9 e5       	ldi	r26, 0x59	; 89
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e9 e5       	ldi	r30, 0x59	; 89
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	8b 7f       	andi	r24, 0xFB	; 251
    25ac:	8c 93       	st	X, r24
}
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <Timer1_OCA_InterruptEnable>:

void Timer1_OCA_InterruptEnable(void)
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1A);
    25bc:	a9 e5       	ldi	r26, 0x59	; 89
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e9 e5       	ldi	r30, 0x59	; 89
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	80 61       	ori	r24, 0x10	; 16
    25c8:	8c 93       	st	X, r24
}
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <Timer1_OCA_InterruptDisable>:

void Timer1_OCA_InterruptDisable(void)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, OCIE1A);
    25d8:	a9 e5       	ldi	r26, 0x59	; 89
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e9 e5       	ldi	r30, 0x59	; 89
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	8f 7e       	andi	r24, 0xEF	; 239
    25e4:	8c 93       	st	X, r24
}
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <Timer1_OCB_InterruptEnable>:

void Timer1_OCB_InterruptEnable(void)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE1B);
    25f4:	a9 e5       	ldi	r26, 0x59	; 89
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e9 e5       	ldi	r30, 0x59	; 89
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	88 60       	ori	r24, 0x08	; 8
    2600:	8c 93       	st	X, r24
}
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <Timer1_OCB_InterruptDisable>:

void Timer1_OCB_InterruptDisable(void)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, OCIE1B);
    2610:	a9 e5       	ldi	r26, 0x59	; 89
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e9 e5       	ldi	r30, 0x59	; 89
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	87 7f       	andi	r24, 0xF7	; 247
    261c:	8c 93       	st	X, r24
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <SetCallBack_Timer1_OVF>:

/*********************** Timer 1 Call Back functions ********************/
void SetCallBack_Timer1_OVF(void(*LocalFptr)(void))
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	00 d0       	rcall	.+0      	; 0x262a <SetCallBack_Timer1_OVF+0x6>
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	9a 83       	std	Y+2, r25	; 0x02
    2630:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_callBackPtr = LocalFptr;
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	90 93 6d 01 	sts	0x016D, r25
    263a:	80 93 6c 01 	sts	0x016C, r24
}
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <SetCallBack_Timer1_OCA_>:

void SetCallBack_Timer1_OCA_(void(*LocalFptr)(void))
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <SetCallBack_Timer1_OCA_+0x6>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_callBackPtr = LocalFptr;
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	90 93 6f 01 	sts	0x016F, r25
    265e:	80 93 6e 01 	sts	0x016E, r24
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <SetCallBack_Timer1_OCB>:

void SetCallBack_Timer1_OCB(void(*LocalFptr)(void))
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	00 d0       	rcall	.+0      	; 0x2672 <SetCallBack_Timer1_OCB+0x6>
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_callBackPtr = LocalFptr;
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	9a 81       	ldd	r25, Y+2	; 0x02
    267e:	90 93 71 01 	sts	0x0171, r25
    2682:	80 93 70 01 	sts	0x0170, r24
}
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <SetCallBack_Timer1_ICU>:

void SetCallBack_Timer1_ICU(void(*LocalFptr)(void))
{
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	00 d0       	rcall	.+0      	; 0x2696 <SetCallBack_Timer1_ICU+0x6>
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_callBackPtr = LocalFptr;
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	90 93 73 01 	sts	0x0173, r25
    26a6:	80 93 72 01 	sts	0x0172, r24
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <__vector_9>:


/************************* Timer 1 ISR functions ************************/

ISR(TIMER1_OVF_vect)
{
    26b4:	1f 92       	push	r1
    26b6:	0f 92       	push	r0
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	0f 92       	push	r0
    26bc:	11 24       	eor	r1, r1
    26be:	2f 93       	push	r18
    26c0:	3f 93       	push	r19
    26c2:	4f 93       	push	r20
    26c4:	5f 93       	push	r21
    26c6:	6f 93       	push	r22
    26c8:	7f 93       	push	r23
    26ca:	8f 93       	push	r24
    26cc:	9f 93       	push	r25
    26ce:	af 93       	push	r26
    26d0:	bf 93       	push	r27
    26d2:	ef 93       	push	r30
    26d4:	ff 93       	push	r31
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_OVF_callBackPtr != NULLPTR)
    26de:	80 91 6c 01 	lds	r24, 0x016C
    26e2:	90 91 6d 01 	lds	r25, 0x016D
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	29 f0       	breq	.+10     	; 0x26f4 <__vector_9+0x40>
	{
		Timer1_OVF_callBackPtr();
    26ea:	e0 91 6c 01 	lds	r30, 0x016C
    26ee:	f0 91 6d 01 	lds	r31, 0x016D
    26f2:	09 95       	icall
	}
}
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	ff 91       	pop	r31
    26fa:	ef 91       	pop	r30
    26fc:	bf 91       	pop	r27
    26fe:	af 91       	pop	r26
    2700:	9f 91       	pop	r25
    2702:	8f 91       	pop	r24
    2704:	7f 91       	pop	r23
    2706:	6f 91       	pop	r22
    2708:	5f 91       	pop	r21
    270a:	4f 91       	pop	r20
    270c:	3f 91       	pop	r19
    270e:	2f 91       	pop	r18
    2710:	0f 90       	pop	r0
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	0f 90       	pop	r0
    2716:	1f 90       	pop	r1
    2718:	18 95       	reti

0000271a <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    271a:	1f 92       	push	r1
    271c:	0f 92       	push	r0
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	0f 92       	push	r0
    2722:	11 24       	eor	r1, r1
    2724:	2f 93       	push	r18
    2726:	3f 93       	push	r19
    2728:	4f 93       	push	r20
    272a:	5f 93       	push	r21
    272c:	6f 93       	push	r22
    272e:	7f 93       	push	r23
    2730:	8f 93       	push	r24
    2732:	9f 93       	push	r25
    2734:	af 93       	push	r26
    2736:	bf 93       	push	r27
    2738:	ef 93       	push	r30
    273a:	ff 93       	push	r31
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_OCA_callBackPtr != NULLPTR)
    2744:	80 91 6e 01 	lds	r24, 0x016E
    2748:	90 91 6f 01 	lds	r25, 0x016F
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	29 f0       	breq	.+10     	; 0x275a <__vector_7+0x40>
	{
		Timer1_OCA_callBackPtr();
    2750:	e0 91 6e 01 	lds	r30, 0x016E
    2754:	f0 91 6f 01 	lds	r31, 0x016F
    2758:	09 95       	icall
	}
}
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	ff 91       	pop	r31
    2760:	ef 91       	pop	r30
    2762:	bf 91       	pop	r27
    2764:	af 91       	pop	r26
    2766:	9f 91       	pop	r25
    2768:	8f 91       	pop	r24
    276a:	7f 91       	pop	r23
    276c:	6f 91       	pop	r22
    276e:	5f 91       	pop	r21
    2770:	4f 91       	pop	r20
    2772:	3f 91       	pop	r19
    2774:	2f 91       	pop	r18
    2776:	0f 90       	pop	r0
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	0f 90       	pop	r0
    277c:	1f 90       	pop	r1
    277e:	18 95       	reti

00002780 <__vector_8>:


ISR(TIMER1_COMPB_vect)
{
    2780:	1f 92       	push	r1
    2782:	0f 92       	push	r0
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	0f 92       	push	r0
    2788:	11 24       	eor	r1, r1
    278a:	2f 93       	push	r18
    278c:	3f 93       	push	r19
    278e:	4f 93       	push	r20
    2790:	5f 93       	push	r21
    2792:	6f 93       	push	r22
    2794:	7f 93       	push	r23
    2796:	8f 93       	push	r24
    2798:	9f 93       	push	r25
    279a:	af 93       	push	r26
    279c:	bf 93       	push	r27
    279e:	ef 93       	push	r30
    27a0:	ff 93       	push	r31
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_OCA_callBackPtr != NULLPTR)
    27aa:	80 91 6e 01 	lds	r24, 0x016E
    27ae:	90 91 6f 01 	lds	r25, 0x016F
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	29 f0       	breq	.+10     	; 0x27c0 <__vector_8+0x40>
	{
		Timer1_OCA_callBackPtr();
    27b6:	e0 91 6e 01 	lds	r30, 0x016E
    27ba:	f0 91 6f 01 	lds	r31, 0x016F
    27be:	09 95       	icall
	}
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	ff 91       	pop	r31
    27c6:	ef 91       	pop	r30
    27c8:	bf 91       	pop	r27
    27ca:	af 91       	pop	r26
    27cc:	9f 91       	pop	r25
    27ce:	8f 91       	pop	r24
    27d0:	7f 91       	pop	r23
    27d2:	6f 91       	pop	r22
    27d4:	5f 91       	pop	r21
    27d6:	4f 91       	pop	r20
    27d8:	3f 91       	pop	r19
    27da:	2f 91       	pop	r18
    27dc:	0f 90       	pop	r0
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	0f 90       	pop	r0
    27e2:	1f 90       	pop	r1
    27e4:	18 95       	reti

000027e6 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    27e6:	1f 92       	push	r1
    27e8:	0f 92       	push	r0
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	0f 92       	push	r0
    27ee:	11 24       	eor	r1, r1
    27f0:	2f 93       	push	r18
    27f2:	3f 93       	push	r19
    27f4:	4f 93       	push	r20
    27f6:	5f 93       	push	r21
    27f8:	6f 93       	push	r22
    27fa:	7f 93       	push	r23
    27fc:	8f 93       	push	r24
    27fe:	9f 93       	push	r25
    2800:	af 93       	push	r26
    2802:	bf 93       	push	r27
    2804:	ef 93       	push	r30
    2806:	ff 93       	push	r31
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_ICU_callBackPtr != NULLPTR)
    2810:	80 91 72 01 	lds	r24, 0x0172
    2814:	90 91 73 01 	lds	r25, 0x0173
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	29 f0       	breq	.+10     	; 0x2826 <__vector_6+0x40>
	{
		Timer1_ICU_callBackPtr();
    281c:	e0 91 72 01 	lds	r30, 0x0172
    2820:	f0 91 73 01 	lds	r31, 0x0173
    2824:	09 95       	icall
	}
}
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	ff 91       	pop	r31
    282c:	ef 91       	pop	r30
    282e:	bf 91       	pop	r27
    2830:	af 91       	pop	r26
    2832:	9f 91       	pop	r25
    2834:	8f 91       	pop	r24
    2836:	7f 91       	pop	r23
    2838:	6f 91       	pop	r22
    283a:	5f 91       	pop	r21
    283c:	4f 91       	pop	r20
    283e:	3f 91       	pop	r19
    2840:	2f 91       	pop	r18
    2842:	0f 90       	pop	r0
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	0f 90       	pop	r0
    2848:	1f 90       	pop	r1
    284a:	18 95       	reti

0000284c <Timer2_Init>:
/************************************************************************/
/*					   Timer1 Functions Definitions                     */
/************************************************************************/

void Timer2_Init(Timer2Mode t_mode, Timer2Scale scaler, OC2Mode oc2_mode)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	27 97       	sbiw	r28, 0x07	; 7
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	6a 83       	std	Y+2, r22	; 0x02
    2864:	4b 83       	std	Y+3, r20	; 0x03
	/* switch over all modes and set its bits from datasheet */
	switch(t_mode)
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	3f 83       	std	Y+7, r19	; 0x07
    286e:	2e 83       	std	Y+6, r18	; 0x06
    2870:	8e 81       	ldd	r24, Y+6	; 0x06
    2872:	9f 81       	ldd	r25, Y+7	; 0x07
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	91 05       	cpc	r25, r1
    2878:	99 f1       	breq	.+102    	; 0x28e0 <Timer2_Init+0x94>
    287a:	2e 81       	ldd	r18, Y+6	; 0x06
    287c:	3f 81       	ldd	r19, Y+7	; 0x07
    287e:	22 30       	cpi	r18, 0x02	; 2
    2880:	31 05       	cpc	r19, r1
    2882:	2c f4       	brge	.+10     	; 0x288e <Timer2_Init+0x42>
    2884:	8e 81       	ldd	r24, Y+6	; 0x06
    2886:	9f 81       	ldd	r25, Y+7	; 0x07
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	61 f0       	breq	.+24     	; 0x28a4 <Timer2_Init+0x58>
    288c:	46 c0       	rjmp	.+140    	; 0x291a <Timer2_Init+0xce>
    288e:	2e 81       	ldd	r18, Y+6	; 0x06
    2890:	3f 81       	ldd	r19, Y+7	; 0x07
    2892:	22 30       	cpi	r18, 0x02	; 2
    2894:	31 05       	cpc	r19, r1
    2896:	a9 f0       	breq	.+42     	; 0x28c2 <Timer2_Init+0x76>
    2898:	8e 81       	ldd	r24, Y+6	; 0x06
    289a:	9f 81       	ldd	r25, Y+7	; 0x07
    289c:	83 30       	cpi	r24, 0x03	; 3
    289e:	91 05       	cpc	r25, r1
    28a0:	71 f1       	breq	.+92     	; 0x28fe <Timer2_Init+0xb2>
    28a2:	3b c0       	rjmp	.+118    	; 0x291a <Timer2_Init+0xce>
	{
		case Timer2_Normal_Mode:
		CLR_BIT(TCCR2, WGM20);
    28a4:	a5 e4       	ldi	r26, 0x45	; 69
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e5 e4       	ldi	r30, 0x45	; 69
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	8f 7b       	andi	r24, 0xBF	; 191
    28b0:	8c 93       	st	X, r24
		CLR_BIT(TCCR2, WGM21);
    28b2:	a5 e4       	ldi	r26, 0x45	; 69
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	e5 e4       	ldi	r30, 0x45	; 69
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	87 7f       	andi	r24, 0xF7	; 247
    28be:	8c 93       	st	X, r24
    28c0:	2c c0       	rjmp	.+88     	; 0x291a <Timer2_Init+0xce>
		break;
		case Timer2_CTC_Mode:
		CLR_BIT(TCCR2, WGM20);
    28c2:	a5 e4       	ldi	r26, 0x45	; 69
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e5 e4       	ldi	r30, 0x45	; 69
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	8f 7b       	andi	r24, 0xBF	; 191
    28ce:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    28d0:	a5 e4       	ldi	r26, 0x45	; 69
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e5 e4       	ldi	r30, 0x45	; 69
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	88 60       	ori	r24, 0x08	; 8
    28dc:	8c 93       	st	X, r24
    28de:	1d c0       	rjmp	.+58     	; 0x291a <Timer2_Init+0xce>
		break;
		case Timer2_PhaseCorrect_Mode:
		SET_BIT(TCCR2, WGM20);
    28e0:	a5 e4       	ldi	r26, 0x45	; 69
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	e5 e4       	ldi	r30, 0x45	; 69
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	80 64       	ori	r24, 0x40	; 64
    28ec:	8c 93       	st	X, r24
		CLR_BIT(TCCR2, WGM21);
    28ee:	a5 e4       	ldi	r26, 0x45	; 69
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e5 e4       	ldi	r30, 0x45	; 69
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	87 7f       	andi	r24, 0xF7	; 247
    28fa:	8c 93       	st	X, r24
    28fc:	0e c0       	rjmp	.+28     	; 0x291a <Timer2_Init+0xce>
		break;
		case Timer2_FastPWM_Mode:
		SET_BIT(TCCR2, WGM20);
    28fe:	a5 e4       	ldi	r26, 0x45	; 69
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e5 e4       	ldi	r30, 0x45	; 69
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	80 64       	ori	r24, 0x40	; 64
    290a:	8c 93       	st	X, r24
		SET_BIT(TCCR2, WGM21);
    290c:	a5 e4       	ldi	r26, 0x45	; 69
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e5 e4       	ldi	r30, 0x45	; 69
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	88 60       	ori	r24, 0x08	; 8
    2918:	8c 93       	st	X, r24
		break;
	}
	switch(oc2_mode)
    291a:	8b 81       	ldd	r24, Y+3	; 0x03
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	3d 83       	std	Y+5, r19	; 0x05
    2922:	2c 83       	std	Y+4, r18	; 0x04
    2924:	8c 81       	ldd	r24, Y+4	; 0x04
    2926:	9d 81       	ldd	r25, Y+5	; 0x05
    2928:	81 30       	cpi	r24, 0x01	; 1
    292a:	91 05       	cpc	r25, r1
    292c:	21 f1       	breq	.+72     	; 0x2976 <Timer2_Init+0x12a>
    292e:	2c 81       	ldd	r18, Y+4	; 0x04
    2930:	3d 81       	ldd	r19, Y+5	; 0x05
    2932:	22 30       	cpi	r18, 0x02	; 2
    2934:	31 05       	cpc	r19, r1
    2936:	2c f4       	brge	.+10     	; 0x2942 <Timer2_Init+0xf6>
    2938:	8c 81       	ldd	r24, Y+4	; 0x04
    293a:	9d 81       	ldd	r25, Y+5	; 0x05
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	61 f0       	breq	.+24     	; 0x2958 <Timer2_Init+0x10c>
    2940:	46 c0       	rjmp	.+140    	; 0x29ce <Timer2_Init+0x182>
    2942:	2c 81       	ldd	r18, Y+4	; 0x04
    2944:	3d 81       	ldd	r19, Y+5	; 0x05
    2946:	22 30       	cpi	r18, 0x02	; 2
    2948:	31 05       	cpc	r19, r1
    294a:	21 f1       	breq	.+72     	; 0x2994 <Timer2_Init+0x148>
    294c:	8c 81       	ldd	r24, Y+4	; 0x04
    294e:	9d 81       	ldd	r25, Y+5	; 0x05
    2950:	83 30       	cpi	r24, 0x03	; 3
    2952:	91 05       	cpc	r25, r1
    2954:	71 f1       	breq	.+92     	; 0x29b2 <Timer2_Init+0x166>
    2956:	3b c0       	rjmp	.+118    	; 0x29ce <Timer2_Init+0x182>
	{
		case OC2_Disconnected:
		CLR_BIT(TCCR2, COM20);
    2958:	a5 e4       	ldi	r26, 0x45	; 69
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e5 e4       	ldi	r30, 0x45	; 69
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	8f 7e       	andi	r24, 0xEF	; 239
    2964:	8c 93       	st	X, r24
		CLR_BIT(TCCR2, COM21);
    2966:	a5 e4       	ldi	r26, 0x45	; 69
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	e5 e4       	ldi	r30, 0x45	; 69
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	8f 7d       	andi	r24, 0xDF	; 223
    2972:	8c 93       	st	X, r24
    2974:	2c c0       	rjmp	.+88     	; 0x29ce <Timer2_Init+0x182>
		break;
		case OC2_Toggle:
		SET_BIT(TCCR2, COM20);
    2976:	a5 e4       	ldi	r26, 0x45	; 69
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e5 e4       	ldi	r30, 0x45	; 69
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	80 61       	ori	r24, 0x10	; 16
    2982:	8c 93       	st	X, r24
		CLR_BIT(TCCR2, COM21);
    2984:	a5 e4       	ldi	r26, 0x45	; 69
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e5 e4       	ldi	r30, 0x45	; 69
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	8f 7d       	andi	r24, 0xDF	; 223
    2990:	8c 93       	st	X, r24
    2992:	1d c0       	rjmp	.+58     	; 0x29ce <Timer2_Init+0x182>
		break;
		case OC2_NON_Inverting:
		CLR_BIT(TCCR2, COM20);
    2994:	a5 e4       	ldi	r26, 0x45	; 69
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e5 e4       	ldi	r30, 0x45	; 69
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	8f 7e       	andi	r24, 0xEF	; 239
    29a0:	8c 93       	st	X, r24
		SET_BIT(TCCR2, COM21);
    29a2:	a5 e4       	ldi	r26, 0x45	; 69
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e5 e4       	ldi	r30, 0x45	; 69
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	80 62       	ori	r24, 0x20	; 32
    29ae:	8c 93       	st	X, r24
    29b0:	0e c0       	rjmp	.+28     	; 0x29ce <Timer2_Init+0x182>
		break;
		case OC2_Inverting:
		SET_BIT(TCCR2, COM20);
    29b2:	a5 e4       	ldi	r26, 0x45	; 69
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e5 e4       	ldi	r30, 0x45	; 69
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	80 61       	ori	r24, 0x10	; 16
    29be:	8c 93       	st	X, r24
		SET_BIT(TCCR2, COM21);
    29c0:	a5 e4       	ldi	r26, 0x45	; 69
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e5 e4       	ldi	r30, 0x45	; 69
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	80 62       	ori	r24, 0x20	; 32
    29cc:	8c 93       	st	X, r24
		break;
	}
	/* set scaler for timer */
	CLR_BIT(TCCR2, CS20);
    29ce:	a5 e4       	ldi	r26, 0x45	; 69
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e5 e4       	ldi	r30, 0x45	; 69
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	8e 7f       	andi	r24, 0xFE	; 254
    29da:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS21);
    29dc:	a5 e4       	ldi	r26, 0x45	; 69
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	e5 e4       	ldi	r30, 0x45	; 69
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	8d 7f       	andi	r24, 0xFD	; 253
    29e8:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, CS22);
    29ea:	a5 e4       	ldi	r26, 0x45	; 69
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	e5 e4       	ldi	r30, 0x45	; 69
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	8b 7f       	andi	r24, 0xFB	; 251
    29f6:	8c 93       	st	X, r24
	TCCR2 |= scaler;
    29f8:	a5 e4       	ldi	r26, 0x45	; 69
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e5 e4       	ldi	r30, 0x45	; 69
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	90 81       	ld	r25, Z
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	89 2b       	or	r24, r25
    2a06:	8c 93       	st	X, r24
}
    2a08:	27 96       	adiw	r28, 0x07	; 7
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <Timer2_OV_InterruptEnable>:

void Timer2_OV_InterruptEnable(void)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, TOIE2);
    2a22:	a9 e5       	ldi	r26, 0x59	; 89
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	e9 e5       	ldi	r30, 0x59	; 89
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	80 64       	ori	r24, 0x40	; 64
    2a2e:	8c 93       	st	X, r24
}
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <Timer2_OV_InterruptDisable>:

void Timer2_OV_InterruptDisable(void)
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, TOIE2);
    2a3e:	a9 e5       	ldi	r26, 0x59	; 89
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e9 e5       	ldi	r30, 0x59	; 89
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	8f 7b       	andi	r24, 0xBF	; 191
    2a4a:	8c 93       	st	X, r24
}
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	08 95       	ret

00002a52 <Timer2_OC_InterruptEnable>:

void Timer2_OC_InterruptEnable(void)
{
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, OCIE2);
    2a5a:	a9 e5       	ldi	r26, 0x59	; 89
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e9 e5       	ldi	r30, 0x59	; 89
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	80 68       	ori	r24, 0x80	; 128
    2a66:	8c 93       	st	X, r24
}
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret

00002a6e <Timer2_OC_InterruptDisable>:

void Timer2_OC_InterruptDisable(void)
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, OCIE2);
    2a76:	a9 e5       	ldi	r26, 0x59	; 89
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e9 e5       	ldi	r30, 0x59	; 89
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	8f 77       	andi	r24, 0x7F	; 127
    2a82:	8c 93       	st	X, r24
}
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <SetCallBack_Timer2_OC2>:

/*********************** Timer 2 Call Back functions ********************/
void SetCallBack_Timer2_OC2(void(*LocalFptr)(void))
{
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <SetCallBack_Timer2_OC2+0x6>
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
    2a94:	9a 83       	std	Y+2, r25	; 0x02
    2a96:	89 83       	std	Y+1, r24	; 0x01
	Timer2_callBackPtr = LocalFptr;
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9c:	90 93 75 01 	sts	0x0175, r25
    2aa0:	80 93 74 01 	sts	0x0174, r24
}
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <SetCallBack_Timer2_OVF>:

void SetCallBack_Timer2_OVF(void(*LocalFptr)(void))
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <SetCallBack_Timer2_OVF+0x6>
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	9a 83       	std	Y+2, r25	; 0x02
    2aba:	89 83       	std	Y+1, r24	; 0x01
	Timer2_callBackPtr = LocalFptr;
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac0:	90 93 75 01 	sts	0x0175, r25
    2ac4:	80 93 74 01 	sts	0x0174, r24
}
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	08 95       	ret

00002ad2 <__vector_5>:

/************************* Timer 2 ISR functions ************************/
ISR(TIMER2_OVF_vect)
{
    2ad2:	1f 92       	push	r1
    2ad4:	0f 92       	push	r0
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	0f 92       	push	r0
    2ada:	11 24       	eor	r1, r1
    2adc:	2f 93       	push	r18
    2ade:	3f 93       	push	r19
    2ae0:	4f 93       	push	r20
    2ae2:	5f 93       	push	r21
    2ae4:	6f 93       	push	r22
    2ae6:	7f 93       	push	r23
    2ae8:	8f 93       	push	r24
    2aea:	9f 93       	push	r25
    2aec:	af 93       	push	r26
    2aee:	bf 93       	push	r27
    2af0:	ef 93       	push	r30
    2af2:	ff 93       	push	r31
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_callBackPtr != NULLPTR)
    2afc:	80 91 74 01 	lds	r24, 0x0174
    2b00:	90 91 75 01 	lds	r25, 0x0175
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	29 f0       	breq	.+10     	; 0x2b12 <__vector_5+0x40>
	{
		Timer2_callBackPtr();
    2b08:	e0 91 74 01 	lds	r30, 0x0174
    2b0c:	f0 91 75 01 	lds	r31, 0x0175
    2b10:	09 95       	icall
	}
}
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	ff 91       	pop	r31
    2b18:	ef 91       	pop	r30
    2b1a:	bf 91       	pop	r27
    2b1c:	af 91       	pop	r26
    2b1e:	9f 91       	pop	r25
    2b20:	8f 91       	pop	r24
    2b22:	7f 91       	pop	r23
    2b24:	6f 91       	pop	r22
    2b26:	5f 91       	pop	r21
    2b28:	4f 91       	pop	r20
    2b2a:	3f 91       	pop	r19
    2b2c:	2f 91       	pop	r18
    2b2e:	0f 90       	pop	r0
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	0f 90       	pop	r0
    2b34:	1f 90       	pop	r1
    2b36:	18 95       	reti

00002b38 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    2b38:	1f 92       	push	r1
    2b3a:	0f 92       	push	r0
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	0f 92       	push	r0
    2b40:	11 24       	eor	r1, r1
    2b42:	2f 93       	push	r18
    2b44:	3f 93       	push	r19
    2b46:	4f 93       	push	r20
    2b48:	5f 93       	push	r21
    2b4a:	6f 93       	push	r22
    2b4c:	7f 93       	push	r23
    2b4e:	8f 93       	push	r24
    2b50:	9f 93       	push	r25
    2b52:	af 93       	push	r26
    2b54:	bf 93       	push	r27
    2b56:	ef 93       	push	r30
    2b58:	ff 93       	push	r31
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_callBackPtr != NULLPTR)
    2b62:	80 91 74 01 	lds	r24, 0x0174
    2b66:	90 91 75 01 	lds	r25, 0x0175
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	29 f0       	breq	.+10     	; 0x2b78 <__vector_4+0x40>
	{
		Timer2_callBackPtr();
    2b6e:	e0 91 74 01 	lds	r30, 0x0174
    2b72:	f0 91 75 01 	lds	r31, 0x0175
    2b76:	09 95       	icall
	}
}
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	ff 91       	pop	r31
    2b7e:	ef 91       	pop	r30
    2b80:	bf 91       	pop	r27
    2b82:	af 91       	pop	r26
    2b84:	9f 91       	pop	r25
    2b86:	8f 91       	pop	r24
    2b88:	7f 91       	pop	r23
    2b8a:	6f 91       	pop	r22
    2b8c:	5f 91       	pop	r21
    2b8e:	4f 91       	pop	r20
    2b90:	3f 91       	pop	r19
    2b92:	2f 91       	pop	r18
    2b94:	0f 90       	pop	r0
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	0f 90       	pop	r0
    2b9a:	1f 90       	pop	r1
    2b9c:	18 95       	reti

00002b9e <WDT_ON>:


void WDT_ON(void)
{
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
	/* 2.1s time out session*/
	WDTCR = (1<<WDE) | (1 << WDP2) | (1 << WDP1) | (1 << WDP2);
    2ba6:	e1 e4       	ldi	r30, 0x41	; 65
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	8e e0       	ldi	r24, 0x0E	; 14
    2bac:	80 83       	st	Z, r24
}
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <WDT_OFF>:

void WDT_OFF(void)
{
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	68 97       	sbiw	r28, 0x18	; 24
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	cd bf       	out	0x3d, r28	; 61
	WDTCR = (1 << WDTOE) | (1 << WDE);
    2bc8:	e1 e4       	ldi	r30, 0x41	; 65
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	88 e1       	ldi	r24, 0x18	; 24
    2bce:	80 83       	st	Z, r24
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	a0 e8       	ldi	r26, 0x80	; 128
    2bd6:	b0 e4       	ldi	r27, 0x40	; 64
    2bd8:	8d 8b       	std	Y+21, r24	; 0x15
    2bda:	9e 8b       	std	Y+22, r25	; 0x16
    2bdc:	af 8b       	std	Y+23, r26	; 0x17
    2bde:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2be0:	6d 89       	ldd	r22, Y+21	; 0x15
    2be2:	7e 89       	ldd	r23, Y+22	; 0x16
    2be4:	8f 89       	ldd	r24, Y+23	; 0x17
    2be6:	98 8d       	ldd	r25, Y+24	; 0x18
    2be8:	2b ea       	ldi	r18, 0xAB	; 171
    2bea:	3a ea       	ldi	r19, 0xAA	; 170
    2bec:	4a ea       	ldi	r20, 0xAA	; 170
    2bee:	5e e3       	ldi	r21, 0x3E	; 62
    2bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	89 8b       	std	Y+17, r24	; 0x11
    2bfa:	9a 8b       	std	Y+18, r25	; 0x12
    2bfc:	ab 8b       	std	Y+19, r26	; 0x13
    2bfe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c00:	69 89       	ldd	r22, Y+17	; 0x11
    2c02:	7a 89       	ldd	r23, Y+18	; 0x12
    2c04:	8b 89       	ldd	r24, Y+19	; 0x13
    2c06:	9c 89       	ldd	r25, Y+20	; 0x14
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e8       	ldi	r20, 0x80	; 128
    2c0e:	5f e3       	ldi	r21, 0x3F	; 63
    2c10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c14:	88 23       	and	r24, r24
    2c16:	1c f4       	brge	.+6      	; 0x2c1e <WDT_OFF+0x6a>
		__ticks = 1;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	88 8b       	std	Y+16, r24	; 0x10
    2c1c:	91 c0       	rjmp	.+290    	; 0x2d40 <WDT_OFF+0x18c>
	else if (__tmp > 255)
    2c1e:	69 89       	ldd	r22, Y+17	; 0x11
    2c20:	7a 89       	ldd	r23, Y+18	; 0x12
    2c22:	8b 89       	ldd	r24, Y+19	; 0x13
    2c24:	9c 89       	ldd	r25, Y+20	; 0x14
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	53 e4       	ldi	r21, 0x43	; 67
    2c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	0c f0       	brlt	.+2      	; 0x2c38 <WDT_OFF+0x84>
    2c36:	7b c0       	rjmp	.+246    	; 0x2d2e <WDT_OFF+0x17a>
	{
		_delay_ms(__us / 1000.0);
    2c38:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	4a e7       	ldi	r20, 0x7A	; 122
    2c46:	54 e4       	ldi	r21, 0x44	; 68
    2c48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	8c 87       	std	Y+12, r24	; 0x0c
    2c52:	9d 87       	std	Y+13, r25	; 0x0d
    2c54:	ae 87       	std	Y+14, r26	; 0x0e
    2c56:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c58:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c5a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	4a e7       	ldi	r20, 0x7A	; 122
    2c66:	53 e4       	ldi	r21, 0x43	; 67
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	88 87       	std	Y+8, r24	; 0x08
    2c72:	99 87       	std	Y+9, r25	; 0x09
    2c74:	aa 87       	std	Y+10, r26	; 0x0a
    2c76:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c78:	68 85       	ldd	r22, Y+8	; 0x08
    2c7a:	79 85       	ldd	r23, Y+9	; 0x09
    2c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e8       	ldi	r20, 0x80	; 128
    2c86:	5f e3       	ldi	r21, 0x3F	; 63
    2c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8c:	88 23       	and	r24, r24
    2c8e:	2c f4       	brge	.+10     	; 0x2c9a <WDT_OFF+0xe6>
		__ticks = 1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9f 83       	std	Y+7, r25	; 0x07
    2c96:	8e 83       	std	Y+6, r24	; 0x06
    2c98:	3f c0       	rjmp	.+126    	; 0x2d18 <WDT_OFF+0x164>
	else if (__tmp > 65535)
    2c9a:	68 85       	ldd	r22, Y+8	; 0x08
    2c9c:	79 85       	ldd	r23, Y+9	; 0x09
    2c9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	4c f5       	brge	.+82     	; 0x2d04 <WDT_OFF+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e2       	ldi	r20, 0x20	; 32
    2cc0:	51 e4       	ldi	r21, 0x41	; 65
    2cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	9f 83       	std	Y+7, r25	; 0x07
    2cd8:	8e 83       	std	Y+6, r24	; 0x06
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <WDT_OFF+0x146>
    2cdc:	89 e1       	ldi	r24, 0x19	; 25
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	9d 83       	std	Y+5, r25	; 0x05
    2ce2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <WDT_OFF+0x134>
    2cec:	9d 83       	std	Y+5, r25	; 0x05
    2cee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf2:	9f 81       	ldd	r25, Y+7	; 0x07
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	9f 83       	std	Y+7, r25	; 0x07
    2cf8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <WDT_OFF+0x128>
    2d02:	24 c0       	rjmp	.+72     	; 0x2d4c <WDT_OFF+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d04:	68 85       	ldd	r22, Y+8	; 0x08
    2d06:	79 85       	ldd	r23, Y+9	; 0x09
    2d08:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9f 83       	std	Y+7, r25	; 0x07
    2d16:	8e 83       	std	Y+6, r24	; 0x06
    2d18:	8e 81       	ldd	r24, Y+6	; 0x06
    2d1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d1c:	9b 83       	std	Y+3, r25	; 0x03
    2d1e:	8a 83       	std	Y+2, r24	; 0x02
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	9b 81       	ldd	r25, Y+3	; 0x03
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <WDT_OFF+0x170>
    2d28:	9b 83       	std	Y+3, r25	; 0x03
    2d2a:	8a 83       	std	Y+2, r24	; 0x02
    2d2c:	0f c0       	rjmp	.+30     	; 0x2d4c <WDT_OFF+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d2e:	69 89       	ldd	r22, Y+17	; 0x11
    2d30:	7a 89       	ldd	r23, Y+18	; 0x12
    2d32:	8b 89       	ldd	r24, Y+19	; 0x13
    2d34:	9c 89       	ldd	r25, Y+20	; 0x14
    2d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	88 8b       	std	Y+16, r24	; 0x10
    2d40:	88 89       	ldd	r24, Y+16	; 0x10
    2d42:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	8a 95       	dec	r24
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <WDT_OFF+0x192>
    2d4a:	89 83       	std	Y+1, r24	; 0x01
	/* wait to clear WDE */
	_delay_us(4);
	WDTCR = 0;
    2d4c:	e1 e4       	ldi	r30, 0x41	; 65
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	10 82       	st	Z, r1
    2d52:	68 96       	adiw	r28, 0x18	; 24
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <main>:
volatile uint8 count = 0;
volatile uint8 air_condition = 0;
volatile uint8 AC_ON=0,force_AC_ON=0,set_temp=0;

int main(void)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	6e 97       	sbiw	r28, 0x1e	; 30
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    DIO_Init();
    2d78:	0e 94 02 09 	call	0x1204	; 0x1204 <DIO_Init>
	ADC_Init(0);
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_Init>
	ADC_Init(1);
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_Init>
	SPI_init_as_slave(false);
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <SPI_init_as_slave>
	Servo_Init();
    2d90:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <Servo_Init>
	sei();
    2d94:	78 94       	sei
	Timer0_Init(Timer0_CTC_Mode, Timer_Scaler_1024, OCO_Disconnected);
    2d96:	82 e0       	ldi	r24, 0x02	; 2
    2d98:	65 e0       	ldi	r22, 0x05	; 5
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <Timer0_Init>
	OCR0 = 78;
    2da0:	ec e5       	ldi	r30, 0x5C	; 92
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	8e e4       	ldi	r24, 0x4E	; 78
    2da6:	80 83       	st	Z, r24
	SetCallBack_Timer0_OC0(Timer_ISR_Func);
    2da8:	87 e8       	ldi	r24, 0x87	; 135
    2daa:	98 e1       	ldi	r25, 0x18	; 24
    2dac:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <SetCallBack_Timer0_OC0>
	Timer0_OC_InterruptEnable();
    2db0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Timer0_OC_InterruptEnable>
    while (1)
    {

		if ((set_temp==1)&&(r_data!=SET_TEMPERATURE))
    2db4:	80 91 80 01 	lds	r24, 0x0180
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	61 f4       	brne	.+24     	; 0x2dd4 <main+0x70>
    2dbc:	80 91 68 01 	lds	r24, 0x0168
    2dc0:	8d 30       	cpi	r24, 0x0D	; 13
    2dc2:	41 f0       	breq	.+16     	; 0x2dd4 <main+0x70>
		{
			desired_temp = r_data;
    2dc4:	80 91 68 01 	lds	r24, 0x0168
    2dc8:	88 2f       	mov	r24, r24
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	90 93 77 01 	sts	0x0177, r25
    2dd0:	80 93 76 01 	sts	0x0176, r24
		}
		switch(r_data)
    2dd4:	80 91 68 01 	lds	r24, 0x0168
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	3e 8f       	std	Y+30, r19	; 0x1e
    2dde:	2d 8f       	std	Y+29, r18	; 0x1d
    2de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2de2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2de4:	87 30       	cpi	r24, 0x07	; 7
    2de6:	91 05       	cpc	r25, r1
    2de8:	09 f4       	brne	.+2      	; 0x2dec <main+0x88>
    2dea:	71 c0       	rjmp	.+226    	; 0x2ece <main+0x16a>
    2dec:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2dee:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2df0:	28 30       	cpi	r18, 0x08	; 8
    2df2:	31 05       	cpc	r19, r1
    2df4:	2c f5       	brge	.+74     	; 0x2e40 <main+0xdc>
    2df6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2df8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dfa:	83 30       	cpi	r24, 0x03	; 3
    2dfc:	91 05       	cpc	r25, r1
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <main+0x9e>
    2e00:	52 c0       	rjmp	.+164    	; 0x2ea6 <main+0x142>
    2e02:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e04:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e06:	24 30       	cpi	r18, 0x04	; 4
    2e08:	31 05       	cpc	r19, r1
    2e0a:	6c f4       	brge	.+26     	; 0x2e26 <main+0xc2>
    2e0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e10:	81 30       	cpi	r24, 0x01	; 1
    2e12:	91 05       	cpc	r25, r1
    2e14:	09 f4       	brne	.+2      	; 0x2e18 <main+0xb4>
    2e16:	3d c0       	rjmp	.+122    	; 0x2e92 <main+0x12e>
    2e18:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e1a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e1c:	22 30       	cpi	r18, 0x02	; 2
    2e1e:	31 05       	cpc	r19, r1
    2e20:	09 f4       	brne	.+2      	; 0x2e24 <main+0xc0>
    2e22:	3c c0       	rjmp	.+120    	; 0x2e9c <main+0x138>
    2e24:	c7 cf       	rjmp	.-114    	; 0x2db4 <main+0x50>
    2e26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e2a:	85 30       	cpi	r24, 0x05	; 5
    2e2c:	91 05       	cpc	r25, r1
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <main+0xce>
    2e30:	44 c0       	rjmp	.+136    	; 0x2eba <main+0x156>
    2e32:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e34:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e36:	26 30       	cpi	r18, 0x06	; 6
    2e38:	31 05       	cpc	r19, r1
    2e3a:	0c f0       	brlt	.+2      	; 0x2e3e <main+0xda>
    2e3c:	43 c0       	rjmp	.+134    	; 0x2ec4 <main+0x160>
    2e3e:	38 c0       	rjmp	.+112    	; 0x2eb0 <main+0x14c>
    2e40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e44:	8a 30       	cpi	r24, 0x0A	; 10
    2e46:	91 05       	cpc	r25, r1
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <main+0xe8>
    2e4a:	53 c0       	rjmp	.+166    	; 0x2ef2 <main+0x18e>
    2e4c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e4e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e50:	2b 30       	cpi	r18, 0x0B	; 11
    2e52:	31 05       	cpc	r19, r1
    2e54:	5c f4       	brge	.+22     	; 0x2e6c <main+0x108>
    2e56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e5a:	88 30       	cpi	r24, 0x08	; 8
    2e5c:	91 05       	cpc	r25, r1
    2e5e:	e1 f1       	breq	.+120    	; 0x2ed8 <main+0x174>
    2e60:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e62:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e64:	29 30       	cpi	r18, 0x09	; 9
    2e66:	31 05       	cpc	r19, r1
    2e68:	e1 f1       	breq	.+120    	; 0x2ee2 <main+0x17e>
    2e6a:	a4 cf       	rjmp	.-184    	; 0x2db4 <main+0x50>
    2e6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e70:	8c 30       	cpi	r24, 0x0C	; 12
    2e72:	91 05       	cpc	r25, r1
    2e74:	09 f4       	brne	.+2      	; 0x2e78 <main+0x114>
    2e76:	c2 c0       	rjmp	.+388    	; 0x2ffc <main+0x298>
    2e78:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e7a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e7c:	2c 30       	cpi	r18, 0x0C	; 12
    2e7e:	31 05       	cpc	r19, r1
    2e80:	0c f4       	brge	.+2      	; 0x2e84 <main+0x120>
    2e82:	40 c0       	rjmp	.+128    	; 0x2f04 <main+0x1a0>
    2e84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e88:	8d 30       	cpi	r24, 0x0D	; 13
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <main+0x12c>
    2e8e:	36 c1       	rjmp	.+620    	; 0x30fc <main+0x398>
    2e90:	91 cf       	rjmp	.-222    	; 0x2db4 <main+0x50>
		{
			case LIVING_ROOM_ON:
				LED_On(PORTC_, 1);
    2e92:	82 e0       	ldi	r24, 0x02	; 2
    2e94:	61 e0       	ldi	r22, 0x01	; 1
    2e96:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LED_On>
    2e9a:	8c cf       	rjmp	.-232    	; 0x2db4 <main+0x50>
				break;
			case LIVING_ROOM_OFF:
				LED_Off(PORTC_, 1);
    2e9c:	82 e0       	ldi	r24, 0x02	; 2
    2e9e:	61 e0       	ldi	r22, 0x01	; 1
    2ea0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LED_Off>
    2ea4:	87 cf       	rjmp	.-242    	; 0x2db4 <main+0x50>
				break;
			case TV_ON:
				LED_On(PORTC_, 2);
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	62 e0       	ldi	r22, 0x02	; 2
    2eaa:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LED_On>
    2eae:	82 cf       	rjmp	.-252    	; 0x2db4 <main+0x50>
				break;
			case TV_OFF:
				LED_Off(PORTC_, 2);
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	62 e0       	ldi	r22, 0x02	; 2
    2eb4:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LED_Off>
    2eb8:	7d cf       	rjmp	.-262    	; 0x2db4 <main+0x50>
				break;
			case BED_ROOM_ON:
				LED_On(PORTC_, 3);
    2eba:	82 e0       	ldi	r24, 0x02	; 2
    2ebc:	63 e0       	ldi	r22, 0x03	; 3
    2ebe:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LED_On>
    2ec2:	78 cf       	rjmp	.-272    	; 0x2db4 <main+0x50>
				break;
			case BED_ROOM_OFF:
				LED_Off(PORTC_, 3);
    2ec4:	82 e0       	ldi	r24, 0x02	; 2
    2ec6:	63 e0       	ldi	r22, 0x03	; 3
    2ec8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LED_Off>
    2ecc:	73 cf       	rjmp	.-282    	; 0x2db4 <main+0x50>
				break;
			case KIDS_ROOM_ON:
				LED_On(PORTC_, 4);
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	64 e0       	ldi	r22, 0x04	; 4
    2ed2:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LED_On>
    2ed6:	6e cf       	rjmp	.-292    	; 0x2db4 <main+0x50>
				break;
			case KIDS_ROOM_OFF:
				LED_Off(PORTC_, 4);
    2ed8:	82 e0       	ldi	r24, 0x02	; 2
    2eda:	64 e0       	ldi	r22, 0x04	; 4
    2edc:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LED_Off>
    2ee0:	69 cf       	rjmp	.-302    	; 0x2db4 <main+0x50>
				break;
			case AIR_COND_ON:
				LED_On(PORTC_, 0);
    2ee2:	82 e0       	ldi	r24, 0x02	; 2
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LED_On>
				force_AC_ON=1;
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	80 93 7f 01 	sts	0x017F, r24
    2ef0:	61 cf       	rjmp	.-318    	; 0x2db4 <main+0x50>
				break;
			case AIR_COND_OFF:
				AC_ON=0;
    2ef2:	10 92 7e 01 	sts	0x017E, r1
				force_AC_ON=0;
    2ef6:	10 92 7f 01 	sts	0x017F, r1
				LED_Off(PORTC_, 0);
    2efa:	82 e0       	ldi	r24, 0x02	; 2
    2efc:	60 e0       	ldi	r22, 0x00	; 0
    2efe:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LED_Off>
    2f02:	58 cf       	rjmp	.-336    	; 0x2db4 <main+0x50>
				break;
			case RIGHT_PASSWARD:
				Servo_SetAngle(90);
    2f04:	8a e5       	ldi	r24, 0x5A	; 90
    2f06:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Servo_SetAngle>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	aa e7       	ldi	r26, 0x7A	; 122
    2f10:	b4 e4       	ldi	r27, 0x44	; 68
    2f12:	89 8f       	std	Y+25, r24	; 0x19
    2f14:	9a 8f       	std	Y+26, r25	; 0x1a
    2f16:	ab 8f       	std	Y+27, r26	; 0x1b
    2f18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a e7       	ldi	r20, 0x7A	; 122
    2f28:	53 e4       	ldi	r21, 0x43	; 67
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	8d 8b       	std	Y+21, r24	; 0x15
    2f34:	9e 8b       	std	Y+22, r25	; 0x16
    2f36:	af 8b       	std	Y+23, r26	; 0x17
    2f38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f40:	98 8d       	ldd	r25, Y+24	; 0x18
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e8       	ldi	r20, 0x80	; 128
    2f48:	5f e3       	ldi	r21, 0x3F	; 63
    2f4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f4e:	88 23       	and	r24, r24
    2f50:	2c f4       	brge	.+10     	; 0x2f5c <main+0x1f8>
		__ticks = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	9c 8b       	std	Y+20, r25	; 0x14
    2f58:	8b 8b       	std	Y+19, r24	; 0x13
    2f5a:	3f c0       	rjmp	.+126    	; 0x2fda <main+0x276>
	else if (__tmp > 65535)
    2f5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f60:	8f 89       	ldd	r24, Y+23	; 0x17
    2f62:	98 8d       	ldd	r25, Y+24	; 0x18
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	3f ef       	ldi	r19, 0xFF	; 255
    2f68:	4f e7       	ldi	r20, 0x7F	; 127
    2f6a:	57 e4       	ldi	r21, 0x47	; 71
    2f6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f70:	18 16       	cp	r1, r24
    2f72:	4c f5       	brge	.+82     	; 0x2fc6 <main+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f74:	69 8d       	ldd	r22, Y+25	; 0x19
    2f76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e2       	ldi	r20, 0x20	; 32
    2f82:	51 e4       	ldi	r21, 0x41	; 65
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	9c 8b       	std	Y+20, r25	; 0x14
    2f9a:	8b 8b       	std	Y+19, r24	; 0x13
    2f9c:	0f c0       	rjmp	.+30     	; 0x2fbc <main+0x258>
    2f9e:	89 e1       	ldi	r24, 0x19	; 25
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	9a 8b       	std	Y+18, r25	; 0x12
    2fa4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fa6:	89 89       	ldd	r24, Y+17	; 0x11
    2fa8:	9a 89       	ldd	r25, Y+18	; 0x12
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <main+0x246>
    2fae:	9a 8b       	std	Y+18, r25	; 0x12
    2fb0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	9c 8b       	std	Y+20, r25	; 0x14
    2fba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	69 f7       	brne	.-38     	; 0x2f9e <main+0x23a>
    2fc4:	14 c0       	rjmp	.+40     	; 0x2fee <main+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2fca:	8f 89       	ldd	r24, Y+23	; 0x17
    2fcc:	98 8d       	ldd	r25, Y+24	; 0x18
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9c 8b       	std	Y+20, r25	; 0x14
    2fd8:	8b 8b       	std	Y+19, r24	; 0x13
    2fda:	8b 89       	ldd	r24, Y+19	; 0x13
    2fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fde:	98 8b       	std	Y+16, r25	; 0x10
    2fe0:	8f 87       	std	Y+15, r24	; 0x0f
    2fe2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fe4:	98 89       	ldd	r25, Y+16	; 0x10
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <main+0x282>
    2fea:	98 8b       	std	Y+16, r25	; 0x10
    2fec:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(DOOR_DELAY);
				Servo_SetAngle(0);
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Servo_SetAngle>
				r_data = -1;
    2ff4:	8f ef       	ldi	r24, 0xFF	; 255
    2ff6:	80 93 68 01 	sts	0x0168, r24
    2ffa:	dc ce       	rjmp	.-584    	; 0x2db4 <main+0x50>
				break;
			case WRONG_FOR_3TIMES:
				DIO_SetPinValue(PORTD_, 0, HIGH);
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	41 e0       	ldi	r20, 0x01	; 1
    3002:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	aa e7       	ldi	r26, 0x7A	; 122
    300c:	b4 e4       	ldi	r27, 0x44	; 68
    300e:	8b 87       	std	Y+11, r24	; 0x0b
    3010:	9c 87       	std	Y+12, r25	; 0x0c
    3012:	ad 87       	std	Y+13, r26	; 0x0d
    3014:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3016:	6b 85       	ldd	r22, Y+11	; 0x0b
    3018:	7c 85       	ldd	r23, Y+12	; 0x0c
    301a:	8d 85       	ldd	r24, Y+13	; 0x0d
    301c:	9e 85       	ldd	r25, Y+14	; 0x0e
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	4a e7       	ldi	r20, 0x7A	; 122
    3024:	53 e4       	ldi	r21, 0x43	; 67
    3026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	8f 83       	std	Y+7, r24	; 0x07
    3030:	98 87       	std	Y+8, r25	; 0x08
    3032:	a9 87       	std	Y+9, r26	; 0x09
    3034:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3036:	6f 81       	ldd	r22, Y+7	; 0x07
    3038:	78 85       	ldd	r23, Y+8	; 0x08
    303a:	89 85       	ldd	r24, Y+9	; 0x09
    303c:	9a 85       	ldd	r25, Y+10	; 0x0a
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e8       	ldi	r20, 0x80	; 128
    3044:	5f e3       	ldi	r21, 0x3F	; 63
    3046:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    304a:	88 23       	and	r24, r24
    304c:	2c f4       	brge	.+10     	; 0x3058 <main+0x2f4>
		__ticks = 1;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	9e 83       	std	Y+6, r25	; 0x06
    3054:	8d 83       	std	Y+5, r24	; 0x05
    3056:	3f c0       	rjmp	.+126    	; 0x30d6 <main+0x372>
	else if (__tmp > 65535)
    3058:	6f 81       	ldd	r22, Y+7	; 0x07
    305a:	78 85       	ldd	r23, Y+8	; 0x08
    305c:	89 85       	ldd	r24, Y+9	; 0x09
    305e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	3f ef       	ldi	r19, 0xFF	; 255
    3064:	4f e7       	ldi	r20, 0x7F	; 127
    3066:	57 e4       	ldi	r21, 0x47	; 71
    3068:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    306c:	18 16       	cp	r1, r24
    306e:	4c f5       	brge	.+82     	; 0x30c2 <main+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3070:	6b 85       	ldd	r22, Y+11	; 0x0b
    3072:	7c 85       	ldd	r23, Y+12	; 0x0c
    3074:	8d 85       	ldd	r24, Y+13	; 0x0d
    3076:	9e 85       	ldd	r25, Y+14	; 0x0e
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e2       	ldi	r20, 0x20	; 32
    307e:	51 e4       	ldi	r21, 0x41	; 65
    3080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	9e 83       	std	Y+6, r25	; 0x06
    3096:	8d 83       	std	Y+5, r24	; 0x05
    3098:	0f c0       	rjmp	.+30     	; 0x30b8 <main+0x354>
    309a:	89 e1       	ldi	r24, 0x19	; 25
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	9c 83       	std	Y+4, r25	; 0x04
    30a0:	8b 83       	std	Y+3, r24	; 0x03
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	9c 81       	ldd	r25, Y+4	; 0x04
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <main+0x342>
    30aa:	9c 83       	std	Y+4, r25	; 0x04
    30ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ae:	8d 81       	ldd	r24, Y+5	; 0x05
    30b0:	9e 81       	ldd	r25, Y+6	; 0x06
    30b2:	01 97       	sbiw	r24, 0x01	; 1
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ba:	9e 81       	ldd	r25, Y+6	; 0x06
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	69 f7       	brne	.-38     	; 0x309a <main+0x336>
    30c0:	14 c0       	rjmp	.+40     	; 0x30ea <main+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c2:	6f 81       	ldd	r22, Y+7	; 0x07
    30c4:	78 85       	ldd	r23, Y+8	; 0x08
    30c6:	89 85       	ldd	r24, Y+9	; 0x09
    30c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9e 83       	std	Y+6, r25	; 0x06
    30d4:	8d 83       	std	Y+5, r24	; 0x05
    30d6:	8d 81       	ldd	r24, Y+5	; 0x05
    30d8:	9e 81       	ldd	r25, Y+6	; 0x06
    30da:	9a 83       	std	Y+2, r25	; 0x02
    30dc:	89 83       	std	Y+1, r24	; 0x01
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	9a 81       	ldd	r25, Y+2	; 0x02
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <main+0x37e>
    30e6:	9a 83       	std	Y+2, r25	; 0x02
    30e8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				DIO_SetPinValue(PORTD_, 0, LOW);
    30ea:	83 e0       	ldi	r24, 0x03	; 3
    30ec:	60 e0       	ldi	r22, 0x00	; 0
    30ee:	40 e0       	ldi	r20, 0x00	; 0
    30f0:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
				r_data = -1;
    30f4:	8f ef       	ldi	r24, 0xFF	; 255
    30f6:	80 93 68 01 	sts	0x0168, r24
    30fa:	5c ce       	rjmp	.-840    	; 0x2db4 <main+0x50>
				break;
			case SET_TEMPERATURE:
				force_AC_ON=0;
    30fc:	10 92 7f 01 	sts	0x017F, r1
				set_temp=1;
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	80 93 80 01 	sts	0x0180, r24
				AC_ON=1;
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	80 93 7e 01 	sts	0x017E, r24
    310c:	53 ce       	rjmp	.-858    	; 0x2db4 <main+0x50>

0000310e <Timer_ISR_Func>:
		}
    }
}

void Timer_ISR_Func(void)
{
    310e:	df 93       	push	r29
    3110:	cf 93       	push	r28
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	2e 97       	sbiw	r28, 0x0e	; 14
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	f8 94       	cli
    311c:	de bf       	out	0x3e, r29	; 62
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	cd bf       	out	0x3d, r28	; 61
	count++;
    3122:	80 91 7c 01 	lds	r24, 0x017C
    3126:	8f 5f       	subi	r24, 0xFF	; 255
    3128:	80 93 7c 01 	sts	0x017C, r24
	if (count >= 10)
    312c:	80 91 7c 01 	lds	r24, 0x017C
    3130:	8a 30       	cpi	r24, 0x0A	; 10
    3132:	08 f4       	brcc	.+2      	; 0x3136 <Timer_ISR_Func+0x28>
    3134:	eb c0       	rjmp	.+470    	; 0x330c <Timer_ISR_Func+0x1fe>
	{
		temp_sensor = ADC_GetTemp(0);
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	0e 94 d6 08 	call	0x11ac	; 0x11ac <ADC_GetTemp>
    313c:	90 93 79 01 	sts	0x0179, r25
    3140:	80 93 78 01 	sts	0x0178, r24
		flame_sensor = ADC_FlameState(1);
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <ADC_FlameState>
    314a:	88 2f       	mov	r24, r24
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	90 93 7b 01 	sts	0x017B, r25
    3152:	80 93 7a 01 	sts	0x017A, r24
		if(flame_sensor == 1)
    3156:	80 91 7a 01 	lds	r24, 0x017A
    315a:	90 91 7b 01 	lds	r25, 0x017B
    315e:	81 30       	cpi	r24, 0x01	; 1
    3160:	91 05       	cpc	r25, r1
    3162:	09 f0       	breq	.+2      	; 0x3166 <Timer_ISR_Func+0x58>
    3164:	80 c0       	rjmp	.+256    	; 0x3266 <Timer_ISR_Func+0x158>
		{
			DIO_SetPinValue(PORTD_, 0, HIGH);
    3166:	83 e0       	ldi	r24, 0x03	; 3
    3168:	60 e0       	ldi	r22, 0x00	; 0
    316a:	41 e0       	ldi	r20, 0x01	; 1
    316c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	aa e7       	ldi	r26, 0x7A	; 122
    3176:	b4 e4       	ldi	r27, 0x44	; 68
    3178:	8b 87       	std	Y+11, r24	; 0x0b
    317a:	9c 87       	std	Y+12, r25	; 0x0c
    317c:	ad 87       	std	Y+13, r26	; 0x0d
    317e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3180:	6b 85       	ldd	r22, Y+11	; 0x0b
    3182:	7c 85       	ldd	r23, Y+12	; 0x0c
    3184:	8d 85       	ldd	r24, Y+13	; 0x0d
    3186:	9e 85       	ldd	r25, Y+14	; 0x0e
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	4a e7       	ldi	r20, 0x7A	; 122
    318e:	53 e4       	ldi	r21, 0x43	; 67
    3190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	8f 83       	std	Y+7, r24	; 0x07
    319a:	98 87       	std	Y+8, r25	; 0x08
    319c:	a9 87       	std	Y+9, r26	; 0x09
    319e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31a0:	6f 81       	ldd	r22, Y+7	; 0x07
    31a2:	78 85       	ldd	r23, Y+8	; 0x08
    31a4:	89 85       	ldd	r24, Y+9	; 0x09
    31a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	40 e8       	ldi	r20, 0x80	; 128
    31ae:	5f e3       	ldi	r21, 0x3F	; 63
    31b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b4:	88 23       	and	r24, r24
    31b6:	2c f4       	brge	.+10     	; 0x31c2 <Timer_ISR_Func+0xb4>
		__ticks = 1;
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	8d 83       	std	Y+5, r24	; 0x05
    31c0:	3f c0       	rjmp	.+126    	; 0x3240 <Timer_ISR_Func+0x132>
	else if (__tmp > 65535)
    31c2:	6f 81       	ldd	r22, Y+7	; 0x07
    31c4:	78 85       	ldd	r23, Y+8	; 0x08
    31c6:	89 85       	ldd	r24, Y+9	; 0x09
    31c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	3f ef       	ldi	r19, 0xFF	; 255
    31ce:	4f e7       	ldi	r20, 0x7F	; 127
    31d0:	57 e4       	ldi	r21, 0x47	; 71
    31d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d6:	18 16       	cp	r1, r24
    31d8:	4c f5       	brge	.+82     	; 0x322c <Timer_ISR_Func+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31da:	6b 85       	ldd	r22, Y+11	; 0x0b
    31dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    31de:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	40 e2       	ldi	r20, 0x20	; 32
    31e8:	51 e4       	ldi	r21, 0x41	; 65
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	bc 01       	movw	r22, r24
    31f4:	cd 01       	movw	r24, r26
    31f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	9e 83       	std	Y+6, r25	; 0x06
    3200:	8d 83       	std	Y+5, r24	; 0x05
    3202:	0f c0       	rjmp	.+30     	; 0x3222 <Timer_ISR_Func+0x114>
    3204:	89 e1       	ldi	r24, 0x19	; 25
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	9c 83       	std	Y+4, r25	; 0x04
    320a:	8b 83       	std	Y+3, r24	; 0x03
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	9c 81       	ldd	r25, Y+4	; 0x04
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	f1 f7       	brne	.-4      	; 0x3210 <Timer_ISR_Func+0x102>
    3214:	9c 83       	std	Y+4, r25	; 0x04
    3216:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3218:	8d 81       	ldd	r24, Y+5	; 0x05
    321a:	9e 81       	ldd	r25, Y+6	; 0x06
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	9e 83       	std	Y+6, r25	; 0x06
    3220:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3222:	8d 81       	ldd	r24, Y+5	; 0x05
    3224:	9e 81       	ldd	r25, Y+6	; 0x06
    3226:	00 97       	sbiw	r24, 0x00	; 0
    3228:	69 f7       	brne	.-38     	; 0x3204 <Timer_ISR_Func+0xf6>
    322a:	14 c0       	rjmp	.+40     	; 0x3254 <Timer_ISR_Func+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322c:	6f 81       	ldd	r22, Y+7	; 0x07
    322e:	78 85       	ldd	r23, Y+8	; 0x08
    3230:	89 85       	ldd	r24, Y+9	; 0x09
    3232:	9a 85       	ldd	r25, Y+10	; 0x0a
    3234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	9e 83       	std	Y+6, r25	; 0x06
    323e:	8d 83       	std	Y+5, r24	; 0x05
    3240:	8d 81       	ldd	r24, Y+5	; 0x05
    3242:	9e 81       	ldd	r25, Y+6	; 0x06
    3244:	9a 83       	std	Y+2, r25	; 0x02
    3246:	89 83       	std	Y+1, r24	; 0x01
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	9a 81       	ldd	r25, Y+2	; 0x02
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	f1 f7       	brne	.-4      	; 0x324c <Timer_ISR_Func+0x13e>
    3250:	9a 83       	std	Y+2, r25	; 0x02
    3252:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			DIO_SetPinValue(PORTD_, 0, LOW);
    3254:	83 e0       	ldi	r24, 0x03	; 3
    3256:	60 e0       	ldi	r22, 0x00	; 0
    3258:	40 e0       	ldi	r20, 0x00	; 0
    325a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <DIO_SetPinValue>
			flame_sensor = 0;
    325e:	10 92 7b 01 	sts	0x017B, r1
    3262:	10 92 7a 01 	sts	0x017A, r1
		}
		if ((temp_sensor >= desired_temp+1)&&(AC_ON==1))
    3266:	80 91 76 01 	lds	r24, 0x0176
    326a:	90 91 77 01 	lds	r25, 0x0177
    326e:	9c 01       	movw	r18, r24
    3270:	2f 5f       	subi	r18, 0xFF	; 255
    3272:	3f 4f       	sbci	r19, 0xFF	; 255
    3274:	80 91 78 01 	lds	r24, 0x0178
    3278:	90 91 79 01 	lds	r25, 0x0179
    327c:	82 17       	cp	r24, r18
    327e:	93 07       	cpc	r25, r19
    3280:	60 f0       	brcs	.+24     	; 0x329a <Timer_ISR_Func+0x18c>
    3282:	80 91 7e 01 	lds	r24, 0x017E
    3286:	81 30       	cpi	r24, 0x01	; 1
    3288:	41 f4       	brne	.+16     	; 0x329a <Timer_ISR_Func+0x18c>
		{
			LED_On(PORTC_, 0);
    328a:	82 e0       	ldi	r24, 0x02	; 2
    328c:	60 e0       	ldi	r22, 0x00	; 0
    328e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LED_On>
			air_condition = 1;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	80 93 7d 01 	sts	0x017D, r24
    3298:	39 c0       	rjmp	.+114    	; 0x330c <Timer_ISR_Func+0x1fe>
		}
		else if ((temp_sensor <= desired_temp-1)&&(force_AC_ON==0))
    329a:	80 91 76 01 	lds	r24, 0x0176
    329e:	90 91 77 01 	lds	r25, 0x0177
    32a2:	9c 01       	movw	r18, r24
    32a4:	21 50       	subi	r18, 0x01	; 1
    32a6:	30 40       	sbci	r19, 0x00	; 0
    32a8:	80 91 78 01 	lds	r24, 0x0178
    32ac:	90 91 79 01 	lds	r25, 0x0179
    32b0:	28 17       	cp	r18, r24
    32b2:	39 07       	cpc	r19, r25
    32b4:	58 f0       	brcs	.+22     	; 0x32cc <Timer_ISR_Func+0x1be>
    32b6:	80 91 7f 01 	lds	r24, 0x017F
    32ba:	88 23       	and	r24, r24
    32bc:	39 f4       	brne	.+14     	; 0x32cc <Timer_ISR_Func+0x1be>
		{
			LED_Off(PORTC_, 0);
    32be:	82 e0       	ldi	r24, 0x02	; 2
    32c0:	60 e0       	ldi	r22, 0x00	; 0
    32c2:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LED_Off>
			air_condition = 0;
    32c6:	10 92 7d 01 	sts	0x017D, r1
    32ca:	20 c0       	rjmp	.+64     	; 0x330c <Timer_ISR_Func+0x1fe>
		}
		else if ((temp_sensor == desired_temp)&&(AC_ON==1))
    32cc:	20 91 78 01 	lds	r18, 0x0178
    32d0:	30 91 79 01 	lds	r19, 0x0179
    32d4:	80 91 76 01 	lds	r24, 0x0176
    32d8:	90 91 77 01 	lds	r25, 0x0177
    32dc:	28 17       	cp	r18, r24
    32de:	39 07       	cpc	r19, r25
    32e0:	a9 f4       	brne	.+42     	; 0x330c <Timer_ISR_Func+0x1fe>
    32e2:	80 91 7e 01 	lds	r24, 0x017E
    32e6:	81 30       	cpi	r24, 0x01	; 1
    32e8:	89 f4       	brne	.+34     	; 0x330c <Timer_ISR_Func+0x1fe>
		{
			if (air_condition == 1)
    32ea:	80 91 7d 01 	lds	r24, 0x017D
    32ee:	81 30       	cpi	r24, 0x01	; 1
    32f0:	29 f4       	brne	.+10     	; 0x32fc <Timer_ISR_Func+0x1ee>
			{
				LED_On(PORTC_, 0);
    32f2:	82 e0       	ldi	r24, 0x02	; 2
    32f4:	60 e0       	ldi	r22, 0x00	; 0
    32f6:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LED_On>
    32fa:	08 c0       	rjmp	.+16     	; 0x330c <Timer_ISR_Func+0x1fe>
			}
			else if (air_condition == 0)
    32fc:	80 91 7d 01 	lds	r24, 0x017D
    3300:	88 23       	and	r24, r24
    3302:	21 f4       	brne	.+8      	; 0x330c <Timer_ISR_Func+0x1fe>
			{
				LED_Off(PORTC_, 0);
    3304:	82 e0       	ldi	r24, 0x02	; 2
    3306:	60 e0       	ldi	r22, 0x00	; 0
    3308:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LED_Off>
			}
		}
	}
}
    330c:	2e 96       	adiw	r28, 0x0e	; 14
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	cf 91       	pop	r28
    331a:	df 91       	pop	r29
    331c:	08 95       	ret

0000331e <__vector_12>:

ISR(SPI_STC_vect)
{
    331e:	1f 92       	push	r1
    3320:	0f 92       	push	r0
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	0f 92       	push	r0
    3326:	11 24       	eor	r1, r1
    3328:	2f 93       	push	r18
    332a:	3f 93       	push	r19
    332c:	4f 93       	push	r20
    332e:	5f 93       	push	r21
    3330:	6f 93       	push	r22
    3332:	7f 93       	push	r23
    3334:	8f 93       	push	r24
    3336:	9f 93       	push	r25
    3338:	af 93       	push	r26
    333a:	bf 93       	push	r27
    333c:	ef 93       	push	r30
    333e:	ff 93       	push	r31
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
	r_data= SPI_recieve_char_ISR();
    3348:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <SPI_recieve_char_ISR>
    334c:	80 93 68 01 	sts	0x0168, r24
}
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	ff 91       	pop	r31
    3356:	ef 91       	pop	r30
    3358:	bf 91       	pop	r27
    335a:	af 91       	pop	r26
    335c:	9f 91       	pop	r25
    335e:	8f 91       	pop	r24
    3360:	7f 91       	pop	r23
    3362:	6f 91       	pop	r22
    3364:	5f 91       	pop	r21
    3366:	4f 91       	pop	r20
    3368:	3f 91       	pop	r19
    336a:	2f 91       	pop	r18
    336c:	0f 90       	pop	r0
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	0f 90       	pop	r0
    3372:	1f 90       	pop	r1
    3374:	18 95       	reti

00003376 <__prologue_saves__>:
    3376:	2f 92       	push	r2
    3378:	3f 92       	push	r3
    337a:	4f 92       	push	r4
    337c:	5f 92       	push	r5
    337e:	6f 92       	push	r6
    3380:	7f 92       	push	r7
    3382:	8f 92       	push	r8
    3384:	9f 92       	push	r9
    3386:	af 92       	push	r10
    3388:	bf 92       	push	r11
    338a:	cf 92       	push	r12
    338c:	df 92       	push	r13
    338e:	ef 92       	push	r14
    3390:	ff 92       	push	r15
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    3396:	cf 93       	push	r28
    3398:	df 93       	push	r29
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	ca 1b       	sub	r28, r26
    33a0:	db 0b       	sbc	r29, r27
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	f8 94       	cli
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	cd bf       	out	0x3d, r28	; 61
    33ac:	09 94       	ijmp

000033ae <__epilogue_restores__>:
    33ae:	2a 88       	ldd	r2, Y+18	; 0x12
    33b0:	39 88       	ldd	r3, Y+17	; 0x11
    33b2:	48 88       	ldd	r4, Y+16	; 0x10
    33b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    33b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    33b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    33ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    33bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    33be:	aa 84       	ldd	r10, Y+10	; 0x0a
    33c0:	b9 84       	ldd	r11, Y+9	; 0x09
    33c2:	c8 84       	ldd	r12, Y+8	; 0x08
    33c4:	df 80       	ldd	r13, Y+7	; 0x07
    33c6:	ee 80       	ldd	r14, Y+6	; 0x06
    33c8:	fd 80       	ldd	r15, Y+5	; 0x05
    33ca:	0c 81       	ldd	r16, Y+4	; 0x04
    33cc:	1b 81       	ldd	r17, Y+3	; 0x03
    33ce:	aa 81       	ldd	r26, Y+2	; 0x02
    33d0:	b9 81       	ldd	r27, Y+1	; 0x01
    33d2:	ce 0f       	add	r28, r30
    33d4:	d1 1d       	adc	r29, r1
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	ed 01       	movw	r28, r26
    33e2:	08 95       	ret

000033e4 <_exit>:
    33e4:	f8 94       	cli

000033e6 <__stop_program>:
    33e6:	ff cf       	rjmp	.-2      	; 0x33e6 <__stop_program>


slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000f98  0000102c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800062  00800062  0000102e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ab2  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b3  00000000  00000000  00002e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000132a  00000000  00000000  000035b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000768  00000000  00000000  000048e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c2c  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000113d  00000000  00000000  00005c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  00006db5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__vector_4>
  14:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_5>
  18:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__vector_6>
  1c:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_7>
  20:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__vector_8>
  24:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__vector_9>
  28:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_10>
  2c:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_11>
  30:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_12>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	86 02       	muls	r24, r22
  56:	8b 02       	muls	r24, r27
  58:	90 02       	muls	r25, r16
  5a:	95 02       	muls	r25, r21
  5c:	9a 02       	muls	r25, r26
  5e:	9f 02       	muls	r25, r31
  60:	a4 02       	muls	r26, r20
  62:	a9 02       	muls	r26, r25
  64:	ae 02       	muls	r26, r30
  66:	b5 02       	muls	r27, r21
  68:	be 02       	muls	r27, r30
  6a:	d0 02       	muls	r29, r16
  6c:	e6 02       	muls	r30, r22
  6e:	1d 04       	cpc	r1, r13
  70:	2a 04       	cpc	r2, r10
  72:	37 04       	cpc	r3, r7
  74:	44 04       	cpc	r4, r4
  76:	51 04       	cpc	r5, r1
  78:	5e 04       	cpc	r5, r14
  7a:	6b 04       	cpc	r6, r11
  7c:	78 04       	cpc	r7, r8
  7e:	85 04       	cpc	r8, r5
  80:	92 04       	cpc	r9, r2
  82:	9f 04       	cpc	r9, r15
  84:	ac 04       	cpc	r10, r12
  86:	b9 04       	cpc	r11, r9
  88:	c6 04       	cpc	r12, r6
  8a:	d3 04       	cpc	r13, r3

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf e5       	ldi	r28, 0x5F	; 95
  92:	d8 e0       	ldi	r29, 0x08	; 8
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	10 e0       	ldi	r17, 0x00	; 0
  9a:	a0 e6       	ldi	r26, 0x60	; 96
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e8 e9       	ldi	r30, 0x98	; 152
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a2 36       	cpi	r26, 0x62	; 98
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	a2 e6       	ldi	r26, 0x62	; 98
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a7 37       	cpi	r26, 0x77	; 119
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 4c 02 	call	0x498	; 0x498 <main>
  c2:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <ADC_Init>:




void ADC_Init(uint8 pinno) {
	SET_BIT(ADCSRA_Reg, 7);//Enabling the ADC
  ca:	37 9a       	sbi	0x06, 7	; 6
	SET_BIT(ADCSRA_Reg, 6);//Start of conversion
  cc:	36 9a       	sbi	0x06, 6	; 6
	CLR_BIT(ADCSRA_Reg, 5);//Disabling AutoTrigger
  ce:	35 98       	cbi	0x06, 5	; 6
	SET_BIT(ADCSRA_Reg, 4);//Clearing the ADC Flag 
  d0:	34 9a       	sbi	0x06, 4	; 6
	CLR_BIT(ADCSRA_Reg, 3);//Disabling Interrupt
  d2:	33 98       	cbi	0x06, 3	; 6
	CLR_BIT(ADCSRA_Reg, 2);//Setting the pre-scaler 128
  d4:	32 98       	cbi	0x06, 2	; 6
	CLR_BIT(ADCSRA_Reg, 1);//Setting the pre-scaler 128
  d6:	31 98       	cbi	0x06, 1	; 6
	CLR_BIT(ADCSRA_Reg, 0);//Setting the pre-scaler 128
  d8:	30 98       	cbi	0x06, 0	; 6


	if (pinno == 0) {
  da:	81 11       	cpse	r24, r1
  dc:	06 c0       	rjmp	.+12     	; 0xea <ADC_Init+0x20>
		CLR_BIT(ADMUX_Reg, 0);//Selecting ADC0
  de:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX_Reg, 1);//Selecting ADC0
  e0:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX_Reg, 2);//Selecting ADC0
  e2:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC0
  e4:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC0
  e6:	3c 98       	cbi	0x07, 4	; 7
  e8:	10 c0       	rjmp	.+32     	; 0x10a <ADC_Init+0x40>
	}
	if (pinno == 1) {
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	31 f4       	brne	.+12     	; 0xfa <ADC_Init+0x30>
		SET_BIT(ADMUX_Reg, 0);//Selecting ADC1
  ee:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX_Reg, 1);//Selecting ADC1
  f0:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX_Reg, 2);//Selecting ADC1
  f2:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC1
  f4:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC1
  f6:	3c 98       	cbi	0x07, 4	; 7
  f8:	10 c0       	rjmp	.+32     	; 0x11a <ADC_Init+0x50>
	}
	if (pinno == 2) {
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	31 f4       	brne	.+12     	; 0x10a <ADC_Init+0x40>
		CLR_BIT(ADMUX_Reg, 0);//Selecting ADC2
  fe:	38 98       	cbi	0x07, 0	; 7
		SET_BIT(ADMUX_Reg, 1);//Selecting ADC2
 100:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX_Reg, 2);//Selecting ADC2
 102:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC2
 104:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC2
 106:	3c 98       	cbi	0x07, 4	; 7
 108:	10 c0       	rjmp	.+32     	; 0x12a <ADC_Init+0x60>
	}
	if (pinno == 3) {
 10a:	83 30       	cpi	r24, 0x03	; 3
 10c:	31 f4       	brne	.+12     	; 0x11a <ADC_Init+0x50>
		SET_BIT(ADMUX_Reg, 0);//Selecting ADC3
 10e:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX_Reg, 1);//Selecting ADC3
 110:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX_Reg, 2);//Selecting ADC3
 112:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC3
 114:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC3
 116:	3c 98       	cbi	0x07, 4	; 7
 118:	10 c0       	rjmp	.+32     	; 0x13a <ADC_Init+0x70>
	}

	if (pinno == 4) {
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	31 f4       	brne	.+12     	; 0x12a <ADC_Init+0x60>
		CLR_BIT(ADMUX_Reg, 0);//Selecting ADC4
 11e:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX_Reg, 1);//Selecting ADC4
 120:	39 98       	cbi	0x07, 1	; 7
		SET_BIT(ADMUX_Reg, 2);//Selecting ADC4
 122:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC4
 124:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC4
 126:	3c 98       	cbi	0x07, 4	; 7
 128:	10 c0       	rjmp	.+32     	; 0x14a <ADC_Init+0x80>
	}

	if (pinno == 5) {
 12a:	85 30       	cpi	r24, 0x05	; 5
 12c:	31 f4       	brne	.+12     	; 0x13a <ADC_Init+0x70>
		SET_BIT(ADMUX_Reg, 0);//Selecting ADC5
 12e:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX_Reg, 1);//Selecting ADC5
 130:	39 98       	cbi	0x07, 1	; 7
		SET_BIT(ADMUX_Reg, 2);//Selecting ADC5
 132:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC5
 134:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC5
 136:	3c 98       	cbi	0x07, 4	; 7
 138:	0f c0       	rjmp	.+30     	; 0x158 <ADC_Init+0x8e>
	}

	if (pinno == 6) {
 13a:	86 30       	cpi	r24, 0x06	; 6
 13c:	31 f4       	brne	.+12     	; 0x14a <ADC_Init+0x80>
		CLR_BIT(ADMUX_Reg, 0);//Selecting ADC6
 13e:	38 98       	cbi	0x07, 0	; 7
		SET_BIT(ADMUX_Reg, 1);//Selecting ADC6
 140:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX_Reg, 2);//Selecting ADC6
 142:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC6
 144:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC6
 146:	3c 98       	cbi	0x07, 4	; 7
 148:	07 c0       	rjmp	.+14     	; 0x158 <ADC_Init+0x8e>
	}
	if (pinno == 7) {
 14a:	87 30       	cpi	r24, 0x07	; 7
 14c:	29 f4       	brne	.+10     	; 0x158 <ADC_Init+0x8e>
		SET_BIT(ADMUX_Reg, 0);//Selecting ADC7
 14e:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX_Reg, 1);//Selecting ADC7
 150:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX_Reg, 2);//Selecting ADC7
 152:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX_Reg, 3);//Selecting ADC7
 154:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX_Reg, 4);//Selecting ADC7
 156:	3c 98       	cbi	0x07, 4	; 7
	}

	CLR_BIT(ADMUX_Reg, 5);//ADC Right Adjustment
 158:	3d 98       	cbi	0x07, 5	; 7
	SET_BIT(ADMUX_Reg, 6);//Selecting AVCC as Vref
 15a:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX_Reg, 7);//Selecting AVCC as Vref
 15c:	3f 98       	cbi	0x07, 7	; 7
 15e:	08 95       	ret

00000160 <ADC_GetResult>:

uint16 ADC_GetResult(uint8 pinno){

	uint16 ADC_Result = 0;//Result

	SET_BIT(ADCSRA_Reg, 6);//Starting a single Conversion
 160:	36 9a       	sbi	0x06, 6	; 6
	
	while (RD_BIT(ADCSRA_Reg, 4) == 0);//checking for the ADC Flag 
 162:	34 9b       	sbis	0x06, 4	; 6
 164:	fe cf       	rjmp	.-4      	; 0x162 <ADC_GetResult+0x2>

	ADC_Result = (ADCL_Reg | (ADCH_Reg << 8));
 166:	84 b1       	in	r24, 0x04	; 4
 168:	25 b1       	in	r18, 0x05	; 5

	SET_BIT(ADCSRA_Reg, 4);//Clearing the ADC Flag
 16a:	34 9a       	sbi	0x06, 4	; 6

	SET_BIT(ADCSRA_Reg, 6);//Starting a single Conversion
	
	while (RD_BIT(ADCSRA_Reg, 4) == 0);//checking for the ADC Flag 

	ADC_Result = (ADCL_Reg | (ADCH_Reg << 8));
 16c:	90 e0       	ldi	r25, 0x00	; 0

	SET_BIT(ADCSRA_Reg, 4);//Clearing the ADC Flag

	return ADC_Result;
}
 16e:	92 2b       	or	r25, r18
 170:	08 95       	ret

00000172 <ADC_GetTemp>:

uint16 ADC_GetTemp(uint8 pinno) {
 172:	cf 93       	push	r28
 174:	c8 2f       	mov	r28, r24

	ADC_Init(pinno);
 176:	0e 94 65 00 	call	0xca	; 0xca <ADC_Init>

	return ADC_GetResult(pinno) / 2;
 17a:	8c 2f       	mov	r24, r28
 17c:	0e 94 b0 00 	call	0x160	; 0x160 <ADC_GetResult>
}
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <ADC_FlameState>:

uint8 ADC_FlameState(uint8 pinno) {
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24

	ADC_Init(pinno);
 18c:	0e 94 65 00 	call	0xca	; 0xca <ADC_Init>
    if(ADC_GetResult(pinno)==1023)return 1;
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 b0 00 	call	0x160	; 0x160 <ADC_GetResult>
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	8f 3f       	cpi	r24, 0xFF	; 255
 19a:	93 40       	sbci	r25, 0x03	; 3
 19c:	09 f0       	breq	.+2      	; 0x1a0 <ADC_FlameState+0x18>
 19e:	20 e0       	ldi	r18, 0x00	; 0
    else return 0;

}
 1a0:	82 2f       	mov	r24, r18
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <DIO_Init>:
void DIO_SetPortDirection(uint8 portno, uint8 state) {
    switch(portno) {
        case PORTA_: DDRA_REG = state; break;
        case PORTB_: DDRB_REG = state; break;
        case PORTC_: DDRC_REG = state; break;
        case PORTD_: DDRD_REG = state; break;        
 1a6:	1a ba       	out	0x1a, r1	; 26
 1a8:	17 ba       	out	0x17, r1	; 23
 1aa:	8f e3       	ldi	r24, 0x3F	; 63
 1ac:	84 bb       	out	0x14, r24	; 20
 1ae:	81 e1       	ldi	r24, 0x11	; 17
 1b0:	81 bb       	out	0x11, r24	; 17
 1b2:	1b ba       	out	0x1b, r1	; 27
 1b4:	18 ba       	out	0x18, r1	; 24
 1b6:	15 ba       	out	0x15, r1	; 21
 1b8:	12 ba       	out	0x12, r1	; 18
 1ba:	08 95       	ret

000001bc <DIO_SetPinDirection>:
 1bc:	41 11       	cpse	r20, r1
 1be:	38 c0       	rjmp	.+112    	; 0x230 <DIO_SetPinDirection+0x74>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 f0       	breq	.+36     	; 0x1e8 <DIO_SetPinDirection+0x2c>
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <DIO_SetPinDirection+0x14>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	d9 f0       	breq	.+54     	; 0x200 <DIO_SetPinDirection+0x44>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	29 f1       	breq	.+74     	; 0x218 <DIO_SetPinDirection+0x5c>
 1ce:	08 95       	ret
 1d0:	2a b3       	in	r18, 0x1a	; 26
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinDirection+0x20>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinDirection+0x1c>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	8a bb       	out	0x1a, r24	; 26
 1e6:	08 95       	ret
 1e8:	27 b3       	in	r18, 0x17	; 23
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinDirection+0x38>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinDirection+0x34>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	87 bb       	out	0x17, r24	; 23
 1fe:	08 95       	ret
 200:	24 b3       	in	r18, 0x14	; 20
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinDirection+0x50>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinDirection+0x4c>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	84 bb       	out	0x14, r24	; 20
 216:	08 95       	ret
 218:	21 b3       	in	r18, 0x11	; 17
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinDirection+0x68>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinDirection+0x64>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	81 bb       	out	0x11, r24	; 17
 22e:	08 95       	ret
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	99 f5       	brne	.+102    	; 0x29a <DIO_SetPinDirection+0xde>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	89 f0       	breq	.+34     	; 0x25a <DIO_SetPinDirection+0x9e>
 238:	28 f0       	brcs	.+10     	; 0x244 <DIO_SetPinDirection+0x88>
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	c9 f0       	breq	.+50     	; 0x270 <DIO_SetPinDirection+0xb4>
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	11 f1       	breq	.+68     	; 0x286 <DIO_SetPinDirection+0xca>
 242:	08 95       	ret
 244:	2a b3       	in	r18, 0x1a	; 26
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_SetPinDirection+0x94>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_SetPinDirection+0x90>
 254:	82 2b       	or	r24, r18
 256:	8a bb       	out	0x1a, r24	; 26
 258:	08 95       	ret
 25a:	27 b3       	in	r18, 0x17	; 23
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_SetPinDirection+0xaa>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_SetPinDirection+0xa6>
 26a:	82 2b       	or	r24, r18
 26c:	87 bb       	out	0x17, r24	; 23
 26e:	08 95       	ret
 270:	24 b3       	in	r18, 0x14	; 20
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_SetPinDirection+0xc0>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_SetPinDirection+0xbc>
 280:	82 2b       	or	r24, r18
 282:	84 bb       	out	0x14, r24	; 20
 284:	08 95       	ret
 286:	21 b3       	in	r18, 0x11	; 17
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_SetPinDirection+0xd6>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_SetPinDirection+0xd2>
 296:	82 2b       	or	r24, r18
 298:	81 bb       	out	0x11, r24	; 17
 29a:	08 95       	ret

0000029c <DIO_SetPinValue>:
        default: break; 
        }
}

void DIO_SetPinValue(uint8 portno, uint8 pinno, uint8 value) {
    if (value == LOW) {
 29c:	41 11       	cpse	r20, r1
 29e:	38 c0       	rjmp	.+112    	; 0x310 <DIO_SetPinValue+0x74>
        switch(portno) {
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	91 f0       	breq	.+36     	; 0x2c8 <DIO_SetPinValue+0x2c>
 2a4:	28 f0       	brcs	.+10     	; 0x2b0 <DIO_SetPinValue+0x14>
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	d9 f0       	breq	.+54     	; 0x2e0 <DIO_SetPinValue+0x44>
 2aa:	83 30       	cpi	r24, 0x03	; 3
 2ac:	29 f1       	breq	.+74     	; 0x2f8 <DIO_SetPinValue+0x5c>
 2ae:	08 95       	ret
            case PORTA_: CLR_BIT(PORTA_REG, pinno); break;
 2b0:	2b b3       	in	r18, 0x1b	; 27
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SetPinValue+0x20>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SetPinValue+0x1c>
 2c0:	80 95       	com	r24
 2c2:	82 23       	and	r24, r18
 2c4:	8b bb       	out	0x1b, r24	; 27
 2c6:	08 95       	ret
            case PORTB_: CLR_BIT(PORTB_REG, pinno); break;
 2c8:	28 b3       	in	r18, 0x18	; 24
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_SetPinValue+0x38>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_SetPinValue+0x34>
 2d8:	80 95       	com	r24
 2da:	82 23       	and	r24, r18
 2dc:	88 bb       	out	0x18, r24	; 24
 2de:	08 95       	ret
            case PORTC_: CLR_BIT(PORTC_REG, pinno); break;
 2e0:	25 b3       	in	r18, 0x15	; 21
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_SetPinValue+0x50>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_SetPinValue+0x4c>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	85 bb       	out	0x15, r24	; 21
 2f6:	08 95       	ret
            case PORTD_: CLR_BIT(PORTD_REG, pinno); break;   
 2f8:	22 b3       	in	r18, 0x12	; 18
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_SetPinValue+0x68>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_SetPinValue+0x64>
 308:	80 95       	com	r24
 30a:	82 23       	and	r24, r18
 30c:	82 bb       	out	0x12, r24	; 18
 30e:	08 95       	ret
            default: break;      
        }
    }
    else if (value == HIGH) {
 310:	41 30       	cpi	r20, 0x01	; 1
 312:	99 f5       	brne	.+102    	; 0x37a <DIO_SetPinValue+0xde>
        switch(portno) {
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	89 f0       	breq	.+34     	; 0x33a <DIO_SetPinValue+0x9e>
 318:	28 f0       	brcs	.+10     	; 0x324 <DIO_SetPinValue+0x88>
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	c9 f0       	breq	.+50     	; 0x350 <DIO_SetPinValue+0xb4>
 31e:	83 30       	cpi	r24, 0x03	; 3
 320:	11 f1       	breq	.+68     	; 0x366 <DIO_SetPinValue+0xca>
 322:	08 95       	ret
            case PORTA_: SET_BIT(PORTA_REG, pinno); break;
 324:	2b b3       	in	r18, 0x1b	; 27
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_SetPinValue+0x94>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_SetPinValue+0x90>
 334:	82 2b       	or	r24, r18
 336:	8b bb       	out	0x1b, r24	; 27
 338:	08 95       	ret
            case PORTB_: SET_BIT(PORTB_REG, pinno); break;
 33a:	28 b3       	in	r18, 0x18	; 24
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_SetPinValue+0xaa>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_SetPinValue+0xa6>
 34a:	82 2b       	or	r24, r18
 34c:	88 bb       	out	0x18, r24	; 24
 34e:	08 95       	ret
            case PORTC_: SET_BIT(PORTC_REG, pinno); break;
 350:	25 b3       	in	r18, 0x15	; 21
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_SetPinValue+0xc0>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_SetPinValue+0xbc>
 360:	82 2b       	or	r24, r18
 362:	85 bb       	out	0x15, r24	; 21
 364:	08 95       	ret
            case PORTD_: SET_BIT(PORTD_REG, pinno); break;    
 366:	22 b3       	in	r18, 0x12	; 18
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_SetPinValue+0xd6>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_SetPinValue+0xd2>
 376:	82 2b       	or	r24, r18
 378:	82 bb       	out	0x12, r24	; 18
 37a:	08 95       	ret

0000037c <LED_On>:
void LED_Init(uint8 portno, uint8 pinno) {
    DIO_SetPinDirection(portno, pinno, OUTPUT);
}

void LED_On(uint8 portno, uint8 pinno) {
    DIO_SetPinValue(portno, pinno, HIGH);
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_SetPinValue>
 382:	08 95       	ret

00000384 <LED_Off>:
}

void LED_Off(uint8 portno, uint8 pinno) {
    DIO_SetPinValue(portno, pinno, LOW);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_SetPinValue>
 38a:	08 95       	ret

0000038c <Timer_ISR_Func>:
    }
}

void Timer_ISR_Func(void)
{
	count++;
 38c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <count>
	if (count >= 10)
 396:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count>
 39a:	8a 30       	cpi	r24, 0x0A	; 10
 39c:	08 f4       	brcc	.+2      	; 0x3a0 <Timer_ISR_Func+0x14>
 39e:	7b c0       	rjmp	.+246    	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
	{
		temp_sensor = ADC_GetTemp(0);
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 b9 00 	call	0x172	; 0x172 <ADC_GetTemp>
 3a6:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <temp_sensor+0x1>
 3aa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <temp_sensor>
		flame_sensor = ADC_FlameState(1);
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 c4 00 	call	0x188	; 0x188 <ADC_FlameState>
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <flame_sensor+0x1>
 3ba:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flame_sensor>
		if(flame_sensor == 1)
 3be:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flame_sensor>
 3c2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <flame_sensor+0x1>
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	b9 f4       	brne	.+46     	; 0x3f8 <Timer_ISR_Func+0x6c>
		{
			DIO_SetPinValue(PORTD_, 0, HIGH);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d4:	2f ef       	ldi	r18, 0xFF	; 255
 3d6:	89 e6       	ldi	r24, 0x69	; 105
 3d8:	98 e1       	ldi	r25, 0x18	; 24
 3da:	21 50       	subi	r18, 0x01	; 1
 3dc:	80 40       	sbci	r24, 0x00	; 0
 3de:	90 40       	sbci	r25, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <Timer_ISR_Func+0x4e>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <Timer_ISR_Func+0x58>
 3e4:	00 00       	nop
			_delay_ms(1000);
			DIO_SetPinValue(PORTD_, 0, LOW);
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	83 e0       	ldi	r24, 0x03	; 3
 3ec:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_SetPinValue>
			flame_sensor = 0;
 3f0:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <flame_sensor+0x1>
 3f4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <flame_sensor>
		}
		if ((temp_sensor >= desired_temp+1)&&(AC_ON==1))
 3f8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <desired_temp>
 3fc:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <desired_temp+0x1>
 400:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <temp_sensor>
 404:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <temp_sensor+0x1>
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	28 17       	cp	r18, r24
 40c:	39 07       	cpc	r19, r25
 40e:	60 f0       	brcs	.+24     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
 410:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <AC_ON>
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	41 f4       	brne	.+16     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
		{
			LED_On(PORTC_, 0);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	0e 94 be 01 	call	0x37c	; 0x37c <LED_On>
			air_condition = 1;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <air_condition>
 426:	08 95       	ret
		}
		else if ((temp_sensor <= desired_temp-1)&&(force_AC_ON==0))
 428:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <desired_temp>
 42c:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <desired_temp+0x1>
 430:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <temp_sensor>
 434:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <temp_sensor+0x1>
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	82 17       	cp	r24, r18
 43c:	93 07       	cpc	r25, r19
 43e:	58 f0       	brcs	.+22     	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
 440:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <force_AC_ON>
 444:	81 11       	cpse	r24, r1
 446:	07 c0       	rjmp	.+14     	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
		{
			LED_Off(PORTC_, 0);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	0e 94 c2 01 	call	0x384	; 0x384 <LED_Off>
			air_condition = 0;
 450:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <air_condition>
 454:	08 95       	ret
		}
		else if ((temp_sensor == desired_temp)&&(AC_ON==1))
 456:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <temp_sensor>
 45a:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <temp_sensor+0x1>
 45e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <desired_temp>
 462:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <desired_temp+0x1>
 466:	28 17       	cp	r18, r24
 468:	39 07       	cpc	r19, r25
 46a:	a9 f4       	brne	.+42     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
 46c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <AC_ON>
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	89 f4       	brne	.+34     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
		{
			if (air_condition == 1)
 474:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <air_condition>
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	29 f4       	brne	.+10     	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
			{
				LED_On(PORTC_, 0);
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	0e 94 be 01 	call	0x37c	; 0x37c <LED_On>
 484:	08 95       	ret
			}
			else if (air_condition == 0)
 486:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <air_condition>
 48a:	81 11       	cpse	r24, r1
 48c:	04 c0       	rjmp	.+8      	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
			{
				LED_Off(PORTC_, 0);
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	0e 94 c2 01 	call	0x384	; 0x384 <LED_Off>
 496:	08 95       	ret

00000498 <main>:
volatile uint8 air_condition = 0;
volatile uint8 AC_ON=0,force_AC_ON=0,set_temp=0;

int main(void)
{
    DIO_Init();
 498:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_Init>
	ADC_Init(0);
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	0e 94 65 00 	call	0xca	; 0xca <ADC_Init>
	ADC_Init(1);
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 65 00 	call	0xca	; 0xca <ADC_Init>
	SPI_init_as_slave(false);
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 3c 03 	call	0x678	; 0x678 <SPI_init_as_slave>
	Servo_Init();
 4b0:	0e 94 13 03 	call	0x626	; 0x626 <Servo_Init>
	sei();
 4b4:	78 94       	sei
	Timer0_Init(Timer0_CTC_Mode, Timer_Scaler_1024, OCO_Disconnected);
 4b6:	40 e0       	ldi	r20, 0x00	; 0
 4b8:	65 e0       	ldi	r22, 0x05	; 5
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	0e 94 65 03 	call	0x6ca	; 0x6ca <Timer0_Init>
	OCR0 = 78;
 4c0:	8e e4       	ldi	r24, 0x4E	; 78
 4c2:	8c bf       	out	0x3c, r24	; 60
	SetCallBack_Timer0_OC0(Timer_ISR_Func);
 4c4:	86 ec       	ldi	r24, 0xC6	; 198
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 bc 03 	call	0x778	; 0x778 <SetCallBack_Timer0_OC0>
	Timer0_OC_InterruptEnable();
 4cc:	0e 94 b8 03 	call	0x770	; 0x770 <Timer0_OC_InterruptEnable>
				DIO_SetPinValue(PORTD_, 0, LOW);
				r_data = -1;
				break;
			case SET_TEMPERATURE:
				force_AC_ON=0;
				set_temp=1;
 4d0:	c1 e0       	ldi	r28, 0x01	; 1
				break;
			case WRONG_FOR_3TIMES:
				DIO_SetPinValue(PORTD_, 0, HIGH);
				_delay_ms(1000);
				DIO_SetPinValue(PORTD_, 0, LOW);
				r_data = -1;
 4d2:	df ef       	ldi	r29, 0xFF	; 255
	SetCallBack_Timer0_OC0(Timer_ISR_Func);
	Timer0_OC_InterruptEnable();
    while (1)
    {

		if ((set_temp==1)&&(r_data!=SET_TEMPERATURE))
 4d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	59 f4       	brne	.+22     	; 0x4f2 <main+0x5a>
 4dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 4e0:	8d 30       	cpi	r24, 0x0D	; 13
 4e2:	39 f0       	breq	.+14     	; 0x4f2 <main+0x5a>
		{
			desired_temp = r_data;
 4e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <desired_temp+0x1>
 4ee:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <desired_temp>
		}
		switch(r_data)
 4f2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
 4f6:	8e 2f       	mov	r24, r30
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	fc 01       	movw	r30, r24
 4fc:	31 97       	sbiw	r30, 0x01	; 1
 4fe:	ed 30       	cpi	r30, 0x0D	; 13
 500:	f1 05       	cpc	r31, r1
 502:	40 f7       	brcc	.-48     	; 0x4d4 <main+0x3c>
 504:	e6 5d       	subi	r30, 0xD6	; 214
 506:	ff 4f       	sbci	r31, 0xFF	; 255
 508:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__tablejump2__>
		{
			case LIVING_ROOM_ON:
				LED_On(PORTC_, 1);
 50c:	6c 2f       	mov	r22, r28
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	0e 94 be 01 	call	0x37c	; 0x37c <LED_On>
				break;
 514:	df cf       	rjmp	.-66     	; 0x4d4 <main+0x3c>
			case LIVING_ROOM_OFF:
				LED_Off(PORTC_, 1);
 516:	6c 2f       	mov	r22, r28
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	0e 94 c2 01 	call	0x384	; 0x384 <LED_Off>
				break;
 51e:	da cf       	rjmp	.-76     	; 0x4d4 <main+0x3c>
			case TV_ON:
				LED_On(PORTC_, 2);
 520:	62 e0       	ldi	r22, 0x02	; 2
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	0e 94 be 01 	call	0x37c	; 0x37c <LED_On>
				break;
 528:	d5 cf       	rjmp	.-86     	; 0x4d4 <main+0x3c>
			case TV_OFF:
				LED_Off(PORTC_, 2);
 52a:	62 e0       	ldi	r22, 0x02	; 2
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	0e 94 c2 01 	call	0x384	; 0x384 <LED_Off>
				break;
 532:	d0 cf       	rjmp	.-96     	; 0x4d4 <main+0x3c>
			case BED_ROOM_ON:
				LED_On(PORTC_, 3);
 534:	63 e0       	ldi	r22, 0x03	; 3
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	0e 94 be 01 	call	0x37c	; 0x37c <LED_On>
				break;
 53c:	cb cf       	rjmp	.-106    	; 0x4d4 <main+0x3c>
			case BED_ROOM_OFF:
				LED_Off(PORTC_, 3);
 53e:	63 e0       	ldi	r22, 0x03	; 3
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	0e 94 c2 01 	call	0x384	; 0x384 <LED_Off>
				break;
 546:	c6 cf       	rjmp	.-116    	; 0x4d4 <main+0x3c>
			case KIDS_ROOM_ON:
				LED_On(PORTC_, 4);
 548:	64 e0       	ldi	r22, 0x04	; 4
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	0e 94 be 01 	call	0x37c	; 0x37c <LED_On>
				break;
 550:	c1 cf       	rjmp	.-126    	; 0x4d4 <main+0x3c>
			case KIDS_ROOM_OFF:
				LED_Off(PORTC_, 4);
 552:	64 e0       	ldi	r22, 0x04	; 4
 554:	82 e0       	ldi	r24, 0x02	; 2
 556:	0e 94 c2 01 	call	0x384	; 0x384 <LED_Off>
				break;
 55a:	bc cf       	rjmp	.-136    	; 0x4d4 <main+0x3c>
			case AIR_COND_ON:
				LED_On(PORTC_, 0);
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	0e 94 be 01 	call	0x37c	; 0x37c <LED_On>
				force_AC_ON=1;
 564:	c0 93 63 00 	sts	0x0063, r28	; 0x800063 <force_AC_ON>
				break;
 568:	b5 cf       	rjmp	.-150    	; 0x4d4 <main+0x3c>
			case AIR_COND_OFF:
				AC_ON=0;
 56a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <AC_ON>
				force_AC_ON=0;
 56e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <force_AC_ON>
				LED_Off(PORTC_, 0);
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	0e 94 c2 01 	call	0x384	; 0x384 <LED_Off>
				break;
 57a:	ac cf       	rjmp	.-168    	; 0x4d4 <main+0x3c>
			case RIGHT_PASSWARD:
				Servo_SetAngle(90);
 57c:	8a e5       	ldi	r24, 0x5A	; 90
 57e:	0e 94 22 03 	call	0x644	; 0x644 <Servo_SetAngle>
 582:	2f ef       	ldi	r18, 0xFF	; 255
 584:	89 e6       	ldi	r24, 0x69	; 105
 586:	98 e1       	ldi	r25, 0x18	; 24
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	80 40       	sbci	r24, 0x00	; 0
 58c:	90 40       	sbci	r25, 0x00	; 0
 58e:	e1 f7       	brne	.-8      	; 0x588 <main+0xf0>
 590:	00 c0       	rjmp	.+0      	; 0x592 <main+0xfa>
 592:	00 00       	nop
				_delay_ms(DOOR_DELAY);
				Servo_SetAngle(0);
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 22 03 	call	0x644	; 0x644 <Servo_SetAngle>
				r_data = -1;
 59a:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__data_start>
				break;
 59e:	9a cf       	rjmp	.-204    	; 0x4d4 <main+0x3c>
			case WRONG_FOR_3TIMES:
				DIO_SetPinValue(PORTD_, 0, HIGH);
 5a0:	4c 2f       	mov	r20, r28
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	83 e0       	ldi	r24, 0x03	; 3
 5a6:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_SetPinValue>
 5aa:	2f ef       	ldi	r18, 0xFF	; 255
 5ac:	89 e6       	ldi	r24, 0x69	; 105
 5ae:	98 e1       	ldi	r25, 0x18	; 24
 5b0:	21 50       	subi	r18, 0x01	; 1
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	90 40       	sbci	r25, 0x00	; 0
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <main+0x118>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0x122>
 5ba:	00 00       	nop
				_delay_ms(1000);
				DIO_SetPinValue(PORTD_, 0, LOW);
 5bc:	40 e0       	ldi	r20, 0x00	; 0
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_SetPinValue>
				r_data = -1;
 5c6:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__data_start>
				break;
 5ca:	84 cf       	rjmp	.-248    	; 0x4d4 <main+0x3c>
			case SET_TEMPERATURE:
				force_AC_ON=0;
 5cc:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <force_AC_ON>
				set_temp=1;
 5d0:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <__data_end>
				AC_ON=1;
 5d4:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <AC_ON>
				break;
 5d8:	7d cf       	rjmp	.-262    	; 0x4d4 <main+0x3c>

000005da <__vector_12>:
		}
	}
}

ISR(SPI_STC_vect)
{
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	0f 92       	push	r0
 5e2:	11 24       	eor	r1, r1
 5e4:	2f 93       	push	r18
 5e6:	3f 93       	push	r19
 5e8:	4f 93       	push	r20
 5ea:	5f 93       	push	r21
 5ec:	6f 93       	push	r22
 5ee:	7f 93       	push	r23
 5f0:	8f 93       	push	r24
 5f2:	9f 93       	push	r25
 5f4:	af 93       	push	r26
 5f6:	bf 93       	push	r27
 5f8:	ef 93       	push	r30
 5fa:	ff 93       	push	r31
	r_data= SPI_recieve_char_ISR();
 5fc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <SPI_recieve_char_ISR>
 600:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
}
 604:	ff 91       	pop	r31
 606:	ef 91       	pop	r30
 608:	bf 91       	pop	r27
 60a:	af 91       	pop	r26
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	7f 91       	pop	r23
 612:	6f 91       	pop	r22
 614:	5f 91       	pop	r21
 616:	4f 91       	pop	r20
 618:	3f 91       	pop	r19
 61a:	2f 91       	pop	r18
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <Servo_Init>:
#include "Servo.h"

void Servo_Init(void)
{
	//Configure TIMER1
	Timer1_Init(Fast_PWM_ICR1, Timer_Scaler_64, OC1A_Inverting, OC1B_Inverting);
 626:	23 e0       	ldi	r18, 0x03	; 3
 628:	43 e0       	ldi	r20, 0x03	; 3
 62a:	63 e0       	ldi	r22, 0x03	; 3
 62c:	8d e0       	ldi	r24, 0x0D	; 13
 62e:	0e 94 13 04 	call	0x826	; 0x826 <Timer1_Init>

	ICR1=19999;  //fPWM=50Hz (Period = 20ms Standard).
 632:	8f e1       	ldi	r24, 0x1F	; 31
 634:	9e e4       	ldi	r25, 0x4E	; 78
 636:	97 bd       	out	0x27, r25	; 39
 638:	86 bd       	out	0x26, r24	; 38
	OCR1B = 97;
 63a:	81 e6       	ldi	r24, 0x61	; 97
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	99 bd       	out	0x29, r25	; 41
 640:	88 bd       	out	0x28, r24	; 40
 642:	08 95       	ret

00000644 <Servo_SetAngle>:
}

void Servo_SetAngle(uint8 angle)
{
	OCR1B = (((uint16)angle*100)/41.1)+97;
 644:	24 e6       	ldi	r18, 0x64	; 100
 646:	82 9f       	mul	r24, r18
 648:	c0 01       	movw	r24, r0
 64a:	11 24       	eor	r1, r1
 64c:	bc 01       	movw	r22, r24
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 36 07 	call	0xe6c	; 0xe6c <__floatunsisf>
 656:	26 e6       	ldi	r18, 0x66	; 102
 658:	36 e6       	ldi	r19, 0x66	; 102
 65a:	44 e2       	ldi	r20, 0x24	; 36
 65c:	52 e4       	ldi	r21, 0x42	; 66
 65e:	0e 94 95 06 	call	0xd2a	; 0xd2a <__divsf3>
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	42 ec       	ldi	r20, 0xC2	; 194
 668:	52 e4       	ldi	r21, 0x42	; 66
 66a:	0e 94 29 06 	call	0xc52	; 0xc52 <__addsf3>
 66e:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fixunssfsi>
 672:	79 bd       	out	0x29, r23	; 41
 674:	68 bd       	out	0x28, r22	; 40
 676:	08 95       	ret

00000678 <SPI_init_as_slave>:
uint8 SPI_recieve_char_no_ISR()
{
	while((SPSR & (1<<7))==0) ;    //wait for SPIF to set (transfer of data is complete )
	return SPDR;

}
 678:	cf 93       	push	r28
 67a:	c8 2f       	mov	r28, r24
 67c:	41 e0       	ldi	r20, 0x01	; 1
 67e:	66 e0       	ldi	r22, 0x06	; 6
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
 686:	40 e0       	ldi	r20, 0x00	; 0
 688:	65 e0       	ldi	r22, 0x05	; 5
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
 690:	40 e0       	ldi	r20, 0x00	; 0
 692:	67 e0       	ldi	r22, 0x07	; 7
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
 69a:	40 e0       	ldi	r20, 0x00	; 0
 69c:	64 e0       	ldi	r22, 0x04	; 4
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_SetPinDirection>
 6a4:	41 e0       	ldi	r20, 0x01	; 1
 6a6:	64 e0       	ldi	r22, 0x04	; 4
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_SetPinValue>
 6ae:	cc 23       	and	r28, r28
 6b0:	21 f0       	breq	.+8      	; 0x6ba <SPI_init_as_slave+0x42>
 6b2:	83 ec       	ldi	r24, 0xC3	; 195
 6b4:	8d b9       	out	0x0d, r24	; 13
 6b6:	1e b8       	out	0x0e, r1	; 14
 6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <SPI_init_as_slave+0x4a>
 6ba:	80 ec       	ldi	r24, 0xC0	; 192
 6bc:	8d b9       	out	0x0d, r24	; 13
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	8e b9       	out	0x0e, r24	; 14
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <SPI_recieve_char_ISR>:
uint8 SPI_recieve_char_ISR()
{
	return SPDR;
 6c6:	8f b1       	in	r24, 0x0f	; 15
}
 6c8:	08 95       	ret

000006ca <Timer0_Init>:
	Timer2_callBackPtr = LocalFptr;
}

void SetCallBack_Timer2_OVF(void(*LocalFptr)(void))
{
	Timer2_callBackPtr = LocalFptr;
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	a1 f0       	breq	.+40     	; 0x6f6 <Timer0_Init+0x2c>
 6ce:	28 f0       	brcs	.+10     	; 0x6da <Timer0_Init+0x10>
 6d0:	82 30       	cpi	r24, 0x02	; 2
 6d2:	51 f0       	breq	.+20     	; 0x6e8 <Timer0_Init+0x1e>
 6d4:	83 30       	cpi	r24, 0x03	; 3
 6d6:	b1 f0       	breq	.+44     	; 0x704 <Timer0_Init+0x3a>
 6d8:	1b c0       	rjmp	.+54     	; 0x710 <Timer0_Init+0x46>
 6da:	83 b7       	in	r24, 0x33	; 51
 6dc:	8f 7b       	andi	r24, 0xBF	; 191
 6de:	83 bf       	out	0x33, r24	; 51
 6e0:	83 b7       	in	r24, 0x33	; 51
 6e2:	87 7f       	andi	r24, 0xF7	; 247
 6e4:	83 bf       	out	0x33, r24	; 51
 6e6:	14 c0       	rjmp	.+40     	; 0x710 <Timer0_Init+0x46>
 6e8:	83 b7       	in	r24, 0x33	; 51
 6ea:	8f 7b       	andi	r24, 0xBF	; 191
 6ec:	83 bf       	out	0x33, r24	; 51
 6ee:	83 b7       	in	r24, 0x33	; 51
 6f0:	88 60       	ori	r24, 0x08	; 8
 6f2:	83 bf       	out	0x33, r24	; 51
 6f4:	0d c0       	rjmp	.+26     	; 0x710 <Timer0_Init+0x46>
 6f6:	83 b7       	in	r24, 0x33	; 51
 6f8:	80 64       	ori	r24, 0x40	; 64
 6fa:	83 bf       	out	0x33, r24	; 51
 6fc:	83 b7       	in	r24, 0x33	; 51
 6fe:	87 7f       	andi	r24, 0xF7	; 247
 700:	83 bf       	out	0x33, r24	; 51
 702:	06 c0       	rjmp	.+12     	; 0x710 <Timer0_Init+0x46>
 704:	83 b7       	in	r24, 0x33	; 51
 706:	80 64       	ori	r24, 0x40	; 64
 708:	83 bf       	out	0x33, r24	; 51
 70a:	83 b7       	in	r24, 0x33	; 51
 70c:	88 60       	ori	r24, 0x08	; 8
 70e:	83 bf       	out	0x33, r24	; 51
 710:	41 30       	cpi	r20, 0x01	; 1
 712:	69 f0       	breq	.+26     	; 0x72e <Timer0_Init+0x64>
 714:	28 f0       	brcs	.+10     	; 0x720 <Timer0_Init+0x56>
 716:	42 30       	cpi	r20, 0x02	; 2
 718:	89 f0       	breq	.+34     	; 0x73c <Timer0_Init+0x72>
 71a:	43 30       	cpi	r20, 0x03	; 3
 71c:	b1 f0       	breq	.+44     	; 0x74a <Timer0_Init+0x80>
 71e:	1b c0       	rjmp	.+54     	; 0x756 <Timer0_Init+0x8c>
 720:	83 b7       	in	r24, 0x33	; 51
 722:	8f 7e       	andi	r24, 0xEF	; 239
 724:	83 bf       	out	0x33, r24	; 51
 726:	83 b7       	in	r24, 0x33	; 51
 728:	8f 7d       	andi	r24, 0xDF	; 223
 72a:	83 bf       	out	0x33, r24	; 51
 72c:	14 c0       	rjmp	.+40     	; 0x756 <Timer0_Init+0x8c>
 72e:	83 b7       	in	r24, 0x33	; 51
 730:	80 61       	ori	r24, 0x10	; 16
 732:	83 bf       	out	0x33, r24	; 51
 734:	83 b7       	in	r24, 0x33	; 51
 736:	8f 7d       	andi	r24, 0xDF	; 223
 738:	83 bf       	out	0x33, r24	; 51
 73a:	0d c0       	rjmp	.+26     	; 0x756 <Timer0_Init+0x8c>
 73c:	83 b7       	in	r24, 0x33	; 51
 73e:	8f 7e       	andi	r24, 0xEF	; 239
 740:	83 bf       	out	0x33, r24	; 51
 742:	83 b7       	in	r24, 0x33	; 51
 744:	80 62       	ori	r24, 0x20	; 32
 746:	83 bf       	out	0x33, r24	; 51
 748:	06 c0       	rjmp	.+12     	; 0x756 <Timer0_Init+0x8c>
 74a:	83 b7       	in	r24, 0x33	; 51
 74c:	80 61       	ori	r24, 0x10	; 16
 74e:	83 bf       	out	0x33, r24	; 51
 750:	83 b7       	in	r24, 0x33	; 51
 752:	80 62       	ori	r24, 0x20	; 32
 754:	83 bf       	out	0x33, r24	; 51
 756:	83 b7       	in	r24, 0x33	; 51
 758:	8e 7f       	andi	r24, 0xFE	; 254
 75a:	83 bf       	out	0x33, r24	; 51
 75c:	83 b7       	in	r24, 0x33	; 51
 75e:	8d 7f       	andi	r24, 0xFD	; 253
 760:	83 bf       	out	0x33, r24	; 51
 762:	83 b7       	in	r24, 0x33	; 51
 764:	8b 7f       	andi	r24, 0xFB	; 251
 766:	83 bf       	out	0x33, r24	; 51
 768:	83 b7       	in	r24, 0x33	; 51
 76a:	68 2b       	or	r22, r24
 76c:	63 bf       	out	0x33, r22	; 51
 76e:	08 95       	ret

00000770 <Timer0_OC_InterruptEnable>:
 770:	89 b7       	in	r24, 0x39	; 57
 772:	82 60       	ori	r24, 0x02	; 2
 774:	89 bf       	out	0x39, r24	; 57
 776:	08 95       	ret

00000778 <SetCallBack_Timer0_OC0>:
 778:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <Timer0_callBackPtr+0x1>
 77c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Timer0_callBackPtr>
 780:	08 95       	ret

00000782 <__vector_11>:
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	2f 93       	push	r18
 78e:	3f 93       	push	r19
 790:	4f 93       	push	r20
 792:	5f 93       	push	r21
 794:	6f 93       	push	r22
 796:	7f 93       	push	r23
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	af 93       	push	r26
 79e:	bf 93       	push	r27
 7a0:	ef 93       	push	r30
 7a2:	ff 93       	push	r31
 7a4:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <Timer0_callBackPtr>
 7a8:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <Timer0_callBackPtr+0x1>
 7ac:	30 97       	sbiw	r30, 0x00	; 0
 7ae:	09 f0       	breq	.+2      	; 0x7b2 <__vector_11+0x30>
 7b0:	09 95       	icall
 7b2:	ff 91       	pop	r31
 7b4:	ef 91       	pop	r30
 7b6:	bf 91       	pop	r27
 7b8:	af 91       	pop	r26
 7ba:	9f 91       	pop	r25
 7bc:	8f 91       	pop	r24
 7be:	7f 91       	pop	r23
 7c0:	6f 91       	pop	r22
 7c2:	5f 91       	pop	r21
 7c4:	4f 91       	pop	r20
 7c6:	3f 91       	pop	r19
 7c8:	2f 91       	pop	r18
 7ca:	0f 90       	pop	r0
 7cc:	0f be       	out	0x3f, r0	; 63
 7ce:	0f 90       	pop	r0
 7d0:	1f 90       	pop	r1
 7d2:	18 95       	reti

000007d4 <__vector_10>:
 7d4:	1f 92       	push	r1
 7d6:	0f 92       	push	r0
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	0f 92       	push	r0
 7dc:	11 24       	eor	r1, r1
 7de:	2f 93       	push	r18
 7e0:	3f 93       	push	r19
 7e2:	4f 93       	push	r20
 7e4:	5f 93       	push	r21
 7e6:	6f 93       	push	r22
 7e8:	7f 93       	push	r23
 7ea:	8f 93       	push	r24
 7ec:	9f 93       	push	r25
 7ee:	af 93       	push	r26
 7f0:	bf 93       	push	r27
 7f2:	ef 93       	push	r30
 7f4:	ff 93       	push	r31
 7f6:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <Timer0_callBackPtr>
 7fa:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <Timer0_callBackPtr+0x1>
 7fe:	30 97       	sbiw	r30, 0x00	; 0
 800:	09 f0       	breq	.+2      	; 0x804 <__vector_10+0x30>
 802:	09 95       	icall
 804:	ff 91       	pop	r31
 806:	ef 91       	pop	r30
 808:	bf 91       	pop	r27
 80a:	af 91       	pop	r26
 80c:	9f 91       	pop	r25
 80e:	8f 91       	pop	r24
 810:	7f 91       	pop	r23
 812:	6f 91       	pop	r22
 814:	5f 91       	pop	r21
 816:	4f 91       	pop	r20
 818:	3f 91       	pop	r19
 81a:	2f 91       	pop	r18
 81c:	0f 90       	pop	r0
 81e:	0f be       	out	0x3f, r0	; 63
 820:	0f 90       	pop	r0
 822:	1f 90       	pop	r1
 824:	18 95       	reti

00000826 <Timer1_Init>:
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	8f 30       	cpi	r24, 0x0F	; 15
 82a:	91 05       	cpc	r25, r1
 82c:	08 f0       	brcs	.+2      	; 0x830 <Timer1_Init+0xa>
 82e:	c7 c0       	rjmp	.+398    	; 0x9be <__stack+0x15f>
 830:	fc 01       	movw	r30, r24
 832:	e9 5c       	subi	r30, 0xC9	; 201
 834:	ff 4f       	sbci	r31, 0xFF	; 255
 836:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__tablejump2__>
 83a:	8f b5       	in	r24, 0x2f	; 47
 83c:	8e 7f       	andi	r24, 0xFE	; 254
 83e:	8f bd       	out	0x2f, r24	; 47
 840:	8f b5       	in	r24, 0x2f	; 47
 842:	8d 7f       	andi	r24, 0xFD	; 253
 844:	8f bd       	out	0x2f, r24	; 47
 846:	8e b5       	in	r24, 0x2e	; 46
 848:	87 7f       	andi	r24, 0xF7	; 247
 84a:	8e bd       	out	0x2e, r24	; 46
 84c:	8e b5       	in	r24, 0x2e	; 46
 84e:	8f 7e       	andi	r24, 0xEF	; 239
 850:	8e bd       	out	0x2e, r24	; 46
 852:	b5 c0       	rjmp	.+362    	; 0x9be <__stack+0x15f>
 854:	8f b5       	in	r24, 0x2f	; 47
 856:	81 60       	ori	r24, 0x01	; 1
 858:	8f bd       	out	0x2f, r24	; 47
 85a:	8f b5       	in	r24, 0x2f	; 47
 85c:	8d 7f       	andi	r24, 0xFD	; 253
 85e:	8f bd       	out	0x2f, r24	; 47
 860:	8e b5       	in	r24, 0x2e	; 46
 862:	87 7f       	andi	r24, 0xF7	; 247
 864:	8e bd       	out	0x2e, r24	; 46
 866:	8e b5       	in	r24, 0x2e	; 46
 868:	8f 7e       	andi	r24, 0xEF	; 239
 86a:	8e bd       	out	0x2e, r24	; 46
 86c:	a8 c0       	rjmp	.+336    	; 0x9be <__stack+0x15f>
 86e:	8f b5       	in	r24, 0x2f	; 47
 870:	8e 7f       	andi	r24, 0xFE	; 254
 872:	8f bd       	out	0x2f, r24	; 47
 874:	8f b5       	in	r24, 0x2f	; 47
 876:	82 60       	ori	r24, 0x02	; 2
 878:	8f bd       	out	0x2f, r24	; 47
 87a:	8e b5       	in	r24, 0x2e	; 46
 87c:	87 7f       	andi	r24, 0xF7	; 247
 87e:	8e bd       	out	0x2e, r24	; 46
 880:	8e b5       	in	r24, 0x2e	; 46
 882:	8f 7e       	andi	r24, 0xEF	; 239
 884:	8e bd       	out	0x2e, r24	; 46
 886:	9b c0       	rjmp	.+310    	; 0x9be <__stack+0x15f>
 888:	8f b5       	in	r24, 0x2f	; 47
 88a:	81 60       	ori	r24, 0x01	; 1
 88c:	8f bd       	out	0x2f, r24	; 47
 88e:	8f b5       	in	r24, 0x2f	; 47
 890:	82 60       	ori	r24, 0x02	; 2
 892:	8f bd       	out	0x2f, r24	; 47
 894:	8e b5       	in	r24, 0x2e	; 46
 896:	87 7f       	andi	r24, 0xF7	; 247
 898:	8e bd       	out	0x2e, r24	; 46
 89a:	8e b5       	in	r24, 0x2e	; 46
 89c:	8f 7e       	andi	r24, 0xEF	; 239
 89e:	8e bd       	out	0x2e, r24	; 46
 8a0:	8e c0       	rjmp	.+284    	; 0x9be <__stack+0x15f>
 8a2:	8f b5       	in	r24, 0x2f	; 47
 8a4:	8e 7f       	andi	r24, 0xFE	; 254
 8a6:	8f bd       	out	0x2f, r24	; 47
 8a8:	8f b5       	in	r24, 0x2f	; 47
 8aa:	8d 7f       	andi	r24, 0xFD	; 253
 8ac:	8f bd       	out	0x2f, r24	; 47
 8ae:	8e b5       	in	r24, 0x2e	; 46
 8b0:	88 60       	ori	r24, 0x08	; 8
 8b2:	8e bd       	out	0x2e, r24	; 46
 8b4:	8e b5       	in	r24, 0x2e	; 46
 8b6:	8f 7e       	andi	r24, 0xEF	; 239
 8b8:	8e bd       	out	0x2e, r24	; 46
 8ba:	81 c0       	rjmp	.+258    	; 0x9be <__stack+0x15f>
 8bc:	8f b5       	in	r24, 0x2f	; 47
 8be:	81 60       	ori	r24, 0x01	; 1
 8c0:	8f bd       	out	0x2f, r24	; 47
 8c2:	8f b5       	in	r24, 0x2f	; 47
 8c4:	8d 7f       	andi	r24, 0xFD	; 253
 8c6:	8f bd       	out	0x2f, r24	; 47
 8c8:	8e b5       	in	r24, 0x2e	; 46
 8ca:	88 60       	ori	r24, 0x08	; 8
 8cc:	8e bd       	out	0x2e, r24	; 46
 8ce:	8e b5       	in	r24, 0x2e	; 46
 8d0:	8f 7e       	andi	r24, 0xEF	; 239
 8d2:	8e bd       	out	0x2e, r24	; 46
 8d4:	74 c0       	rjmp	.+232    	; 0x9be <__stack+0x15f>
 8d6:	8f b5       	in	r24, 0x2f	; 47
 8d8:	8e 7f       	andi	r24, 0xFE	; 254
 8da:	8f bd       	out	0x2f, r24	; 47
 8dc:	8f b5       	in	r24, 0x2f	; 47
 8de:	82 60       	ori	r24, 0x02	; 2
 8e0:	8f bd       	out	0x2f, r24	; 47
 8e2:	8e b5       	in	r24, 0x2e	; 46
 8e4:	88 60       	ori	r24, 0x08	; 8
 8e6:	8e bd       	out	0x2e, r24	; 46
 8e8:	8e b5       	in	r24, 0x2e	; 46
 8ea:	8f 7e       	andi	r24, 0xEF	; 239
 8ec:	8e bd       	out	0x2e, r24	; 46
 8ee:	67 c0       	rjmp	.+206    	; 0x9be <__stack+0x15f>
 8f0:	8f b5       	in	r24, 0x2f	; 47
 8f2:	81 60       	ori	r24, 0x01	; 1
 8f4:	8f bd       	out	0x2f, r24	; 47
 8f6:	8f b5       	in	r24, 0x2f	; 47
 8f8:	82 60       	ori	r24, 0x02	; 2
 8fa:	8f bd       	out	0x2f, r24	; 47
 8fc:	8e b5       	in	r24, 0x2e	; 46
 8fe:	88 60       	ori	r24, 0x08	; 8
 900:	8e bd       	out	0x2e, r24	; 46
 902:	8e b5       	in	r24, 0x2e	; 46
 904:	8f 7e       	andi	r24, 0xEF	; 239
 906:	8e bd       	out	0x2e, r24	; 46
 908:	5a c0       	rjmp	.+180    	; 0x9be <__stack+0x15f>
 90a:	8f b5       	in	r24, 0x2f	; 47
 90c:	8e 7f       	andi	r24, 0xFE	; 254
 90e:	8f bd       	out	0x2f, r24	; 47
 910:	8f b5       	in	r24, 0x2f	; 47
 912:	8d 7f       	andi	r24, 0xFD	; 253
 914:	8f bd       	out	0x2f, r24	; 47
 916:	8e b5       	in	r24, 0x2e	; 46
 918:	87 7f       	andi	r24, 0xF7	; 247
 91a:	8e bd       	out	0x2e, r24	; 46
 91c:	8e b5       	in	r24, 0x2e	; 46
 91e:	80 61       	ori	r24, 0x10	; 16
 920:	8e bd       	out	0x2e, r24	; 46
 922:	4d c0       	rjmp	.+154    	; 0x9be <__stack+0x15f>
 924:	8f b5       	in	r24, 0x2f	; 47
 926:	81 60       	ori	r24, 0x01	; 1
 928:	8f bd       	out	0x2f, r24	; 47
 92a:	8f b5       	in	r24, 0x2f	; 47
 92c:	8d 7f       	andi	r24, 0xFD	; 253
 92e:	8f bd       	out	0x2f, r24	; 47
 930:	8e b5       	in	r24, 0x2e	; 46
 932:	87 7f       	andi	r24, 0xF7	; 247
 934:	8e bd       	out	0x2e, r24	; 46
 936:	8e b5       	in	r24, 0x2e	; 46
 938:	80 61       	ori	r24, 0x10	; 16
 93a:	8e bd       	out	0x2e, r24	; 46
 93c:	40 c0       	rjmp	.+128    	; 0x9be <__stack+0x15f>
 93e:	8f b5       	in	r24, 0x2f	; 47
 940:	8e 7f       	andi	r24, 0xFE	; 254
 942:	8f bd       	out	0x2f, r24	; 47
 944:	8f b5       	in	r24, 0x2f	; 47
 946:	82 60       	ori	r24, 0x02	; 2
 948:	8f bd       	out	0x2f, r24	; 47
 94a:	8e b5       	in	r24, 0x2e	; 46
 94c:	87 7f       	andi	r24, 0xF7	; 247
 94e:	8e bd       	out	0x2e, r24	; 46
 950:	8e b5       	in	r24, 0x2e	; 46
 952:	80 61       	ori	r24, 0x10	; 16
 954:	8e bd       	out	0x2e, r24	; 46
 956:	33 c0       	rjmp	.+102    	; 0x9be <__stack+0x15f>
 958:	8f b5       	in	r24, 0x2f	; 47
 95a:	81 60       	ori	r24, 0x01	; 1
 95c:	8f bd       	out	0x2f, r24	; 47
 95e:	8f b5       	in	r24, 0x2f	; 47
 960:	82 60       	ori	r24, 0x02	; 2
 962:	8f bd       	out	0x2f, r24	; 47
 964:	8e b5       	in	r24, 0x2e	; 46
 966:	87 7f       	andi	r24, 0xF7	; 247
 968:	8e bd       	out	0x2e, r24	; 46
 96a:	8e b5       	in	r24, 0x2e	; 46
 96c:	80 61       	ori	r24, 0x10	; 16
 96e:	8e bd       	out	0x2e, r24	; 46
 970:	26 c0       	rjmp	.+76     	; 0x9be <__stack+0x15f>
 972:	8f b5       	in	r24, 0x2f	; 47
 974:	8e 7f       	andi	r24, 0xFE	; 254
 976:	8f bd       	out	0x2f, r24	; 47
 978:	8f b5       	in	r24, 0x2f	; 47
 97a:	8d 7f       	andi	r24, 0xFD	; 253
 97c:	8f bd       	out	0x2f, r24	; 47
 97e:	8e b5       	in	r24, 0x2e	; 46
 980:	88 60       	ori	r24, 0x08	; 8
 982:	8e bd       	out	0x2e, r24	; 46
 984:	8e b5       	in	r24, 0x2e	; 46
 986:	80 61       	ori	r24, 0x10	; 16
 988:	8e bd       	out	0x2e, r24	; 46
 98a:	19 c0       	rjmp	.+50     	; 0x9be <__stack+0x15f>
 98c:	8f b5       	in	r24, 0x2f	; 47
 98e:	8e 7f       	andi	r24, 0xFE	; 254
 990:	8f bd       	out	0x2f, r24	; 47
 992:	8f b5       	in	r24, 0x2f	; 47
 994:	82 60       	ori	r24, 0x02	; 2
 996:	8f bd       	out	0x2f, r24	; 47
 998:	8e b5       	in	r24, 0x2e	; 46
 99a:	88 60       	ori	r24, 0x08	; 8
 99c:	8e bd       	out	0x2e, r24	; 46
 99e:	8e b5       	in	r24, 0x2e	; 46
 9a0:	80 61       	ori	r24, 0x10	; 16
 9a2:	8e bd       	out	0x2e, r24	; 46
 9a4:	0c c0       	rjmp	.+24     	; 0x9be <__stack+0x15f>
 9a6:	8f b5       	in	r24, 0x2f	; 47
 9a8:	81 60       	ori	r24, 0x01	; 1
 9aa:	8f bd       	out	0x2f, r24	; 47
 9ac:	8f b5       	in	r24, 0x2f	; 47
 9ae:	82 60       	ori	r24, 0x02	; 2
 9b0:	8f bd       	out	0x2f, r24	; 47
 9b2:	8e b5       	in	r24, 0x2e	; 46
 9b4:	88 60       	ori	r24, 0x08	; 8
 9b6:	8e bd       	out	0x2e, r24	; 46
 9b8:	8e b5       	in	r24, 0x2e	; 46
 9ba:	80 61       	ori	r24, 0x10	; 16
 9bc:	8e bd       	out	0x2e, r24	; 46
 9be:	41 30       	cpi	r20, 0x01	; 1
 9c0:	69 f0       	breq	.+26     	; 0x9dc <__stack+0x17d>
 9c2:	28 f0       	brcs	.+10     	; 0x9ce <__stack+0x16f>
 9c4:	42 30       	cpi	r20, 0x02	; 2
 9c6:	c1 f0       	breq	.+48     	; 0x9f8 <__stack+0x199>
 9c8:	43 30       	cpi	r20, 0x03	; 3
 9ca:	79 f0       	breq	.+30     	; 0x9ea <__stack+0x18b>
 9cc:	1b c0       	rjmp	.+54     	; 0xa04 <__stack+0x1a5>
 9ce:	8f b5       	in	r24, 0x2f	; 47
 9d0:	8f 7b       	andi	r24, 0xBF	; 191
 9d2:	8f bd       	out	0x2f, r24	; 47
 9d4:	8f b5       	in	r24, 0x2f	; 47
 9d6:	8f 77       	andi	r24, 0x7F	; 127
 9d8:	8f bd       	out	0x2f, r24	; 47
 9da:	14 c0       	rjmp	.+40     	; 0xa04 <__stack+0x1a5>
 9dc:	8f b5       	in	r24, 0x2f	; 47
 9de:	80 64       	ori	r24, 0x40	; 64
 9e0:	8f bd       	out	0x2f, r24	; 47
 9e2:	8f b5       	in	r24, 0x2f	; 47
 9e4:	8f 77       	andi	r24, 0x7F	; 127
 9e6:	8f bd       	out	0x2f, r24	; 47
 9e8:	0d c0       	rjmp	.+26     	; 0xa04 <__stack+0x1a5>
 9ea:	8f b5       	in	r24, 0x2f	; 47
 9ec:	8f 7b       	andi	r24, 0xBF	; 191
 9ee:	8f bd       	out	0x2f, r24	; 47
 9f0:	8f b5       	in	r24, 0x2f	; 47
 9f2:	80 68       	ori	r24, 0x80	; 128
 9f4:	8f bd       	out	0x2f, r24	; 47
 9f6:	06 c0       	rjmp	.+12     	; 0xa04 <__stack+0x1a5>
 9f8:	8f b5       	in	r24, 0x2f	; 47
 9fa:	80 64       	ori	r24, 0x40	; 64
 9fc:	8f bd       	out	0x2f, r24	; 47
 9fe:	8f b5       	in	r24, 0x2f	; 47
 a00:	80 68       	ori	r24, 0x80	; 128
 a02:	8f bd       	out	0x2f, r24	; 47
 a04:	21 30       	cpi	r18, 0x01	; 1
 a06:	69 f0       	breq	.+26     	; 0xa22 <__stack+0x1c3>
 a08:	28 f0       	brcs	.+10     	; 0xa14 <__stack+0x1b5>
 a0a:	22 30       	cpi	r18, 0x02	; 2
 a0c:	c1 f0       	breq	.+48     	; 0xa3e <__stack+0x1df>
 a0e:	23 30       	cpi	r18, 0x03	; 3
 a10:	79 f0       	breq	.+30     	; 0xa30 <__stack+0x1d1>
 a12:	1b c0       	rjmp	.+54     	; 0xa4a <__stack+0x1eb>
 a14:	8f b5       	in	r24, 0x2f	; 47
 a16:	8f 7e       	andi	r24, 0xEF	; 239
 a18:	8f bd       	out	0x2f, r24	; 47
 a1a:	8f b5       	in	r24, 0x2f	; 47
 a1c:	8f 7d       	andi	r24, 0xDF	; 223
 a1e:	8f bd       	out	0x2f, r24	; 47
 a20:	14 c0       	rjmp	.+40     	; 0xa4a <__stack+0x1eb>
 a22:	8f b5       	in	r24, 0x2f	; 47
 a24:	80 61       	ori	r24, 0x10	; 16
 a26:	8f bd       	out	0x2f, r24	; 47
 a28:	8f b5       	in	r24, 0x2f	; 47
 a2a:	8f 7d       	andi	r24, 0xDF	; 223
 a2c:	8f bd       	out	0x2f, r24	; 47
 a2e:	0d c0       	rjmp	.+26     	; 0xa4a <__stack+0x1eb>
 a30:	8f b5       	in	r24, 0x2f	; 47
 a32:	8f 7e       	andi	r24, 0xEF	; 239
 a34:	8f bd       	out	0x2f, r24	; 47
 a36:	8f b5       	in	r24, 0x2f	; 47
 a38:	80 62       	ori	r24, 0x20	; 32
 a3a:	8f bd       	out	0x2f, r24	; 47
 a3c:	06 c0       	rjmp	.+12     	; 0xa4a <__stack+0x1eb>
 a3e:	8f b5       	in	r24, 0x2f	; 47
 a40:	80 61       	ori	r24, 0x10	; 16
 a42:	8f bd       	out	0x2f, r24	; 47
 a44:	8f b5       	in	r24, 0x2f	; 47
 a46:	80 62       	ori	r24, 0x20	; 32
 a48:	8f bd       	out	0x2f, r24	; 47
 a4a:	8e b5       	in	r24, 0x2e	; 46
 a4c:	8e 7f       	andi	r24, 0xFE	; 254
 a4e:	8e bd       	out	0x2e, r24	; 46
 a50:	8e b5       	in	r24, 0x2e	; 46
 a52:	8d 7f       	andi	r24, 0xFD	; 253
 a54:	8e bd       	out	0x2e, r24	; 46
 a56:	8e b5       	in	r24, 0x2e	; 46
 a58:	8b 7f       	andi	r24, 0xFB	; 251
 a5a:	8e bd       	out	0x2e, r24	; 46
 a5c:	8e b5       	in	r24, 0x2e	; 46
 a5e:	68 2b       	or	r22, r24
 a60:	6e bd       	out	0x2e, r22	; 46
 a62:	08 95       	ret

00000a64 <__vector_9>:
 a64:	1f 92       	push	r1
 a66:	0f 92       	push	r0
 a68:	0f b6       	in	r0, 0x3f	; 63
 a6a:	0f 92       	push	r0
 a6c:	11 24       	eor	r1, r1
 a6e:	2f 93       	push	r18
 a70:	3f 93       	push	r19
 a72:	4f 93       	push	r20
 a74:	5f 93       	push	r21
 a76:	6f 93       	push	r22
 a78:	7f 93       	push	r23
 a7a:	8f 93       	push	r24
 a7c:	9f 93       	push	r25
 a7e:	af 93       	push	r26
 a80:	bf 93       	push	r27
 a82:	ef 93       	push	r30
 a84:	ff 93       	push	r31
 a86:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <Timer1_OVF_callBackPtr>
 a8a:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <Timer1_OVF_callBackPtr+0x1>
 a8e:	30 97       	sbiw	r30, 0x00	; 0
 a90:	09 f0       	breq	.+2      	; 0xa94 <__vector_9+0x30>
 a92:	09 95       	icall
 a94:	ff 91       	pop	r31
 a96:	ef 91       	pop	r30
 a98:	bf 91       	pop	r27
 a9a:	af 91       	pop	r26
 a9c:	9f 91       	pop	r25
 a9e:	8f 91       	pop	r24
 aa0:	7f 91       	pop	r23
 aa2:	6f 91       	pop	r22
 aa4:	5f 91       	pop	r21
 aa6:	4f 91       	pop	r20
 aa8:	3f 91       	pop	r19
 aaa:	2f 91       	pop	r18
 aac:	0f 90       	pop	r0
 aae:	0f be       	out	0x3f, r0	; 63
 ab0:	0f 90       	pop	r0
 ab2:	1f 90       	pop	r1
 ab4:	18 95       	reti

00000ab6 <__vector_7>:
 ab6:	1f 92       	push	r1
 ab8:	0f 92       	push	r0
 aba:	0f b6       	in	r0, 0x3f	; 63
 abc:	0f 92       	push	r0
 abe:	11 24       	eor	r1, r1
 ac0:	2f 93       	push	r18
 ac2:	3f 93       	push	r19
 ac4:	4f 93       	push	r20
 ac6:	5f 93       	push	r21
 ac8:	6f 93       	push	r22
 aca:	7f 93       	push	r23
 acc:	8f 93       	push	r24
 ace:	9f 93       	push	r25
 ad0:	af 93       	push	r26
 ad2:	bf 93       	push	r27
 ad4:	ef 93       	push	r30
 ad6:	ff 93       	push	r31
 ad8:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Timer1_OCA_callBackPtr>
 adc:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Timer1_OCA_callBackPtr+0x1>
 ae0:	30 97       	sbiw	r30, 0x00	; 0
 ae2:	09 f0       	breq	.+2      	; 0xae6 <__vector_7+0x30>
 ae4:	09 95       	icall
 ae6:	ff 91       	pop	r31
 ae8:	ef 91       	pop	r30
 aea:	bf 91       	pop	r27
 aec:	af 91       	pop	r26
 aee:	9f 91       	pop	r25
 af0:	8f 91       	pop	r24
 af2:	7f 91       	pop	r23
 af4:	6f 91       	pop	r22
 af6:	5f 91       	pop	r21
 af8:	4f 91       	pop	r20
 afa:	3f 91       	pop	r19
 afc:	2f 91       	pop	r18
 afe:	0f 90       	pop	r0
 b00:	0f be       	out	0x3f, r0	; 63
 b02:	0f 90       	pop	r0
 b04:	1f 90       	pop	r1
 b06:	18 95       	reti

00000b08 <__vector_8>:
 b08:	1f 92       	push	r1
 b0a:	0f 92       	push	r0
 b0c:	0f b6       	in	r0, 0x3f	; 63
 b0e:	0f 92       	push	r0
 b10:	11 24       	eor	r1, r1
 b12:	2f 93       	push	r18
 b14:	3f 93       	push	r19
 b16:	4f 93       	push	r20
 b18:	5f 93       	push	r21
 b1a:	6f 93       	push	r22
 b1c:	7f 93       	push	r23
 b1e:	8f 93       	push	r24
 b20:	9f 93       	push	r25
 b22:	af 93       	push	r26
 b24:	bf 93       	push	r27
 b26:	ef 93       	push	r30
 b28:	ff 93       	push	r31
 b2a:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Timer1_OCA_callBackPtr>
 b2e:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Timer1_OCA_callBackPtr+0x1>
 b32:	30 97       	sbiw	r30, 0x00	; 0
 b34:	09 f0       	breq	.+2      	; 0xb38 <__vector_8+0x30>
 b36:	09 95       	icall
 b38:	ff 91       	pop	r31
 b3a:	ef 91       	pop	r30
 b3c:	bf 91       	pop	r27
 b3e:	af 91       	pop	r26
 b40:	9f 91       	pop	r25
 b42:	8f 91       	pop	r24
 b44:	7f 91       	pop	r23
 b46:	6f 91       	pop	r22
 b48:	5f 91       	pop	r21
 b4a:	4f 91       	pop	r20
 b4c:	3f 91       	pop	r19
 b4e:	2f 91       	pop	r18
 b50:	0f 90       	pop	r0
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	0f 90       	pop	r0
 b56:	1f 90       	pop	r1
 b58:	18 95       	reti

00000b5a <__vector_6>:
 b5a:	1f 92       	push	r1
 b5c:	0f 92       	push	r0
 b5e:	0f b6       	in	r0, 0x3f	; 63
 b60:	0f 92       	push	r0
 b62:	11 24       	eor	r1, r1
 b64:	2f 93       	push	r18
 b66:	3f 93       	push	r19
 b68:	4f 93       	push	r20
 b6a:	5f 93       	push	r21
 b6c:	6f 93       	push	r22
 b6e:	7f 93       	push	r23
 b70:	8f 93       	push	r24
 b72:	9f 93       	push	r25
 b74:	af 93       	push	r26
 b76:	bf 93       	push	r27
 b78:	ef 93       	push	r30
 b7a:	ff 93       	push	r31
 b7c:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Timer1_ICU_callBackPtr>
 b80:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Timer1_ICU_callBackPtr+0x1>
 b84:	30 97       	sbiw	r30, 0x00	; 0
 b86:	09 f0       	breq	.+2      	; 0xb8a <__vector_6+0x30>
 b88:	09 95       	icall
 b8a:	ff 91       	pop	r31
 b8c:	ef 91       	pop	r30
 b8e:	bf 91       	pop	r27
 b90:	af 91       	pop	r26
 b92:	9f 91       	pop	r25
 b94:	8f 91       	pop	r24
 b96:	7f 91       	pop	r23
 b98:	6f 91       	pop	r22
 b9a:	5f 91       	pop	r21
 b9c:	4f 91       	pop	r20
 b9e:	3f 91       	pop	r19
 ba0:	2f 91       	pop	r18
 ba2:	0f 90       	pop	r0
 ba4:	0f be       	out	0x3f, r0	; 63
 ba6:	0f 90       	pop	r0
 ba8:	1f 90       	pop	r1
 baa:	18 95       	reti

00000bac <__vector_5>:
}

/************************* Timer 2 ISR functions ************************/
ISR(TIMER2_OVF_vect)
{
 bac:	1f 92       	push	r1
 bae:	0f 92       	push	r0
 bb0:	0f b6       	in	r0, 0x3f	; 63
 bb2:	0f 92       	push	r0
 bb4:	11 24       	eor	r1, r1
 bb6:	2f 93       	push	r18
 bb8:	3f 93       	push	r19
 bba:	4f 93       	push	r20
 bbc:	5f 93       	push	r21
 bbe:	6f 93       	push	r22
 bc0:	7f 93       	push	r23
 bc2:	8f 93       	push	r24
 bc4:	9f 93       	push	r25
 bc6:	af 93       	push	r26
 bc8:	bf 93       	push	r27
 bca:	ef 93       	push	r30
 bcc:	ff 93       	push	r31
	if(Timer2_callBackPtr != NULLPTR)
 bce:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <Timer2_callBackPtr>
 bd2:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <Timer2_callBackPtr+0x1>
 bd6:	30 97       	sbiw	r30, 0x00	; 0
 bd8:	09 f0       	breq	.+2      	; 0xbdc <__vector_5+0x30>
	{
		Timer2_callBackPtr();
 bda:	09 95       	icall
	}
}
 bdc:	ff 91       	pop	r31
 bde:	ef 91       	pop	r30
 be0:	bf 91       	pop	r27
 be2:	af 91       	pop	r26
 be4:	9f 91       	pop	r25
 be6:	8f 91       	pop	r24
 be8:	7f 91       	pop	r23
 bea:	6f 91       	pop	r22
 bec:	5f 91       	pop	r21
 bee:	4f 91       	pop	r20
 bf0:	3f 91       	pop	r19
 bf2:	2f 91       	pop	r18
 bf4:	0f 90       	pop	r0
 bf6:	0f be       	out	0x3f, r0	; 63
 bf8:	0f 90       	pop	r0
 bfa:	1f 90       	pop	r1
 bfc:	18 95       	reti

00000bfe <__vector_4>:
ISR(TIMER2_COMP_vect)
{
 bfe:	1f 92       	push	r1
 c00:	0f 92       	push	r0
 c02:	0f b6       	in	r0, 0x3f	; 63
 c04:	0f 92       	push	r0
 c06:	11 24       	eor	r1, r1
 c08:	2f 93       	push	r18
 c0a:	3f 93       	push	r19
 c0c:	4f 93       	push	r20
 c0e:	5f 93       	push	r21
 c10:	6f 93       	push	r22
 c12:	7f 93       	push	r23
 c14:	8f 93       	push	r24
 c16:	9f 93       	push	r25
 c18:	af 93       	push	r26
 c1a:	bf 93       	push	r27
 c1c:	ef 93       	push	r30
 c1e:	ff 93       	push	r31
	if(Timer2_callBackPtr != NULLPTR)
 c20:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <Timer2_callBackPtr>
 c24:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <Timer2_callBackPtr+0x1>
 c28:	30 97       	sbiw	r30, 0x00	; 0
 c2a:	09 f0       	breq	.+2      	; 0xc2e <__vector_4+0x30>
	{
		Timer2_callBackPtr();
 c2c:	09 95       	icall
	}
}
 c2e:	ff 91       	pop	r31
 c30:	ef 91       	pop	r30
 c32:	bf 91       	pop	r27
 c34:	af 91       	pop	r26
 c36:	9f 91       	pop	r25
 c38:	8f 91       	pop	r24
 c3a:	7f 91       	pop	r23
 c3c:	6f 91       	pop	r22
 c3e:	5f 91       	pop	r21
 c40:	4f 91       	pop	r20
 c42:	3f 91       	pop	r19
 c44:	2f 91       	pop	r18
 c46:	0f 90       	pop	r0
 c48:	0f be       	out	0x3f, r0	; 63
 c4a:	0f 90       	pop	r0
 c4c:	1f 90       	pop	r1
 c4e:	18 95       	reti

00000c50 <__subsf3>:
 c50:	50 58       	subi	r21, 0x80	; 128

00000c52 <__addsf3>:
 c52:	bb 27       	eor	r27, r27
 c54:	aa 27       	eor	r26, r26
 c56:	0e 94 40 06 	call	0xc80	; 0xc80 <__addsf3x>
 c5a:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <__fp_round>
 c5e:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fp_pscA>
 c62:	38 f0       	brcs	.+14     	; 0xc72 <__addsf3+0x20>
 c64:	0e 94 83 07 	call	0xf06	; 0xf06 <__fp_pscB>
 c68:	20 f0       	brcs	.+8      	; 0xc72 <__addsf3+0x20>
 c6a:	39 f4       	brne	.+14     	; 0xc7a <__addsf3+0x28>
 c6c:	9f 3f       	cpi	r25, 0xFF	; 255
 c6e:	19 f4       	brne	.+6      	; 0xc76 <__addsf3+0x24>
 c70:	26 f4       	brtc	.+8      	; 0xc7a <__addsf3+0x28>
 c72:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_nan>
 c76:	0e f4       	brtc	.+2      	; 0xc7a <__addsf3+0x28>
 c78:	e0 95       	com	r30
 c7a:	e7 fb       	bst	r30, 7
 c7c:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__fp_inf>

00000c80 <__addsf3x>:
 c80:	e9 2f       	mov	r30, r25
 c82:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fp_split3>
 c86:	58 f3       	brcs	.-42     	; 0xc5e <__addsf3+0xc>
 c88:	ba 17       	cp	r27, r26
 c8a:	62 07       	cpc	r22, r18
 c8c:	73 07       	cpc	r23, r19
 c8e:	84 07       	cpc	r24, r20
 c90:	95 07       	cpc	r25, r21
 c92:	20 f0       	brcs	.+8      	; 0xc9c <__addsf3x+0x1c>
 c94:	79 f4       	brne	.+30     	; 0xcb4 <__addsf3x+0x34>
 c96:	a6 f5       	brtc	.+104    	; 0xd00 <__addsf3x+0x80>
 c98:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_zero>
 c9c:	0e f4       	brtc	.+2      	; 0xca0 <__addsf3x+0x20>
 c9e:	e0 95       	com	r30
 ca0:	0b 2e       	mov	r0, r27
 ca2:	ba 2f       	mov	r27, r26
 ca4:	a0 2d       	mov	r26, r0
 ca6:	0b 01       	movw	r0, r22
 ca8:	b9 01       	movw	r22, r18
 caa:	90 01       	movw	r18, r0
 cac:	0c 01       	movw	r0, r24
 cae:	ca 01       	movw	r24, r20
 cb0:	a0 01       	movw	r20, r0
 cb2:	11 24       	eor	r1, r1
 cb4:	ff 27       	eor	r31, r31
 cb6:	59 1b       	sub	r21, r25
 cb8:	99 f0       	breq	.+38     	; 0xce0 <__addsf3x+0x60>
 cba:	59 3f       	cpi	r21, 0xF9	; 249
 cbc:	50 f4       	brcc	.+20     	; 0xcd2 <__addsf3x+0x52>
 cbe:	50 3e       	cpi	r21, 0xE0	; 224
 cc0:	68 f1       	brcs	.+90     	; 0xd1c <__addsf3x+0x9c>
 cc2:	1a 16       	cp	r1, r26
 cc4:	f0 40       	sbci	r31, 0x00	; 0
 cc6:	a2 2f       	mov	r26, r18
 cc8:	23 2f       	mov	r18, r19
 cca:	34 2f       	mov	r19, r20
 ccc:	44 27       	eor	r20, r20
 cce:	58 5f       	subi	r21, 0xF8	; 248
 cd0:	f3 cf       	rjmp	.-26     	; 0xcb8 <__addsf3x+0x38>
 cd2:	46 95       	lsr	r20
 cd4:	37 95       	ror	r19
 cd6:	27 95       	ror	r18
 cd8:	a7 95       	ror	r26
 cda:	f0 40       	sbci	r31, 0x00	; 0
 cdc:	53 95       	inc	r21
 cde:	c9 f7       	brne	.-14     	; 0xcd2 <__addsf3x+0x52>
 ce0:	7e f4       	brtc	.+30     	; 0xd00 <__addsf3x+0x80>
 ce2:	1f 16       	cp	r1, r31
 ce4:	ba 0b       	sbc	r27, r26
 ce6:	62 0b       	sbc	r22, r18
 ce8:	73 0b       	sbc	r23, r19
 cea:	84 0b       	sbc	r24, r20
 cec:	ba f0       	brmi	.+46     	; 0xd1c <__addsf3x+0x9c>
 cee:	91 50       	subi	r25, 0x01	; 1
 cf0:	a1 f0       	breq	.+40     	; 0xd1a <__addsf3x+0x9a>
 cf2:	ff 0f       	add	r31, r31
 cf4:	bb 1f       	adc	r27, r27
 cf6:	66 1f       	adc	r22, r22
 cf8:	77 1f       	adc	r23, r23
 cfa:	88 1f       	adc	r24, r24
 cfc:	c2 f7       	brpl	.-16     	; 0xcee <__addsf3x+0x6e>
 cfe:	0e c0       	rjmp	.+28     	; 0xd1c <__addsf3x+0x9c>
 d00:	ba 0f       	add	r27, r26
 d02:	62 1f       	adc	r22, r18
 d04:	73 1f       	adc	r23, r19
 d06:	84 1f       	adc	r24, r20
 d08:	48 f4       	brcc	.+18     	; 0xd1c <__addsf3x+0x9c>
 d0a:	87 95       	ror	r24
 d0c:	77 95       	ror	r23
 d0e:	67 95       	ror	r22
 d10:	b7 95       	ror	r27
 d12:	f7 95       	ror	r31
 d14:	9e 3f       	cpi	r25, 0xFE	; 254
 d16:	08 f0       	brcs	.+2      	; 0xd1a <__addsf3x+0x9a>
 d18:	b0 cf       	rjmp	.-160    	; 0xc7a <__addsf3+0x28>
 d1a:	93 95       	inc	r25
 d1c:	88 0f       	add	r24, r24
 d1e:	08 f0       	brcs	.+2      	; 0xd22 <__addsf3x+0xa2>
 d20:	99 27       	eor	r25, r25
 d22:	ee 0f       	add	r30, r30
 d24:	97 95       	ror	r25
 d26:	87 95       	ror	r24
 d28:	08 95       	ret

00000d2a <__divsf3>:
 d2a:	0e 94 a9 06 	call	0xd52	; 0xd52 <__divsf3x>
 d2e:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <__fp_round>
 d32:	0e 94 83 07 	call	0xf06	; 0xf06 <__fp_pscB>
 d36:	58 f0       	brcs	.+22     	; 0xd4e <__divsf3+0x24>
 d38:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fp_pscA>
 d3c:	40 f0       	brcs	.+16     	; 0xd4e <__divsf3+0x24>
 d3e:	29 f4       	brne	.+10     	; 0xd4a <__divsf3+0x20>
 d40:	5f 3f       	cpi	r21, 0xFF	; 255
 d42:	29 f0       	breq	.+10     	; 0xd4e <__divsf3+0x24>
 d44:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__fp_inf>
 d48:	51 11       	cpse	r21, r1
 d4a:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_szero>
 d4e:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_nan>

00000d52 <__divsf3x>:
 d52:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fp_split3>
 d56:	68 f3       	brcs	.-38     	; 0xd32 <__divsf3+0x8>

00000d58 <__divsf3_pse>:
 d58:	99 23       	and	r25, r25
 d5a:	b1 f3       	breq	.-20     	; 0xd48 <__divsf3+0x1e>
 d5c:	55 23       	and	r21, r21
 d5e:	91 f3       	breq	.-28     	; 0xd44 <__divsf3+0x1a>
 d60:	95 1b       	sub	r25, r21
 d62:	55 0b       	sbc	r21, r21
 d64:	bb 27       	eor	r27, r27
 d66:	aa 27       	eor	r26, r26
 d68:	62 17       	cp	r22, r18
 d6a:	73 07       	cpc	r23, r19
 d6c:	84 07       	cpc	r24, r20
 d6e:	38 f0       	brcs	.+14     	; 0xd7e <__divsf3_pse+0x26>
 d70:	9f 5f       	subi	r25, 0xFF	; 255
 d72:	5f 4f       	sbci	r21, 0xFF	; 255
 d74:	22 0f       	add	r18, r18
 d76:	33 1f       	adc	r19, r19
 d78:	44 1f       	adc	r20, r20
 d7a:	aa 1f       	adc	r26, r26
 d7c:	a9 f3       	breq	.-22     	; 0xd68 <__divsf3_pse+0x10>
 d7e:	35 d0       	rcall	.+106    	; 0xdea <__divsf3_pse+0x92>
 d80:	0e 2e       	mov	r0, r30
 d82:	3a f0       	brmi	.+14     	; 0xd92 <__divsf3_pse+0x3a>
 d84:	e0 e8       	ldi	r30, 0x80	; 128
 d86:	32 d0       	rcall	.+100    	; 0xdec <__divsf3_pse+0x94>
 d88:	91 50       	subi	r25, 0x01	; 1
 d8a:	50 40       	sbci	r21, 0x00	; 0
 d8c:	e6 95       	lsr	r30
 d8e:	00 1c       	adc	r0, r0
 d90:	ca f7       	brpl	.-14     	; 0xd84 <__divsf3_pse+0x2c>
 d92:	2b d0       	rcall	.+86     	; 0xdea <__divsf3_pse+0x92>
 d94:	fe 2f       	mov	r31, r30
 d96:	29 d0       	rcall	.+82     	; 0xdea <__divsf3_pse+0x92>
 d98:	66 0f       	add	r22, r22
 d9a:	77 1f       	adc	r23, r23
 d9c:	88 1f       	adc	r24, r24
 d9e:	bb 1f       	adc	r27, r27
 da0:	26 17       	cp	r18, r22
 da2:	37 07       	cpc	r19, r23
 da4:	48 07       	cpc	r20, r24
 da6:	ab 07       	cpc	r26, r27
 da8:	b0 e8       	ldi	r27, 0x80	; 128
 daa:	09 f0       	breq	.+2      	; 0xdae <__divsf3_pse+0x56>
 dac:	bb 0b       	sbc	r27, r27
 dae:	80 2d       	mov	r24, r0
 db0:	bf 01       	movw	r22, r30
 db2:	ff 27       	eor	r31, r31
 db4:	93 58       	subi	r25, 0x83	; 131
 db6:	5f 4f       	sbci	r21, 0xFF	; 255
 db8:	3a f0       	brmi	.+14     	; 0xdc8 <__divsf3_pse+0x70>
 dba:	9e 3f       	cpi	r25, 0xFE	; 254
 dbc:	51 05       	cpc	r21, r1
 dbe:	78 f0       	brcs	.+30     	; 0xdde <__divsf3_pse+0x86>
 dc0:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__fp_inf>
 dc4:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_szero>
 dc8:	5f 3f       	cpi	r21, 0xFF	; 255
 dca:	e4 f3       	brlt	.-8      	; 0xdc4 <__divsf3_pse+0x6c>
 dcc:	98 3e       	cpi	r25, 0xE8	; 232
 dce:	d4 f3       	brlt	.-12     	; 0xdc4 <__divsf3_pse+0x6c>
 dd0:	86 95       	lsr	r24
 dd2:	77 95       	ror	r23
 dd4:	67 95       	ror	r22
 dd6:	b7 95       	ror	r27
 dd8:	f7 95       	ror	r31
 dda:	9f 5f       	subi	r25, 0xFF	; 255
 ddc:	c9 f7       	brne	.-14     	; 0xdd0 <__divsf3_pse+0x78>
 dde:	88 0f       	add	r24, r24
 de0:	91 1d       	adc	r25, r1
 de2:	96 95       	lsr	r25
 de4:	87 95       	ror	r24
 de6:	97 f9       	bld	r25, 7
 de8:	08 95       	ret
 dea:	e1 e0       	ldi	r30, 0x01	; 1
 dec:	66 0f       	add	r22, r22
 dee:	77 1f       	adc	r23, r23
 df0:	88 1f       	adc	r24, r24
 df2:	bb 1f       	adc	r27, r27
 df4:	62 17       	cp	r22, r18
 df6:	73 07       	cpc	r23, r19
 df8:	84 07       	cpc	r24, r20
 dfa:	ba 07       	cpc	r27, r26
 dfc:	20 f0       	brcs	.+8      	; 0xe06 <__divsf3_pse+0xae>
 dfe:	62 1b       	sub	r22, r18
 e00:	73 0b       	sbc	r23, r19
 e02:	84 0b       	sbc	r24, r20
 e04:	ba 0b       	sbc	r27, r26
 e06:	ee 1f       	adc	r30, r30
 e08:	88 f7       	brcc	.-30     	; 0xdec <__divsf3_pse+0x94>
 e0a:	e0 95       	com	r30
 e0c:	08 95       	ret

00000e0e <__fixunssfsi>:
 e0e:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_splitA>
 e12:	88 f0       	brcs	.+34     	; 0xe36 <__fixunssfsi+0x28>
 e14:	9f 57       	subi	r25, 0x7F	; 127
 e16:	98 f0       	brcs	.+38     	; 0xe3e <__fixunssfsi+0x30>
 e18:	b9 2f       	mov	r27, r25
 e1a:	99 27       	eor	r25, r25
 e1c:	b7 51       	subi	r27, 0x17	; 23
 e1e:	b0 f0       	brcs	.+44     	; 0xe4c <__fixunssfsi+0x3e>
 e20:	e1 f0       	breq	.+56     	; 0xe5a <__fixunssfsi+0x4c>
 e22:	66 0f       	add	r22, r22
 e24:	77 1f       	adc	r23, r23
 e26:	88 1f       	adc	r24, r24
 e28:	99 1f       	adc	r25, r25
 e2a:	1a f0       	brmi	.+6      	; 0xe32 <__fixunssfsi+0x24>
 e2c:	ba 95       	dec	r27
 e2e:	c9 f7       	brne	.-14     	; 0xe22 <__fixunssfsi+0x14>
 e30:	14 c0       	rjmp	.+40     	; 0xe5a <__fixunssfsi+0x4c>
 e32:	b1 30       	cpi	r27, 0x01	; 1
 e34:	91 f0       	breq	.+36     	; 0xe5a <__fixunssfsi+0x4c>
 e36:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fp_zero>
 e3a:	b1 e0       	ldi	r27, 0x01	; 1
 e3c:	08 95       	ret
 e3e:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_zero>
 e42:	67 2f       	mov	r22, r23
 e44:	78 2f       	mov	r23, r24
 e46:	88 27       	eor	r24, r24
 e48:	b8 5f       	subi	r27, 0xF8	; 248
 e4a:	39 f0       	breq	.+14     	; 0xe5a <__fixunssfsi+0x4c>
 e4c:	b9 3f       	cpi	r27, 0xF9	; 249
 e4e:	cc f3       	brlt	.-14     	; 0xe42 <__fixunssfsi+0x34>
 e50:	86 95       	lsr	r24
 e52:	77 95       	ror	r23
 e54:	67 95       	ror	r22
 e56:	b3 95       	inc	r27
 e58:	d9 f7       	brne	.-10     	; 0xe50 <__fixunssfsi+0x42>
 e5a:	3e f4       	brtc	.+14     	; 0xe6a <__fixunssfsi+0x5c>
 e5c:	90 95       	com	r25
 e5e:	80 95       	com	r24
 e60:	70 95       	com	r23
 e62:	61 95       	neg	r22
 e64:	7f 4f       	sbci	r23, 0xFF	; 255
 e66:	8f 4f       	sbci	r24, 0xFF	; 255
 e68:	9f 4f       	sbci	r25, 0xFF	; 255
 e6a:	08 95       	ret

00000e6c <__floatunsisf>:
 e6c:	e8 94       	clt
 e6e:	09 c0       	rjmp	.+18     	; 0xe82 <__floatsisf+0x12>

00000e70 <__floatsisf>:
 e70:	97 fb       	bst	r25, 7
 e72:	3e f4       	brtc	.+14     	; 0xe82 <__floatsisf+0x12>
 e74:	90 95       	com	r25
 e76:	80 95       	com	r24
 e78:	70 95       	com	r23
 e7a:	61 95       	neg	r22
 e7c:	7f 4f       	sbci	r23, 0xFF	; 255
 e7e:	8f 4f       	sbci	r24, 0xFF	; 255
 e80:	9f 4f       	sbci	r25, 0xFF	; 255
 e82:	99 23       	and	r25, r25
 e84:	a9 f0       	breq	.+42     	; 0xeb0 <__floatsisf+0x40>
 e86:	f9 2f       	mov	r31, r25
 e88:	96 e9       	ldi	r25, 0x96	; 150
 e8a:	bb 27       	eor	r27, r27
 e8c:	93 95       	inc	r25
 e8e:	f6 95       	lsr	r31
 e90:	87 95       	ror	r24
 e92:	77 95       	ror	r23
 e94:	67 95       	ror	r22
 e96:	b7 95       	ror	r27
 e98:	f1 11       	cpse	r31, r1
 e9a:	f8 cf       	rjmp	.-16     	; 0xe8c <__floatsisf+0x1c>
 e9c:	fa f4       	brpl	.+62     	; 0xedc <__floatsisf+0x6c>
 e9e:	bb 0f       	add	r27, r27
 ea0:	11 f4       	brne	.+4      	; 0xea6 <__floatsisf+0x36>
 ea2:	60 ff       	sbrs	r22, 0
 ea4:	1b c0       	rjmp	.+54     	; 0xedc <__floatsisf+0x6c>
 ea6:	6f 5f       	subi	r22, 0xFF	; 255
 ea8:	7f 4f       	sbci	r23, 0xFF	; 255
 eaa:	8f 4f       	sbci	r24, 0xFF	; 255
 eac:	9f 4f       	sbci	r25, 0xFF	; 255
 eae:	16 c0       	rjmp	.+44     	; 0xedc <__floatsisf+0x6c>
 eb0:	88 23       	and	r24, r24
 eb2:	11 f0       	breq	.+4      	; 0xeb8 <__floatsisf+0x48>
 eb4:	96 e9       	ldi	r25, 0x96	; 150
 eb6:	11 c0       	rjmp	.+34     	; 0xeda <__floatsisf+0x6a>
 eb8:	77 23       	and	r23, r23
 eba:	21 f0       	breq	.+8      	; 0xec4 <__floatsisf+0x54>
 ebc:	9e e8       	ldi	r25, 0x8E	; 142
 ebe:	87 2f       	mov	r24, r23
 ec0:	76 2f       	mov	r23, r22
 ec2:	05 c0       	rjmp	.+10     	; 0xece <__floatsisf+0x5e>
 ec4:	66 23       	and	r22, r22
 ec6:	71 f0       	breq	.+28     	; 0xee4 <__floatsisf+0x74>
 ec8:	96 e8       	ldi	r25, 0x86	; 134
 eca:	86 2f       	mov	r24, r22
 ecc:	70 e0       	ldi	r23, 0x00	; 0
 ece:	60 e0       	ldi	r22, 0x00	; 0
 ed0:	2a f0       	brmi	.+10     	; 0xedc <__floatsisf+0x6c>
 ed2:	9a 95       	dec	r25
 ed4:	66 0f       	add	r22, r22
 ed6:	77 1f       	adc	r23, r23
 ed8:	88 1f       	adc	r24, r24
 eda:	da f7       	brpl	.-10     	; 0xed2 <__floatsisf+0x62>
 edc:	88 0f       	add	r24, r24
 ede:	96 95       	lsr	r25
 ee0:	87 95       	ror	r24
 ee2:	97 f9       	bld	r25, 7
 ee4:	08 95       	ret

00000ee6 <__fp_inf>:
 ee6:	97 f9       	bld	r25, 7
 ee8:	9f 67       	ori	r25, 0x7F	; 127
 eea:	80 e8       	ldi	r24, 0x80	; 128
 eec:	70 e0       	ldi	r23, 0x00	; 0
 eee:	60 e0       	ldi	r22, 0x00	; 0
 ef0:	08 95       	ret

00000ef2 <__fp_nan>:
 ef2:	9f ef       	ldi	r25, 0xFF	; 255
 ef4:	80 ec       	ldi	r24, 0xC0	; 192
 ef6:	08 95       	ret

00000ef8 <__fp_pscA>:
 ef8:	00 24       	eor	r0, r0
 efa:	0a 94       	dec	r0
 efc:	16 16       	cp	r1, r22
 efe:	17 06       	cpc	r1, r23
 f00:	18 06       	cpc	r1, r24
 f02:	09 06       	cpc	r0, r25
 f04:	08 95       	ret

00000f06 <__fp_pscB>:
 f06:	00 24       	eor	r0, r0
 f08:	0a 94       	dec	r0
 f0a:	12 16       	cp	r1, r18
 f0c:	13 06       	cpc	r1, r19
 f0e:	14 06       	cpc	r1, r20
 f10:	05 06       	cpc	r0, r21
 f12:	08 95       	ret

00000f14 <__fp_round>:
 f14:	09 2e       	mov	r0, r25
 f16:	03 94       	inc	r0
 f18:	00 0c       	add	r0, r0
 f1a:	11 f4       	brne	.+4      	; 0xf20 <__fp_round+0xc>
 f1c:	88 23       	and	r24, r24
 f1e:	52 f0       	brmi	.+20     	; 0xf34 <__fp_round+0x20>
 f20:	bb 0f       	add	r27, r27
 f22:	40 f4       	brcc	.+16     	; 0xf34 <__fp_round+0x20>
 f24:	bf 2b       	or	r27, r31
 f26:	11 f4       	brne	.+4      	; 0xf2c <__fp_round+0x18>
 f28:	60 ff       	sbrs	r22, 0
 f2a:	04 c0       	rjmp	.+8      	; 0xf34 <__fp_round+0x20>
 f2c:	6f 5f       	subi	r22, 0xFF	; 255
 f2e:	7f 4f       	sbci	r23, 0xFF	; 255
 f30:	8f 4f       	sbci	r24, 0xFF	; 255
 f32:	9f 4f       	sbci	r25, 0xFF	; 255
 f34:	08 95       	ret

00000f36 <__fp_split3>:
 f36:	57 fd       	sbrc	r21, 7
 f38:	90 58       	subi	r25, 0x80	; 128
 f3a:	44 0f       	add	r20, r20
 f3c:	55 1f       	adc	r21, r21
 f3e:	59 f0       	breq	.+22     	; 0xf56 <__fp_splitA+0x10>
 f40:	5f 3f       	cpi	r21, 0xFF	; 255
 f42:	71 f0       	breq	.+28     	; 0xf60 <__fp_splitA+0x1a>
 f44:	47 95       	ror	r20

00000f46 <__fp_splitA>:
 f46:	88 0f       	add	r24, r24
 f48:	97 fb       	bst	r25, 7
 f4a:	99 1f       	adc	r25, r25
 f4c:	61 f0       	breq	.+24     	; 0xf66 <__fp_splitA+0x20>
 f4e:	9f 3f       	cpi	r25, 0xFF	; 255
 f50:	79 f0       	breq	.+30     	; 0xf70 <__fp_splitA+0x2a>
 f52:	87 95       	ror	r24
 f54:	08 95       	ret
 f56:	12 16       	cp	r1, r18
 f58:	13 06       	cpc	r1, r19
 f5a:	14 06       	cpc	r1, r20
 f5c:	55 1f       	adc	r21, r21
 f5e:	f2 cf       	rjmp	.-28     	; 0xf44 <__fp_split3+0xe>
 f60:	46 95       	lsr	r20
 f62:	f1 df       	rcall	.-30     	; 0xf46 <__fp_splitA>
 f64:	08 c0       	rjmp	.+16     	; 0xf76 <__fp_splitA+0x30>
 f66:	16 16       	cp	r1, r22
 f68:	17 06       	cpc	r1, r23
 f6a:	18 06       	cpc	r1, r24
 f6c:	99 1f       	adc	r25, r25
 f6e:	f1 cf       	rjmp	.-30     	; 0xf52 <__fp_splitA+0xc>
 f70:	86 95       	lsr	r24
 f72:	71 05       	cpc	r23, r1
 f74:	61 05       	cpc	r22, r1
 f76:	08 94       	sec
 f78:	08 95       	ret

00000f7a <__fp_zero>:
 f7a:	e8 94       	clt

00000f7c <__fp_szero>:
 f7c:	bb 27       	eor	r27, r27
 f7e:	66 27       	eor	r22, r22
 f80:	77 27       	eor	r23, r23
 f82:	cb 01       	movw	r24, r22
 f84:	97 f9       	bld	r25, 7
 f86:	08 95       	ret

00000f88 <__tablejump2__>:
 f88:	ee 0f       	add	r30, r30
 f8a:	ff 1f       	adc	r31, r31
 f8c:	05 90       	lpm	r0, Z+
 f8e:	f4 91       	lpm	r31, Z
 f90:	e0 2d       	mov	r30, r0
 f92:	09 94       	ijmp

00000f94 <_exit>:
 f94:	f8 94       	cli

00000f96 <__stop_program>:
 f96:	ff cf       	rjmp	.-2      	; 0xf96 <__stop_program>

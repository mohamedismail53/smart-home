
finaaaaaal_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000609a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  0000609a  0000612e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008001bc  008001bc  0000628a  2**0
                  ALLOC
  3 .stab         00004f74  00000000  00000000  0000628c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001308  00000000  00000000  0000b200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000c508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000c668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000c7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000e83c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000f93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000108c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00010d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 79 2e 	jmp	0x5cf2	; 0x5cf2 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 79 2f 	jmp	0x5ef2	; 0x5ef2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f0 e6       	ldi	r31, 0x60	; 96
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3d       	cpi	r26, 0xD0	; 208
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 13 	call	0x27cc	; 0x27cc <main>
      8a:	0c 94 4b 30 	jmp	0x6096	; 0x6096 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ff 2f 	jmp	0x5ffe	; 0x5ffe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 eb       	ldi	r26, 0xB3	; 179
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0b 30 	jmp	0x6016	; 0x6016 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 27 30 	jmp	0x604e	; 0x604e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0b 30 	jmp	0x6016	; 0x6016 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 27 30 	jmp	0x604e	; 0x604e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ff 2f 	jmp	0x5ffe	; 0x5ffe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 eb       	ldi	r24, 0xB3	; 179
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1b 30 	jmp	0x6036	; 0x6036 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 07 30 	jmp	0x600e	; 0x600e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 eb       	ldi	r22, 0xB3	; 179
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 23 30 	jmp	0x6046	; 0x6046 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0b 30 	jmp	0x6016	; 0x6016 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 27 30 	jmp	0x604e	; 0x604e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0b 30 	jmp	0x6016	; 0x6016 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 27 30 	jmp	0x604e	; 0x604e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0b 30 	jmp	0x6016	; 0x6016 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 27 30 	jmp	0x604e	; 0x604e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0f 30 	jmp	0x601e	; 0x601e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2b 30 	jmp	0x6056	; 0x6056 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_Init>:

#include "DIO_Interface.h"
#include "DIO_Register.h"
#include "DIO_Config.h"

void DIO_Init(void) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    DDRA_REG = DDRA_INIT;
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1
    DDRB_REG = DDRB_INIT;
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	10 82       	st	Z, r1
    DDRC_REG = DDRC_INIT;
     cb2:	e4 e3       	ldi	r30, 0x34	; 52
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	10 82       	st	Z, r1
    DDRD_REG = DDRD_INIT;
     cb8:	e1 e3       	ldi	r30, 0x31	; 49
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	10 82       	st	Z, r1
    PORTA_REG = PORTA_INIT; 
     cbe:	eb e3       	ldi	r30, 0x3B	; 59
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1
    PORTB_REG = PORTB_INIT;
     cc4:	e8 e3       	ldi	r30, 0x38	; 56
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
    PORTC_REG = PORTC_INIT;
     cca:	e5 e3       	ldi	r30, 0x35	; 53
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	10 82       	st	Z, r1
    PORTD_REG = PORTD_INIT;
     cd0:	e2 e3       	ldi	r30, 0x32	; 50
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	10 82       	st	Z, r1
} 
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <DIO_SetPinDirection>:

void DIO_SetPinDirection(uint8 portno, uint8 pinno, uint8 state) {
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	27 97       	sbiw	r28, 0x07	; 7
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	6a 83       	std	Y+2, r22	; 0x02
     cf4:	4b 83       	std	Y+3, r20	; 0x03

    if (state == INPUT) {
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	88 23       	and	r24, r24
     cfa:	09 f0       	breq	.+2      	; 0xcfe <DIO_SetPinDirection+0x22>
     cfc:	74 c0       	rjmp	.+232    	; 0xde6 <DIO_SetPinDirection+0x10a>
        switch(portno) {
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	3f 83       	std	Y+7, r19	; 0x07
     d06:	2e 83       	std	Y+6, r18	; 0x06
     d08:	8e 81       	ldd	r24, Y+6	; 0x06
     d0a:	9f 81       	ldd	r25, Y+7	; 0x07
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	91 05       	cpc	r25, r1
     d10:	59 f1       	breq	.+86     	; 0xd68 <DIO_SetPinDirection+0x8c>
     d12:	2e 81       	ldd	r18, Y+6	; 0x06
     d14:	3f 81       	ldd	r19, Y+7	; 0x07
     d16:	22 30       	cpi	r18, 0x02	; 2
     d18:	31 05       	cpc	r19, r1
     d1a:	2c f4       	brge	.+10     	; 0xd26 <DIO_SetPinDirection+0x4a>
     d1c:	8e 81       	ldd	r24, Y+6	; 0x06
     d1e:	9f 81       	ldd	r25, Y+7	; 0x07
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	69 f0       	breq	.+26     	; 0xd3e <DIO_SetPinDirection+0x62>
     d24:	d2 c0       	rjmp	.+420    	; 0xeca <DIO_SetPinDirection+0x1ee>
     d26:	2e 81       	ldd	r18, Y+6	; 0x06
     d28:	3f 81       	ldd	r19, Y+7	; 0x07
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	31 05       	cpc	r19, r1
     d2e:	89 f1       	breq	.+98     	; 0xd92 <DIO_SetPinDirection+0xb6>
     d30:	8e 81       	ldd	r24, Y+6	; 0x06
     d32:	9f 81       	ldd	r25, Y+7	; 0x07
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	91 05       	cpc	r25, r1
     d38:	09 f4       	brne	.+2      	; 0xd3c <DIO_SetPinDirection+0x60>
     d3a:	40 c0       	rjmp	.+128    	; 0xdbc <DIO_SetPinDirection+0xe0>
     d3c:	c6 c0       	rjmp	.+396    	; 0xeca <DIO_SetPinDirection+0x1ee>
            case PORTA: CLR_BIT(DDRA_REG, pinno); break;
     d3e:	aa e3       	ldi	r26, 0x3A	; 58
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	ea e3       	ldi	r30, 0x3A	; 58
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_SetPinDirection+0x80>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_SetPinDirection+0x7c>
     d60:	80 95       	com	r24
     d62:	84 23       	and	r24, r20
     d64:	8c 93       	st	X, r24
     d66:	b1 c0       	rjmp	.+354    	; 0xeca <DIO_SetPinDirection+0x1ee>
            case PORTB: CLR_BIT(DDRB_REG, pinno); break;
     d68:	a7 e3       	ldi	r26, 0x37	; 55
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e7 e3       	ldi	r30, 0x37	; 55
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	48 2f       	mov	r20, r24
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	02 2e       	mov	r0, r18
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <DIO_SetPinDirection+0xaa>
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	0a 94       	dec	r0
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <DIO_SetPinDirection+0xa6>
     d8a:	80 95       	com	r24
     d8c:	84 23       	and	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	9c c0       	rjmp	.+312    	; 0xeca <DIO_SetPinDirection+0x1ee>
            case PORTC: CLR_BIT(DDRC_REG, pinno); break;
     d92:	a4 e3       	ldi	r26, 0x34	; 52
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e4 e3       	ldi	r30, 0x34	; 52
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_SetPinDirection+0xd4>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_SetPinDirection+0xd0>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	87 c0       	rjmp	.+270    	; 0xeca <DIO_SetPinDirection+0x1ee>
            case PORTD: CLR_BIT(DDRD_REG, pinno); break;       
     dbc:	a1 e3       	ldi	r26, 0x31	; 49
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e1 e3       	ldi	r30, 0x31	; 49
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_SetPinDirection+0xfe>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_SetPinDirection+0xfa>
     dde:	80 95       	com	r24
     de0:	84 23       	and	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	72 c0       	rjmp	.+228    	; 0xeca <DIO_SetPinDirection+0x1ee>
            default: break;  
        }
    }
    else if (state == OUTPUT) {
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	09 f0       	breq	.+2      	; 0xdee <DIO_SetPinDirection+0x112>
     dec:	6e c0       	rjmp	.+220    	; 0xeca <DIO_SetPinDirection+0x1ee>
        switch(portno) {
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	3d 83       	std	Y+5, r19	; 0x05
     df6:	2c 83       	std	Y+4, r18	; 0x04
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	9d 81       	ldd	r25, Y+5	; 0x05
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	91 05       	cpc	r25, r1
     e00:	49 f1       	breq	.+82     	; 0xe54 <DIO_SetPinDirection+0x178>
     e02:	2c 81       	ldd	r18, Y+4	; 0x04
     e04:	3d 81       	ldd	r19, Y+5	; 0x05
     e06:	22 30       	cpi	r18, 0x02	; 2
     e08:	31 05       	cpc	r19, r1
     e0a:	2c f4       	brge	.+10     	; 0xe16 <DIO_SetPinDirection+0x13a>
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	9d 81       	ldd	r25, Y+5	; 0x05
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	61 f0       	breq	.+24     	; 0xe2c <DIO_SetPinDirection+0x150>
     e14:	5a c0       	rjmp	.+180    	; 0xeca <DIO_SetPinDirection+0x1ee>
     e16:	2c 81       	ldd	r18, Y+4	; 0x04
     e18:	3d 81       	ldd	r19, Y+5	; 0x05
     e1a:	22 30       	cpi	r18, 0x02	; 2
     e1c:	31 05       	cpc	r19, r1
     e1e:	71 f1       	breq	.+92     	; 0xe7c <DIO_SetPinDirection+0x1a0>
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	9d 81       	ldd	r25, Y+5	; 0x05
     e24:	83 30       	cpi	r24, 0x03	; 3
     e26:	91 05       	cpc	r25, r1
     e28:	e9 f1       	breq	.+122    	; 0xea4 <DIO_SetPinDirection+0x1c8>
     e2a:	4f c0       	rjmp	.+158    	; 0xeca <DIO_SetPinDirection+0x1ee>
            case PORTA: SET_BIT(DDRA_REG, pinno); break;
     e2c:	aa e3       	ldi	r26, 0x3A	; 58
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	ea e3       	ldi	r30, 0x3A	; 58
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_SetPinDirection+0x16e>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_SetPinDirection+0x16a>
     e4e:	84 2b       	or	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	3b c0       	rjmp	.+118    	; 0xeca <DIO_SetPinDirection+0x1ee>
            case PORTB: SET_BIT(DDRB_REG, pinno); break;
     e54:	a7 e3       	ldi	r26, 0x37	; 55
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e7 e3       	ldi	r30, 0x37	; 55
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_SetPinDirection+0x196>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_SetPinDirection+0x192>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	27 c0       	rjmp	.+78     	; 0xeca <DIO_SetPinDirection+0x1ee>
            case PORTC: SET_BIT(DDRC_REG, pinno); break;
     e7c:	a4 e3       	ldi	r26, 0x34	; 52
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e4 e3       	ldi	r30, 0x34	; 52
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_SetPinDirection+0x1be>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_SetPinDirection+0x1ba>
     e9e:	84 2b       	or	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	13 c0       	rjmp	.+38     	; 0xeca <DIO_SetPinDirection+0x1ee>
            case PORTD: SET_BIT(DDRD_REG, pinno); break;    
     ea4:	a1 e3       	ldi	r26, 0x31	; 49
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e1 e3       	ldi	r30, 0x31	; 49
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <DIO_SetPinDirection+0x1e6>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <DIO_SetPinDirection+0x1e2>
     ec6:	84 2b       	or	r24, r20
     ec8:	8c 93       	st	X, r24
            default: break;     
        }
    }
}
     eca:	27 96       	adiw	r28, 0x07	; 7
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <DIO_SetPortDirection>:

void DIO_SetPortDirection(uint8 portno, uint8 state) {
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <DIO_SetPortDirection+0x6>
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <DIO_SetPortDirection+0x8>
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	6a 83       	std	Y+2, r22	; 0x02
    switch(portno) {
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	3c 83       	std	Y+4, r19	; 0x04
     ef4:	2b 83       	std	Y+3, r18	; 0x03
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	9c 81       	ldd	r25, Y+4	; 0x04
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	91 05       	cpc	r25, r1
     efe:	d1 f0       	breq	.+52     	; 0xf34 <DIO_SetPortDirection+0x58>
     f00:	2b 81       	ldd	r18, Y+3	; 0x03
     f02:	3c 81       	ldd	r19, Y+4	; 0x04
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	2c f4       	brge	.+10     	; 0xf14 <DIO_SetPortDirection+0x38>
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	9c 81       	ldd	r25, Y+4	; 0x04
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	61 f0       	breq	.+24     	; 0xf2a <DIO_SetPortDirection+0x4e>
     f12:	1e c0       	rjmp	.+60     	; 0xf50 <DIO_SetPortDirection+0x74>
     f14:	2b 81       	ldd	r18, Y+3	; 0x03
     f16:	3c 81       	ldd	r19, Y+4	; 0x04
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	81 f0       	breq	.+32     	; 0xf3e <DIO_SetPortDirection+0x62>
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	91 05       	cpc	r25, r1
     f26:	81 f0       	breq	.+32     	; 0xf48 <DIO_SetPortDirection+0x6c>
     f28:	13 c0       	rjmp	.+38     	; 0xf50 <DIO_SetPortDirection+0x74>
        case PORTA: DDRA_REG = state; break;
     f2a:	ea e3       	ldi	r30, 0x3A	; 58
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	80 83       	st	Z, r24
     f32:	0e c0       	rjmp	.+28     	; 0xf50 <DIO_SetPortDirection+0x74>
        case PORTB: DDRB_REG = state; break;
     f34:	e7 e3       	ldi	r30, 0x37	; 55
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	80 83       	st	Z, r24
     f3c:	09 c0       	rjmp	.+18     	; 0xf50 <DIO_SetPortDirection+0x74>
        case PORTC: DDRC_REG = state; break;
     f3e:	e4 e3       	ldi	r30, 0x34	; 52
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	80 83       	st	Z, r24
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <DIO_SetPortDirection+0x74>
        case PORTD: DDRD_REG = state; break;        
     f48:	e1 e3       	ldi	r30, 0x31	; 49
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	80 83       	st	Z, r24
        default: break; 
        }
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <DIO_SetPinValue>:

void DIO_SetPinValue(uint8 portno, uint8 pinno, uint8 value) {
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	27 97       	sbiw	r28, 0x07	; 7
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	6a 83       	std	Y+2, r22	; 0x02
     f76:	4b 83       	std	Y+3, r20	; 0x03
    if (value == LOW) {
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	88 23       	and	r24, r24
     f7c:	09 f0       	breq	.+2      	; 0xf80 <DIO_SetPinValue+0x22>
     f7e:	74 c0       	rjmp	.+232    	; 0x1068 <DIO_SetPinValue+0x10a>
        switch(portno) {
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	3f 83       	std	Y+7, r19	; 0x07
     f88:	2e 83       	std	Y+6, r18	; 0x06
     f8a:	8e 81       	ldd	r24, Y+6	; 0x06
     f8c:	9f 81       	ldd	r25, Y+7	; 0x07
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	91 05       	cpc	r25, r1
     f92:	59 f1       	breq	.+86     	; 0xfea <DIO_SetPinValue+0x8c>
     f94:	2e 81       	ldd	r18, Y+6	; 0x06
     f96:	3f 81       	ldd	r19, Y+7	; 0x07
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	2c f4       	brge	.+10     	; 0xfa8 <DIO_SetPinValue+0x4a>
     f9e:	8e 81       	ldd	r24, Y+6	; 0x06
     fa0:	9f 81       	ldd	r25, Y+7	; 0x07
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	69 f0       	breq	.+26     	; 0xfc0 <DIO_SetPinValue+0x62>
     fa6:	d2 c0       	rjmp	.+420    	; 0x114c <DIO_SetPinValue+0x1ee>
     fa8:	2e 81       	ldd	r18, Y+6	; 0x06
     faa:	3f 81       	ldd	r19, Y+7	; 0x07
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	31 05       	cpc	r19, r1
     fb0:	89 f1       	breq	.+98     	; 0x1014 <DIO_SetPinValue+0xb6>
     fb2:	8e 81       	ldd	r24, Y+6	; 0x06
     fb4:	9f 81       	ldd	r25, Y+7	; 0x07
     fb6:	83 30       	cpi	r24, 0x03	; 3
     fb8:	91 05       	cpc	r25, r1
     fba:	09 f4       	brne	.+2      	; 0xfbe <DIO_SetPinValue+0x60>
     fbc:	40 c0       	rjmp	.+128    	; 0x103e <DIO_SetPinValue+0xe0>
     fbe:	c6 c0       	rjmp	.+396    	; 0x114c <DIO_SetPinValue+0x1ee>
            case PORTA: CLR_BIT(PORTA_REG, pinno); break;
     fc0:	ab e3       	ldi	r26, 0x3B	; 59
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	eb e3       	ldi	r30, 0x3B	; 59
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_SetPinValue+0x80>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_SetPinValue+0x7c>
     fe2:	80 95       	com	r24
     fe4:	84 23       	and	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	b1 c0       	rjmp	.+354    	; 0x114c <DIO_SetPinValue+0x1ee>
            case PORTB: CLR_BIT(PORTB_REG, pinno); break;
     fea:	a8 e3       	ldi	r26, 0x38	; 56
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e8 e3       	ldi	r30, 0x38	; 56
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_SetPinValue+0xaa>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_SetPinValue+0xa6>
    100c:	80 95       	com	r24
    100e:	84 23       	and	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	9c c0       	rjmp	.+312    	; 0x114c <DIO_SetPinValue+0x1ee>
            case PORTC: CLR_BIT(PORTC_REG, pinno); break;
    1014:	a5 e3       	ldi	r26, 0x35	; 53
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e5 e3       	ldi	r30, 0x35	; 53
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_SetPinValue+0xd4>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_SetPinValue+0xd0>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	87 c0       	rjmp	.+270    	; 0x114c <DIO_SetPinValue+0x1ee>
            case PORTD: CLR_BIT(PORTD_REG, pinno); break;   
    103e:	a2 e3       	ldi	r26, 0x32	; 50
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e2 e3       	ldi	r30, 0x32	; 50
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_SetPinValue+0xfe>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_SetPinValue+0xfa>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	72 c0       	rjmp	.+228    	; 0x114c <DIO_SetPinValue+0x1ee>
            default: break;      
        }
    }
    else if (value == HIGH) {
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	09 f0       	breq	.+2      	; 0x1070 <DIO_SetPinValue+0x112>
    106e:	6e c0       	rjmp	.+220    	; 0x114c <DIO_SetPinValue+0x1ee>
        switch(portno) {
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	3d 83       	std	Y+5, r19	; 0x05
    1078:	2c 83       	std	Y+4, r18	; 0x04
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	9d 81       	ldd	r25, Y+5	; 0x05
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	49 f1       	breq	.+82     	; 0x10d6 <DIO_SetPinValue+0x178>
    1084:	2c 81       	ldd	r18, Y+4	; 0x04
    1086:	3d 81       	ldd	r19, Y+5	; 0x05
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	2c f4       	brge	.+10     	; 0x1098 <DIO_SetPinValue+0x13a>
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	61 f0       	breq	.+24     	; 0x10ae <DIO_SetPinValue+0x150>
    1096:	5a c0       	rjmp	.+180    	; 0x114c <DIO_SetPinValue+0x1ee>
    1098:	2c 81       	ldd	r18, Y+4	; 0x04
    109a:	3d 81       	ldd	r19, Y+5	; 0x05
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	71 f1       	breq	.+92     	; 0x10fe <DIO_SetPinValue+0x1a0>
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	e9 f1       	breq	.+122    	; 0x1126 <DIO_SetPinValue+0x1c8>
    10ac:	4f c0       	rjmp	.+158    	; 0x114c <DIO_SetPinValue+0x1ee>
            case PORTA: SET_BIT(PORTA_REG, pinno); break;
    10ae:	ab e3       	ldi	r26, 0x3B	; 59
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	eb e3       	ldi	r30, 0x3B	; 59
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_SetPinValue+0x16e>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_SetPinValue+0x16a>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	3b c0       	rjmp	.+118    	; 0x114c <DIO_SetPinValue+0x1ee>
            case PORTB: SET_BIT(PORTB_REG, pinno); break;
    10d6:	a8 e3       	ldi	r26, 0x38	; 56
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e8 e3       	ldi	r30, 0x38	; 56
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_SetPinValue+0x196>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_SetPinValue+0x192>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	27 c0       	rjmp	.+78     	; 0x114c <DIO_SetPinValue+0x1ee>
            case PORTC: SET_BIT(PORTC_REG, pinno); break;
    10fe:	a5 e3       	ldi	r26, 0x35	; 53
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e5 e3       	ldi	r30, 0x35	; 53
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_SetPinValue+0x1be>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_SetPinValue+0x1ba>
    1120:	84 2b       	or	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	13 c0       	rjmp	.+38     	; 0x114c <DIO_SetPinValue+0x1ee>
            case PORTD: SET_BIT(PORTD_REG, pinno); break;    
    1126:	a2 e3       	ldi	r26, 0x32	; 50
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_SetPinValue+0x1e6>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_SetPinValue+0x1e2>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
            default: break;     
        }
    }
}
    114c:	27 96       	adiw	r28, 0x07	; 7
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <DIO_SetPortValue>:

void DIO_SetPortValue(uint8 portno, uint8 value) { 
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <DIO_SetPortValue+0x6>
    1164:	00 d0       	rcall	.+0      	; 0x1166 <DIO_SetPortValue+0x8>
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	6a 83       	std	Y+2, r22	; 0x02
    switch(portno) {
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	3c 83       	std	Y+4, r19	; 0x04
    1176:	2b 83       	std	Y+3, r18	; 0x03
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	91 05       	cpc	r25, r1
    1180:	d1 f0       	breq	.+52     	; 0x11b6 <DIO_SetPortValue+0x58>
    1182:	2b 81       	ldd	r18, Y+3	; 0x03
    1184:	3c 81       	ldd	r19, Y+4	; 0x04
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	2c f4       	brge	.+10     	; 0x1196 <DIO_SetPortValue+0x38>
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	61 f0       	breq	.+24     	; 0x11ac <DIO_SetPortValue+0x4e>
    1194:	1e c0       	rjmp	.+60     	; 0x11d2 <DIO_SetPortValue+0x74>
    1196:	2b 81       	ldd	r18, Y+3	; 0x03
    1198:	3c 81       	ldd	r19, Y+4	; 0x04
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	81 f0       	breq	.+32     	; 0x11c0 <DIO_SetPortValue+0x62>
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	91 05       	cpc	r25, r1
    11a8:	81 f0       	breq	.+32     	; 0x11ca <DIO_SetPortValue+0x6c>
    11aa:	13 c0       	rjmp	.+38     	; 0x11d2 <DIO_SetPortValue+0x74>
        case PORTA: PORTA_REG = value; break;
    11ac:	eb e3       	ldi	r30, 0x3B	; 59
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	80 83       	st	Z, r24
    11b4:	0e c0       	rjmp	.+28     	; 0x11d2 <DIO_SetPortValue+0x74>
        case PORTB: PORTB_REG = value; break;
    11b6:	e8 e3       	ldi	r30, 0x38	; 56
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	80 83       	st	Z, r24
    11be:	09 c0       	rjmp	.+18     	; 0x11d2 <DIO_SetPortValue+0x74>
        case PORTC: PORTC_REG = value; break;
    11c0:	e5 e3       	ldi	r30, 0x35	; 53
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	80 83       	st	Z, r24
    11c8:	04 c0       	rjmp	.+8      	; 0x11d2 <DIO_SetPortValue+0x74>
        case PORTD: PORTD_REG = value; break;      
    11ca:	e2 e3       	ldi	r30, 0x32	; 50
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	80 83       	st	Z, r24
        default: break;  
        }
}
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <DIO_RdPinValue>:

uint8 DIO_RdPinValue(uint8 portno, uint8 pinno) {
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <DIO_RdPinValue+0x6>
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <DIO_RdPinValue+0x8>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <DIO_RdPinValue+0xa>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	6a 83       	std	Y+2, r22	; 0x02
    switch(portno) {
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	3d 83       	std	Y+5, r19	; 0x05
    11fa:	2c 83       	std	Y+4, r18	; 0x04
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	91 05       	cpc	r25, r1
    1204:	39 f1       	breq	.+78     	; 0x1254 <DIO_RdPinValue+0x74>
    1206:	2c 81       	ldd	r18, Y+4	; 0x04
    1208:	3d 81       	ldd	r19, Y+5	; 0x05
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	2c f4       	brge	.+10     	; 0x121a <DIO_RdPinValue+0x3a>
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	61 f0       	breq	.+24     	; 0x1230 <DIO_RdPinValue+0x50>
    1218:	53 c0       	rjmp	.+166    	; 0x12c0 <DIO_RdPinValue+0xe0>
    121a:	2c 81       	ldd	r18, Y+4	; 0x04
    121c:	3d 81       	ldd	r19, Y+5	; 0x05
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	51 f1       	breq	.+84     	; 0x1278 <DIO_RdPinValue+0x98>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	83 30       	cpi	r24, 0x03	; 3
    122a:	91 05       	cpc	r25, r1
    122c:	b9 f1       	breq	.+110    	; 0x129c <DIO_RdPinValue+0xbc>
    122e:	48 c0       	rjmp	.+144    	; 0x12c0 <DIO_RdPinValue+0xe0>
            case PORTA: return RD_BIT(PINA_REG, pinno); break;
    1230:	e9 e3       	ldi	r30, 0x39	; 57
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_RdPinValue+0x6a>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_RdPinValue+0x66>
    124e:	84 23       	and	r24, r20
    1250:	8b 83       	std	Y+3, r24	; 0x03
    1252:	37 c0       	rjmp	.+110    	; 0x12c2 <DIO_RdPinValue+0xe2>
            case PORTB: return RD_BIT(PINB_REG, pinno); break;
    1254:	e6 e3       	ldi	r30, 0x36	; 54
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_RdPinValue+0x8e>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_RdPinValue+0x8a>
    1272:	84 23       	and	r24, r20
    1274:	8b 83       	std	Y+3, r24	; 0x03
    1276:	25 c0       	rjmp	.+74     	; 0x12c2 <DIO_RdPinValue+0xe2>
            case PORTC: return RD_BIT(PINC_REG, pinno); break;
    1278:	e3 e3       	ldi	r30, 0x33	; 51
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_RdPinValue+0xb2>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_RdPinValue+0xae>
    1296:	84 23       	and	r24, r20
    1298:	8b 83       	std	Y+3, r24	; 0x03
    129a:	13 c0       	rjmp	.+38     	; 0x12c2 <DIO_RdPinValue+0xe2>
            case PORTD: return RD_BIT(PIND_REG, pinno); break;     
    129c:	e0 e3       	ldi	r30, 0x30	; 48
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_RdPinValue+0xd6>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_RdPinValue+0xd2>
    12ba:	84 23       	and	r24, r20
    12bc:	8b 83       	std	Y+3, r24	; 0x03
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <DIO_RdPinValue+0xe2>
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_RdPinValue+0xe6>
            default: break;    
        } 
}
    12c2:	9b 81       	ldd	r25, Y+3	; 0x03
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	26 96       	adiw	r28, 0x06	; 6
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <DIO_RdPortValue>:

uint8 DIO_RdPortValue(uint8 portno) { 
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <DIO_RdPortValue+0x6>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <DIO_RdPortValue+0x8>
    12e2:	0f 92       	push	r0
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	89 83       	std	Y+1, r24	; 0x01
    switch(portno) {
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3c 83       	std	Y+4, r19	; 0x04
    12f2:	2b 83       	std	Y+3, r18	; 0x03
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	91 05       	cpc	r25, r1
    12fc:	d1 f0       	breq	.+52     	; 0x1332 <DIO_RdPortValue+0x58>
    12fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1300:	3c 81       	ldd	r19, Y+4	; 0x04
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	2c f4       	brge	.+10     	; 0x1312 <DIO_RdPortValue+0x38>
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	61 f0       	breq	.+24     	; 0x1328 <DIO_RdPortValue+0x4e>
    1310:	1f c0       	rjmp	.+62     	; 0x1350 <DIO_RdPortValue+0x76>
    1312:	2b 81       	ldd	r18, Y+3	; 0x03
    1314:	3c 81       	ldd	r19, Y+4	; 0x04
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	81 f0       	breq	.+32     	; 0x133c <DIO_RdPortValue+0x62>
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	91 05       	cpc	r25, r1
    1324:	81 f0       	breq	.+32     	; 0x1346 <DIO_RdPortValue+0x6c>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <DIO_RdPortValue+0x76>
            case PORTA: return PINA_REG; break;
    1328:	e9 e3       	ldi	r30, 0x39	; 57
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	90 81       	ld	r25, Z
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	10 c0       	rjmp	.+32     	; 0x1352 <DIO_RdPortValue+0x78>
            case PORTB: return PINB_REG; break;
    1332:	e6 e3       	ldi	r30, 0x36	; 54
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	20 81       	ld	r18, Z
    1338:	2a 83       	std	Y+2, r18	; 0x02
    133a:	0b c0       	rjmp	.+22     	; 0x1352 <DIO_RdPortValue+0x78>
            case PORTC: return PINC_REG; break;
    133c:	e3 e3       	ldi	r30, 0x33	; 51
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	30 81       	ld	r19, Z
    1342:	3a 83       	std	Y+2, r19	; 0x02
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <DIO_RdPortValue+0x78>
            case PORTD: return PIND_REG; break;        
    1346:	e0 e3       	ldi	r30, 0x30	; 48
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <DIO_RdPortValue+0x78>
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_RdPortValue+0x7c>
            default: break; 
    } 
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	9d 83       	std	Y+5, r25	; 0x05
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <LCD_init>:
	static void LCD_SendChar8(uint8 data);
#endif

/* LCD Initialize function for any mode */
void LCD_init(void)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(Control, RS, OUTPUT);
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	62 e0       	ldi	r22, 0x02	; 2
    1374:	41 e0       	ldi	r20, 0x01	; 1
    1376:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	DIO_SetPinDirection(Control, EN, OUTPUT);
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	63 e0       	ldi	r22, 0x03	; 3
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	DIO_SetPinDirection(Control, R_W, OUTPUT);
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	41 e0       	ldi	r20, 0x01	; 1
    138a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	/* check LCD connection mode */
	#if (mode == 4)
	{
		/* set from pin 4---->7 in data port to be output */
		DIO_SetPortDirection(Date, 0xf0);
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	60 ef       	ldi	r22, 0xF0	; 240
    1392:	0e 94 6e 07 	call	0xedc	; 0xedc <DIO_SetPortDirection>
		LCD_Init4();
    1396:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Init4>
		/* set all pins in data port to be output */
		DIO_SetPortDirection(Date, OUTPUT);
		LCD_Init8();
	}
	#endif
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <LCD_Init4>:

#if(mode == 4)
/* LCD Initialize function for 4-bit mode */
static void LCD_Init4(void)
{
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	c4 55       	subi	r28, 0x54	; 84
    13ae:	d0 40       	sbci	r29, 0x00	; 0
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	fe 01       	movw	r30, r28
    13bc:	ef 5a       	subi	r30, 0xAF	; 175
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a8 e4       	ldi	r26, 0x48	; 72
    13c6:	b2 e4       	ldi	r27, 0x42	; 66
    13c8:	80 83       	st	Z, r24
    13ca:	91 83       	std	Z+1, r25	; 0x01
    13cc:	a2 83       	std	Z+2, r26	; 0x02
    13ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d0:	8e 01       	movw	r16, r28
    13d2:	03 5b       	subi	r16, 0xB3	; 179
    13d4:	1f 4f       	sbci	r17, 0xFF	; 255
    13d6:	fe 01       	movw	r30, r28
    13d8:	ef 5a       	subi	r30, 0xAF	; 175
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	60 81       	ld	r22, Z
    13de:	71 81       	ldd	r23, Z+1	; 0x01
    13e0:	82 81       	ldd	r24, Z+2	; 0x02
    13e2:	93 81       	ldd	r25, Z+3	; 0x03
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	4a e7       	ldi	r20, 0x7A	; 122
    13ea:	53 e4       	ldi	r21, 0x43	; 67
    13ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	f8 01       	movw	r30, r16
    13f6:	80 83       	st	Z, r24
    13f8:	91 83       	std	Z+1, r25	; 0x01
    13fa:	a2 83       	std	Z+2, r26	; 0x02
    13fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13fe:	fe 01       	movw	r30, r28
    1400:	e3 5b       	subi	r30, 0xB3	; 179
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	60 81       	ld	r22, Z
    1406:	71 81       	ldd	r23, Z+1	; 0x01
    1408:	82 81       	ldd	r24, Z+2	; 0x02
    140a:	93 81       	ldd	r25, Z+3	; 0x03
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e8       	ldi	r20, 0x80	; 128
    1412:	5f e3       	ldi	r21, 0x3F	; 63
    1414:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1418:	88 23       	and	r24, r24
    141a:	44 f4       	brge	.+16     	; 0x142c <LCD_Init4+0x8c>
		__ticks = 1;
    141c:	fe 01       	movw	r30, r28
    141e:	e5 5b       	subi	r30, 0xB5	; 181
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	91 83       	std	Z+1, r25	; 0x01
    1428:	80 83       	st	Z, r24
    142a:	64 c0       	rjmp	.+200    	; 0x14f4 <LCD_Init4+0x154>
	else if (__tmp > 65535)
    142c:	fe 01       	movw	r30, r28
    142e:	e3 5b       	subi	r30, 0xB3	; 179
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	60 81       	ld	r22, Z
    1434:	71 81       	ldd	r23, Z+1	; 0x01
    1436:	82 81       	ldd	r24, Z+2	; 0x02
    1438:	93 81       	ldd	r25, Z+3	; 0x03
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	3f ef       	ldi	r19, 0xFF	; 255
    143e:	4f e7       	ldi	r20, 0x7F	; 127
    1440:	57 e4       	ldi	r21, 0x47	; 71
    1442:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1446:	18 16       	cp	r1, r24
    1448:	0c f0       	brlt	.+2      	; 0x144c <LCD_Init4+0xac>
    144a:	43 c0       	rjmp	.+134    	; 0x14d2 <LCD_Init4+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144c:	fe 01       	movw	r30, r28
    144e:	ef 5a       	subi	r30, 0xAF	; 175
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	60 81       	ld	r22, Z
    1454:	71 81       	ldd	r23, Z+1	; 0x01
    1456:	82 81       	ldd	r24, Z+2	; 0x02
    1458:	93 81       	ldd	r25, Z+3	; 0x03
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e2       	ldi	r20, 0x20	; 32
    1460:	51 e4       	ldi	r21, 0x41	; 65
    1462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	8e 01       	movw	r16, r28
    146c:	05 5b       	subi	r16, 0xB5	; 181
    146e:	1f 4f       	sbci	r17, 0xFF	; 255
    1470:	bc 01       	movw	r22, r24
    1472:	cd 01       	movw	r24, r26
    1474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	f8 01       	movw	r30, r16
    147e:	91 83       	std	Z+1, r25	; 0x01
    1480:	80 83       	st	Z, r24
    1482:	1f c0       	rjmp	.+62     	; 0x14c2 <LCD_Init4+0x122>
    1484:	fe 01       	movw	r30, r28
    1486:	e7 5b       	subi	r30, 0xB7	; 183
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	89 e1       	ldi	r24, 0x19	; 25
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	91 83       	std	Z+1, r25	; 0x01
    1490:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1492:	fe 01       	movw	r30, r28
    1494:	e7 5b       	subi	r30, 0xB7	; 183
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <LCD_Init4+0xfc>
    14a0:	fe 01       	movw	r30, r28
    14a2:	e7 5b       	subi	r30, 0xB7	; 183
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14aa:	de 01       	movw	r26, r28
    14ac:	a5 5b       	subi	r26, 0xB5	; 181
    14ae:	bf 4f       	sbci	r27, 0xFF	; 255
    14b0:	fe 01       	movw	r30, r28
    14b2:	e5 5b       	subi	r30, 0xB5	; 181
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	80 81       	ld	r24, Z
    14b8:	91 81       	ldd	r25, Z+1	; 0x01
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	11 96       	adiw	r26, 0x01	; 1
    14be:	9c 93       	st	X, r25
    14c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c2:	fe 01       	movw	r30, r28
    14c4:	e5 5b       	subi	r30, 0xB5	; 181
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	91 81       	ldd	r25, Z+1	; 0x01
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	d1 f6       	brne	.-76     	; 0x1484 <LCD_Init4+0xe4>
    14d0:	27 c0       	rjmp	.+78     	; 0x1520 <LCD_Init4+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d2:	8e 01       	movw	r16, r28
    14d4:	05 5b       	subi	r16, 0xB5	; 181
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	fe 01       	movw	r30, r28
    14da:	e3 5b       	subi	r30, 0xB3	; 179
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	60 81       	ld	r22, Z
    14e0:	71 81       	ldd	r23, Z+1	; 0x01
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	f8 01       	movw	r30, r16
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	80 83       	st	Z, r24
    14f4:	de 01       	movw	r26, r28
    14f6:	a9 5b       	subi	r26, 0xB9	; 185
    14f8:	bf 4f       	sbci	r27, 0xFF	; 255
    14fa:	fe 01       	movw	r30, r28
    14fc:	e5 5b       	subi	r30, 0xB5	; 181
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	8d 93       	st	X+, r24
    1506:	9c 93       	st	X, r25
    1508:	fe 01       	movw	r30, r28
    150a:	e9 5b       	subi	r30, 0xB9	; 185
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_Init4+0x172>
    1516:	fe 01       	movw	r30, r28
    1518:	e9 5b       	subi	r30, 0xB9	; 185
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	91 83       	std	Z+1, r25	; 0x01
    151e:	80 83       	st	Z, r24
	/* Delay 50ms to ensure the initialization of the LCD driver start */
	_delay_ms(50);
	
	/* return cursor to start */
	LCD_sendCommand(CURSOR_HOME);
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_sendCommand>
    1526:	fe 01       	movw	r30, r28
    1528:	ed 5b       	subi	r30, 0xBD	; 189
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a0 e8       	ldi	r26, 0x80	; 128
    1532:	bf e3       	ldi	r27, 0x3F	; 63
    1534:	80 83       	st	Z, r24
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	a2 83       	std	Z+2, r26	; 0x02
    153a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153c:	8e 01       	movw	r16, r28
    153e:	01 5c       	subi	r16, 0xC1	; 193
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	fe 01       	movw	r30, r28
    1544:	ed 5b       	subi	r30, 0xBD	; 189
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	4a e7       	ldi	r20, 0x7A	; 122
    1556:	53 e4       	ldi	r21, 0x43	; 67
    1558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	f8 01       	movw	r30, r16
    1562:	80 83       	st	Z, r24
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	a2 83       	std	Z+2, r26	; 0x02
    1568:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    156a:	fe 01       	movw	r30, r28
    156c:	ff 96       	adiw	r30, 0x3f	; 63
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e8       	ldi	r20, 0x80	; 128
    157c:	5f e3       	ldi	r21, 0x3F	; 63
    157e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1582:	88 23       	and	r24, r24
    1584:	2c f4       	brge	.+10     	; 0x1590 <LCD_Init4+0x1f0>
		__ticks = 1;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	9e af       	std	Y+62, r25	; 0x3e
    158c:	8d af       	std	Y+61, r24	; 0x3d
    158e:	46 c0       	rjmp	.+140    	; 0x161c <LCD_Init4+0x27c>
	else if (__tmp > 65535)
    1590:	fe 01       	movw	r30, r28
    1592:	ff 96       	adiw	r30, 0x3f	; 63
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	3f ef       	ldi	r19, 0xFF	; 255
    15a0:	4f e7       	ldi	r20, 0x7F	; 127
    15a2:	57 e4       	ldi	r21, 0x47	; 71
    15a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15a8:	18 16       	cp	r1, r24
    15aa:	64 f5       	brge	.+88     	; 0x1604 <LCD_Init4+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ac:	fe 01       	movw	r30, r28
    15ae:	ed 5b       	subi	r30, 0xBD	; 189
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9e af       	std	Y+62, r25	; 0x3e
    15d8:	8d af       	std	Y+61, r24	; 0x3d
    15da:	0f c0       	rjmp	.+30     	; 0x15fa <LCD_Init4+0x25a>
    15dc:	89 e1       	ldi	r24, 0x19	; 25
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9c af       	std	Y+60, r25	; 0x3c
    15e2:	8b af       	std	Y+59, r24	; 0x3b
    15e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    15e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <LCD_Init4+0x248>
    15ec:	9c af       	std	Y+60, r25	; 0x3c
    15ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    15f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	9e af       	std	Y+62, r25	; 0x3e
    15f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    15fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	69 f7       	brne	.-38     	; 0x15dc <LCD_Init4+0x23c>
    1602:	16 c0       	rjmp	.+44     	; 0x1630 <LCD_Init4+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1604:	fe 01       	movw	r30, r28
    1606:	ff 96       	adiw	r30, 0x3f	; 63
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	9e af       	std	Y+62, r25	; 0x3e
    161a:	8d af       	std	Y+61, r24	; 0x3d
    161c:	8d ad       	ldd	r24, Y+61	; 0x3d
    161e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1620:	9a af       	std	Y+58, r25	; 0x3a
    1622:	89 af       	std	Y+57, r24	; 0x39
    1624:	89 ad       	ldd	r24, Y+57	; 0x39
    1626:	9a ad       	ldd	r25, Y+58	; 0x3a
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <LCD_Init4+0x288>
    162c:	9a af       	std	Y+58, r25	; 0x3a
    162e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	
	/* Function Set */
	LCD_sendCommand(FUNCTION_SET4B);
    1630:	88 e2       	ldi	r24, 0x28	; 40
    1632:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_sendCommand>
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a0 e8       	ldi	r26, 0x80	; 128
    163c:	bf e3       	ldi	r27, 0x3F	; 63
    163e:	8d ab       	std	Y+53, r24	; 0x35
    1640:	9e ab       	std	Y+54, r25	; 0x36
    1642:	af ab       	std	Y+55, r26	; 0x37
    1644:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1646:	6d a9       	ldd	r22, Y+53	; 0x35
    1648:	7e a9       	ldd	r23, Y+54	; 0x36
    164a:	8f a9       	ldd	r24, Y+55	; 0x37
    164c:	98 ad       	ldd	r25, Y+56	; 0x38
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a e7       	ldi	r20, 0x7A	; 122
    1654:	53 e4       	ldi	r21, 0x43	; 67
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	89 ab       	std	Y+49, r24	; 0x31
    1660:	9a ab       	std	Y+50, r25	; 0x32
    1662:	ab ab       	std	Y+51, r26	; 0x33
    1664:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1666:	69 a9       	ldd	r22, Y+49	; 0x31
    1668:	7a a9       	ldd	r23, Y+50	; 0x32
    166a:	8b a9       	ldd	r24, Y+51	; 0x33
    166c:	9c a9       	ldd	r25, Y+52	; 0x34
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	5f e3       	ldi	r21, 0x3F	; 63
    1676:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    167a:	88 23       	and	r24, r24
    167c:	2c f4       	brge	.+10     	; 0x1688 <LCD_Init4+0x2e8>
		__ticks = 1;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	98 ab       	std	Y+48, r25	; 0x30
    1684:	8f a7       	std	Y+47, r24	; 0x2f
    1686:	3f c0       	rjmp	.+126    	; 0x1706 <LCD_Init4+0x366>
	else if (__tmp > 65535)
    1688:	69 a9       	ldd	r22, Y+49	; 0x31
    168a:	7a a9       	ldd	r23, Y+50	; 0x32
    168c:	8b a9       	ldd	r24, Y+51	; 0x33
    168e:	9c a9       	ldd	r25, Y+52	; 0x34
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	3f ef       	ldi	r19, 0xFF	; 255
    1694:	4f e7       	ldi	r20, 0x7F	; 127
    1696:	57 e4       	ldi	r21, 0x47	; 71
    1698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    169c:	18 16       	cp	r1, r24
    169e:	4c f5       	brge	.+82     	; 0x16f2 <LCD_Init4+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a0:	6d a9       	ldd	r22, Y+53	; 0x35
    16a2:	7e a9       	ldd	r23, Y+54	; 0x36
    16a4:	8f a9       	ldd	r24, Y+55	; 0x37
    16a6:	98 ad       	ldd	r25, Y+56	; 0x38
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e2       	ldi	r20, 0x20	; 32
    16ae:	51 e4       	ldi	r21, 0x41	; 65
    16b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	98 ab       	std	Y+48, r25	; 0x30
    16c6:	8f a7       	std	Y+47, r24	; 0x2f
    16c8:	0f c0       	rjmp	.+30     	; 0x16e8 <LCD_Init4+0x348>
    16ca:	89 e1       	ldi	r24, 0x19	; 25
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9e a7       	std	Y+46, r25	; 0x2e
    16d0:	8d a7       	std	Y+45, r24	; 0x2d
    16d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <LCD_Init4+0x336>
    16da:	9e a7       	std	Y+46, r25	; 0x2e
    16dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16de:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e0:	98 a9       	ldd	r25, Y+48	; 0x30
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	98 ab       	std	Y+48, r25	; 0x30
    16e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ea:	98 a9       	ldd	r25, Y+48	; 0x30
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	69 f7       	brne	.-38     	; 0x16ca <LCD_Init4+0x32a>
    16f0:	14 c0       	rjmp	.+40     	; 0x171a <LCD_Init4+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f2:	69 a9       	ldd	r22, Y+49	; 0x31
    16f4:	7a a9       	ldd	r23, Y+50	; 0x32
    16f6:	8b a9       	ldd	r24, Y+51	; 0x33
    16f8:	9c a9       	ldd	r25, Y+52	; 0x34
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	98 ab       	std	Y+48, r25	; 0x30
    1704:	8f a7       	std	Y+47, r24	; 0x2f
    1706:	8f a5       	ldd	r24, Y+47	; 0x2f
    1708:	98 a9       	ldd	r25, Y+48	; 0x30
    170a:	9c a7       	std	Y+44, r25	; 0x2c
    170c:	8b a7       	std	Y+43, r24	; 0x2b
    170e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1710:	9c a5       	ldd	r25, Y+44	; 0x2c
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <LCD_Init4+0x372>
    1716:	9c a7       	std	Y+44, r25	; 0x2c
    1718:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	
	/* Display on */
	LCD_sendCommand(DISPLAY_ON);
    171a:	8c e0       	ldi	r24, 0x0C	; 12
    171c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_sendCommand>
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a0 e8       	ldi	r26, 0x80	; 128
    1726:	bf e3       	ldi	r27, 0x3F	; 63
    1728:	8f a3       	std	Y+39, r24	; 0x27
    172a:	98 a7       	std	Y+40, r25	; 0x28
    172c:	a9 a7       	std	Y+41, r26	; 0x29
    172e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1730:	6f a1       	ldd	r22, Y+39	; 0x27
    1732:	78 a5       	ldd	r23, Y+40	; 0x28
    1734:	89 a5       	ldd	r24, Y+41	; 0x29
    1736:	9a a5       	ldd	r25, Y+42	; 0x2a
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	4a e7       	ldi	r20, 0x7A	; 122
    173e:	53 e4       	ldi	r21, 0x43	; 67
    1740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	8b a3       	std	Y+35, r24	; 0x23
    174a:	9c a3       	std	Y+36, r25	; 0x24
    174c:	ad a3       	std	Y+37, r26	; 0x25
    174e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1750:	6b a1       	ldd	r22, Y+35	; 0x23
    1752:	7c a1       	ldd	r23, Y+36	; 0x24
    1754:	8d a1       	ldd	r24, Y+37	; 0x25
    1756:	9e a1       	ldd	r25, Y+38	; 0x26
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	40 e8       	ldi	r20, 0x80	; 128
    175e:	5f e3       	ldi	r21, 0x3F	; 63
    1760:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1764:	88 23       	and	r24, r24
    1766:	2c f4       	brge	.+10     	; 0x1772 <LCD_Init4+0x3d2>
		__ticks = 1;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	9a a3       	std	Y+34, r25	; 0x22
    176e:	89 a3       	std	Y+33, r24	; 0x21
    1770:	3f c0       	rjmp	.+126    	; 0x17f0 <LCD_Init4+0x450>
	else if (__tmp > 65535)
    1772:	6b a1       	ldd	r22, Y+35	; 0x23
    1774:	7c a1       	ldd	r23, Y+36	; 0x24
    1776:	8d a1       	ldd	r24, Y+37	; 0x25
    1778:	9e a1       	ldd	r25, Y+38	; 0x26
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	3f ef       	ldi	r19, 0xFF	; 255
    177e:	4f e7       	ldi	r20, 0x7F	; 127
    1780:	57 e4       	ldi	r21, 0x47	; 71
    1782:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1786:	18 16       	cp	r1, r24
    1788:	4c f5       	brge	.+82     	; 0x17dc <LCD_Init4+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178a:	6f a1       	ldd	r22, Y+39	; 0x27
    178c:	78 a5       	ldd	r23, Y+40	; 0x28
    178e:	89 a5       	ldd	r24, Y+41	; 0x29
    1790:	9a a5       	ldd	r25, Y+42	; 0x2a
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e2       	ldi	r20, 0x20	; 32
    1798:	51 e4       	ldi	r21, 0x41	; 65
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	bc 01       	movw	r22, r24
    17a4:	cd 01       	movw	r24, r26
    17a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	9a a3       	std	Y+34, r25	; 0x22
    17b0:	89 a3       	std	Y+33, r24	; 0x21
    17b2:	0f c0       	rjmp	.+30     	; 0x17d2 <LCD_Init4+0x432>
    17b4:	89 e1       	ldi	r24, 0x19	; 25
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	98 a3       	std	Y+32, r25	; 0x20
    17ba:	8f 8f       	std	Y+31, r24	; 0x1f
    17bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17be:	98 a1       	ldd	r25, Y+32	; 0x20
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <LCD_Init4+0x420>
    17c4:	98 a3       	std	Y+32, r25	; 0x20
    17c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c8:	89 a1       	ldd	r24, Y+33	; 0x21
    17ca:	9a a1       	ldd	r25, Y+34	; 0x22
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	9a a3       	std	Y+34, r25	; 0x22
    17d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d2:	89 a1       	ldd	r24, Y+33	; 0x21
    17d4:	9a a1       	ldd	r25, Y+34	; 0x22
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	69 f7       	brne	.-38     	; 0x17b4 <LCD_Init4+0x414>
    17da:	14 c0       	rjmp	.+40     	; 0x1804 <LCD_Init4+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17dc:	6b a1       	ldd	r22, Y+35	; 0x23
    17de:	7c a1       	ldd	r23, Y+36	; 0x24
    17e0:	8d a1       	ldd	r24, Y+37	; 0x25
    17e2:	9e a1       	ldd	r25, Y+38	; 0x26
    17e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	9a a3       	std	Y+34, r25	; 0x22
    17ee:	89 a3       	std	Y+33, r24	; 0x21
    17f0:	89 a1       	ldd	r24, Y+33	; 0x21
    17f2:	9a a1       	ldd	r25, Y+34	; 0x22
    17f4:	9e 8f       	std	Y+30, r25	; 0x1e
    17f6:	8d 8f       	std	Y+29, r24	; 0x1d
    17f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <LCD_Init4+0x45c>
    1800:	9e 8f       	std	Y+30, r25	; 0x1e
    1802:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	
	/* Display Clear */
	LCD_sendCommand(DISPLAY_CLEAR);
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_sendCommand>
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	a0 ea       	ldi	r26, 0xA0	; 160
    1810:	b1 e4       	ldi	r27, 0x41	; 65
    1812:	89 8f       	std	Y+25, r24	; 0x19
    1814:	9a 8f       	std	Y+26, r25	; 0x1a
    1816:	ab 8f       	std	Y+27, r26	; 0x1b
    1818:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181a:	69 8d       	ldd	r22, Y+25	; 0x19
    181c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    181e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	4a e7       	ldi	r20, 0x7A	; 122
    1828:	53 e4       	ldi	r21, 0x43	; 67
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	8d 8b       	std	Y+21, r24	; 0x15
    1834:	9e 8b       	std	Y+22, r25	; 0x16
    1836:	af 8b       	std	Y+23, r26	; 0x17
    1838:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    183a:	6d 89       	ldd	r22, Y+21	; 0x15
    183c:	7e 89       	ldd	r23, Y+22	; 0x16
    183e:	8f 89       	ldd	r24, Y+23	; 0x17
    1840:	98 8d       	ldd	r25, Y+24	; 0x18
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    184e:	88 23       	and	r24, r24
    1850:	2c f4       	brge	.+10     	; 0x185c <LCD_Init4+0x4bc>
		__ticks = 1;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	9c 8b       	std	Y+20, r25	; 0x14
    1858:	8b 8b       	std	Y+19, r24	; 0x13
    185a:	3f c0       	rjmp	.+126    	; 0x18da <LCD_Init4+0x53a>
	else if (__tmp > 65535)
    185c:	6d 89       	ldd	r22, Y+21	; 0x15
    185e:	7e 89       	ldd	r23, Y+22	; 0x16
    1860:	8f 89       	ldd	r24, Y+23	; 0x17
    1862:	98 8d       	ldd	r25, Y+24	; 0x18
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	3f ef       	ldi	r19, 0xFF	; 255
    1868:	4f e7       	ldi	r20, 0x7F	; 127
    186a:	57 e4       	ldi	r21, 0x47	; 71
    186c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1870:	18 16       	cp	r1, r24
    1872:	4c f5       	brge	.+82     	; 0x18c6 <LCD_Init4+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1874:	69 8d       	ldd	r22, Y+25	; 0x19
    1876:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1878:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e2       	ldi	r20, 0x20	; 32
    1882:	51 e4       	ldi	r21, 0x41	; 65
    1884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9c 8b       	std	Y+20, r25	; 0x14
    189a:	8b 8b       	std	Y+19, r24	; 0x13
    189c:	0f c0       	rjmp	.+30     	; 0x18bc <LCD_Init4+0x51c>
    189e:	89 e1       	ldi	r24, 0x19	; 25
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9a 8b       	std	Y+18, r25	; 0x12
    18a4:	89 8b       	std	Y+17, r24	; 0x11
    18a6:	89 89       	ldd	r24, Y+17	; 0x11
    18a8:	9a 89       	ldd	r25, Y+18	; 0x12
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_Init4+0x50a>
    18ae:	9a 8b       	std	Y+18, r25	; 0x12
    18b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b2:	8b 89       	ldd	r24, Y+19	; 0x13
    18b4:	9c 89       	ldd	r25, Y+20	; 0x14
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	9c 8b       	std	Y+20, r25	; 0x14
    18ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18bc:	8b 89       	ldd	r24, Y+19	; 0x13
    18be:	9c 89       	ldd	r25, Y+20	; 0x14
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	69 f7       	brne	.-38     	; 0x189e <LCD_Init4+0x4fe>
    18c4:	14 c0       	rjmp	.+40     	; 0x18ee <LCD_Init4+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c6:	6d 89       	ldd	r22, Y+21	; 0x15
    18c8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ca:	8f 89       	ldd	r24, Y+23	; 0x17
    18cc:	98 8d       	ldd	r25, Y+24	; 0x18
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9c 8b       	std	Y+20, r25	; 0x14
    18d8:	8b 8b       	std	Y+19, r24	; 0x13
    18da:	8b 89       	ldd	r24, Y+19	; 0x13
    18dc:	9c 89       	ldd	r25, Y+20	; 0x14
    18de:	98 8b       	std	Y+16, r25	; 0x10
    18e0:	8f 87       	std	Y+15, r24	; 0x0f
    18e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e4:	98 89       	ldd	r25, Y+16	; 0x10
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <LCD_Init4+0x546>
    18ea:	98 8b       	std	Y+16, r25	; 0x10
    18ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	
	/* Entry mode set */
	LCD_sendCommand(ENTRY_MODE);
    18ee:	86 e0       	ldi	r24, 0x06	; 6
    18f0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_sendCommand>
	
	/* Set cursor */
	LCD_sendCommand(Set_Cursor);
    18f4:	80 e8       	ldi	r24, 0x80	; 128
    18f6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_sendCommand>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a0 e0       	ldi	r26, 0x00	; 0
    1900:	b0 e4       	ldi	r27, 0x40	; 64
    1902:	8b 87       	std	Y+11, r24	; 0x0b
    1904:	9c 87       	std	Y+12, r25	; 0x0c
    1906:	ad 87       	std	Y+13, r26	; 0x0d
    1908:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190a:	6b 85       	ldd	r22, Y+11	; 0x0b
    190c:	7c 85       	ldd	r23, Y+12	; 0x0c
    190e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1910:	9e 85       	ldd	r25, Y+14	; 0x0e
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	4a e7       	ldi	r20, 0x7A	; 122
    1918:	53 e4       	ldi	r21, 0x43	; 67
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	8f 83       	std	Y+7, r24	; 0x07
    1924:	98 87       	std	Y+8, r25	; 0x08
    1926:	a9 87       	std	Y+9, r26	; 0x09
    1928:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    192a:	6f 81       	ldd	r22, Y+7	; 0x07
    192c:	78 85       	ldd	r23, Y+8	; 0x08
    192e:	89 85       	ldd	r24, Y+9	; 0x09
    1930:	9a 85       	ldd	r25, Y+10	; 0x0a
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e8       	ldi	r20, 0x80	; 128
    1938:	5f e3       	ldi	r21, 0x3F	; 63
    193a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    193e:	88 23       	and	r24, r24
    1940:	2c f4       	brge	.+10     	; 0x194c <LCD_Init4+0x5ac>
		__ticks = 1;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
    194a:	3f c0       	rjmp	.+126    	; 0x19ca <LCD_Init4+0x62a>
	else if (__tmp > 65535)
    194c:	6f 81       	ldd	r22, Y+7	; 0x07
    194e:	78 85       	ldd	r23, Y+8	; 0x08
    1950:	89 85       	ldd	r24, Y+9	; 0x09
    1952:	9a 85       	ldd	r25, Y+10	; 0x0a
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	3f ef       	ldi	r19, 0xFF	; 255
    1958:	4f e7       	ldi	r20, 0x7F	; 127
    195a:	57 e4       	ldi	r21, 0x47	; 71
    195c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1960:	18 16       	cp	r1, r24
    1962:	4c f5       	brge	.+82     	; 0x19b6 <LCD_Init4+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1964:	6b 85       	ldd	r22, Y+11	; 0x0b
    1966:	7c 85       	ldd	r23, Y+12	; 0x0c
    1968:	8d 85       	ldd	r24, Y+13	; 0x0d
    196a:	9e 85       	ldd	r25, Y+14	; 0x0e
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e2       	ldi	r20, 0x20	; 32
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9e 83       	std	Y+6, r25	; 0x06
    198a:	8d 83       	std	Y+5, r24	; 0x05
    198c:	0f c0       	rjmp	.+30     	; 0x19ac <LCD_Init4+0x60c>
    198e:	89 e1       	ldi	r24, 0x19	; 25
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9c 83       	std	Y+4, r25	; 0x04
    1994:	8b 83       	std	Y+3, r24	; 0x03
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <LCD_Init4+0x5fa>
    199e:	9c 83       	std	Y+4, r25	; 0x04
    19a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	9e 83       	std	Y+6, r25	; 0x06
    19aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ac:	8d 81       	ldd	r24, Y+5	; 0x05
    19ae:	9e 81       	ldd	r25, Y+6	; 0x06
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	69 f7       	brne	.-38     	; 0x198e <LCD_Init4+0x5ee>
    19b4:	14 c0       	rjmp	.+40     	; 0x19de <LCD_Init4+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b6:	6f 81       	ldd	r22, Y+7	; 0x07
    19b8:	78 85       	ldd	r23, Y+8	; 0x08
    19ba:	89 85       	ldd	r24, Y+9	; 0x09
    19bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	9e 81       	ldd	r25, Y+6	; 0x06
    19ce:	9a 83       	std	Y+2, r25	; 0x02
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <LCD_Init4+0x636>
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    19de:	cc 5a       	subi	r28, 0xAC	; 172
    19e0:	df 4f       	sbci	r29, 0xFF	; 255
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	08 95       	ret

000019f6 <LCD_sendCommand>:
}
#endif

/* LCD send commands function to configure LCD for any mode */
void LCD_sendCommand(uint8 cmd)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	0f 92       	push	r0
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	89 83       	std	Y+1, r24	; 0x01
	/* check LCD connection mode */
	#if (mode == 4)
	{
		LCD_SendCommand4(cmd);
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_SendCommand4>
	#elif (mode == 8)
	{
		LCD_SendCommand8(cmd);
	}
	#endif
}
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <LCD_SendCommand4>:

#if(mode == 4)
/* LCD send commands function to configure LCD for 4-bit mode */
static void LCD_SendCommand4(uint8 cmd)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	ea 97       	sbiw	r28, 0x3a	; 58
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	8a af       	std	Y+58, r24	; 0x3a
	/* Set RS pin to 0 value for select command register */
	DIO_SetPinValue(Control, RS, LOW);
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	62 e0       	ldi	r22, 0x02	; 2
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
	/* Set R_W pin to 0 value for select write operation */
	DIO_SetPinValue(Control, R_W, LOW);
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
	/* Set E to HIGH */
	DIO_SetPinValue(Control, EN, HIGH);
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	63 e0       	ldi	r22, 0x03	; 3
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
	
	/* SEND the command high nibble to D4:D7 */
	uint8 x  = cmd & 0xf0;
    1a44:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a46:	80 7f       	andi	r24, 0xF0	; 240
    1a48:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPortValue(Date, x);
    1a4a:	82 e0       	ldi	r24, 0x02	; 2
    1a4c:	69 ad       	ldd	r22, Y+57	; 0x39
    1a4e:	0e 94 af 08 	call	0x115e	; 0x115e <DIO_SetPortValue>
	
	/* Set EN pin to 1 value then to 0 to make pulse */
	DIO_SetPinValue(Control, EN, LOW);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	63 e0       	ldi	r22, 0x03	; 3
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e8       	ldi	r26, 0x80	; 128
    1a62:	bf e3       	ldi	r27, 0x3F	; 63
    1a64:	8d ab       	std	Y+53, r24	; 0x35
    1a66:	9e ab       	std	Y+54, r25	; 0x36
    1a68:	af ab       	std	Y+55, r26	; 0x37
    1a6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a70:	8f a9       	ldd	r24, Y+55	; 0x37
    1a72:	98 ad       	ldd	r25, Y+56	; 0x38
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	4a e7       	ldi	r20, 0x7A	; 122
    1a7a:	53 e4       	ldi	r21, 0x43	; 67
    1a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	89 ab       	std	Y+49, r24	; 0x31
    1a86:	9a ab       	std	Y+50, r25	; 0x32
    1a88:	ab ab       	std	Y+51, r26	; 0x33
    1a8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a90:	8b a9       	ldd	r24, Y+51	; 0x33
    1a92:	9c a9       	ldd	r25, Y+52	; 0x34
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	5f e3       	ldi	r21, 0x3F	; 63
    1a9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa0:	88 23       	and	r24, r24
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <LCD_SendCommand4+0x9e>
		__ticks = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	98 ab       	std	Y+48, r25	; 0x30
    1aaa:	8f a7       	std	Y+47, r24	; 0x2f
    1aac:	3f c0       	rjmp	.+126    	; 0x1b2c <LCD_SendCommand4+0x11c>
	else if (__tmp > 65535)
    1aae:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	4f e7       	ldi	r20, 0x7F	; 127
    1abc:	57 e4       	ldi	r21, 0x47	; 71
    1abe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac2:	18 16       	cp	r1, r24
    1ac4:	4c f5       	brge	.+82     	; 0x1b18 <LCD_SendCommand4+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac8:	7e a9       	ldd	r23, Y+54	; 0x36
    1aca:	8f a9       	ldd	r24, Y+55	; 0x37
    1acc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e2       	ldi	r20, 0x20	; 32
    1ad4:	51 e4       	ldi	r21, 0x41	; 65
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	bc 01       	movw	r22, r24
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	98 ab       	std	Y+48, r25	; 0x30
    1aec:	8f a7       	std	Y+47, r24	; 0x2f
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <LCD_SendCommand4+0xfe>
    1af0:	89 e1       	ldi	r24, 0x19	; 25
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9e a7       	std	Y+46, r25	; 0x2e
    1af6:	8d a7       	std	Y+45, r24	; 0x2d
    1af8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1afa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCD_SendCommand4+0xec>
    1b00:	9e a7       	std	Y+46, r25	; 0x2e
    1b02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b06:	98 a9       	ldd	r25, Y+48	; 0x30
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	98 ab       	std	Y+48, r25	; 0x30
    1b0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b10:	98 a9       	ldd	r25, Y+48	; 0x30
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	69 f7       	brne	.-38     	; 0x1af0 <LCD_SendCommand4+0xe0>
    1b16:	14 c0       	rjmp	.+40     	; 0x1b40 <LCD_SendCommand4+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b18:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	98 ab       	std	Y+48, r25	; 0x30
    1b2a:	8f a7       	std	Y+47, r24	; 0x2f
    1b2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b30:	9c a7       	std	Y+44, r25	; 0x2c
    1b32:	8b a7       	std	Y+43, r24	; 0x2b
    1b34:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b36:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <LCD_SendCommand4+0x128>
    1b3c:	9c a7       	std	Y+44, r25	; 0x2c
    1b3e:	8b a7       	std	Y+43, r24	; 0x2b
	/* Wait for E to settle */
	_delay_ms(1);
	DIO_SetPinValue(Control, EN, HIGH);
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	63 e0       	ldi	r22, 0x03	; 3
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	a0 e8       	ldi	r26, 0x80	; 128
    1b50:	bf e3       	ldi	r27, 0x3F	; 63
    1b52:	8f a3       	std	Y+39, r24	; 0x27
    1b54:	98 a7       	std	Y+40, r25	; 0x28
    1b56:	a9 a7       	std	Y+41, r26	; 0x29
    1b58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b5c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	4a e7       	ldi	r20, 0x7A	; 122
    1b68:	53 e4       	ldi	r21, 0x43	; 67
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	8b a3       	std	Y+35, r24	; 0x23
    1b74:	9c a3       	std	Y+36, r25	; 0x24
    1b76:	ad a3       	std	Y+37, r26	; 0x25
    1b78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b80:	9e a1       	ldd	r25, Y+38	; 0x26
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	5f e3       	ldi	r21, 0x3F	; 63
    1b8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b8e:	88 23       	and	r24, r24
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <LCD_SendCommand4+0x18c>
		__ticks = 1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9a a3       	std	Y+34, r25	; 0x22
    1b98:	89 a3       	std	Y+33, r24	; 0x21
    1b9a:	3f c0       	rjmp	.+126    	; 0x1c1a <LCD_SendCommand4+0x20a>
	else if (__tmp > 65535)
    1b9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	3f ef       	ldi	r19, 0xFF	; 255
    1ba8:	4f e7       	ldi	r20, 0x7F	; 127
    1baa:	57 e4       	ldi	r21, 0x47	; 71
    1bac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb0:	18 16       	cp	r1, r24
    1bb2:	4c f5       	brge	.+82     	; 0x1c06 <LCD_SendCommand4+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb4:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb6:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb8:	89 a5       	ldd	r24, Y+41	; 0x29
    1bba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e2       	ldi	r20, 0x20	; 32
    1bc2:	51 e4       	ldi	r21, 0x41	; 65
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9a a3       	std	Y+34, r25	; 0x22
    1bda:	89 a3       	std	Y+33, r24	; 0x21
    1bdc:	0f c0       	rjmp	.+30     	; 0x1bfc <LCD_SendCommand4+0x1ec>
    1bde:	89 e1       	ldi	r24, 0x19	; 25
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	98 a3       	std	Y+32, r25	; 0x20
    1be4:	8f 8f       	std	Y+31, r24	; 0x1f
    1be6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1be8:	98 a1       	ldd	r25, Y+32	; 0x20
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <LCD_SendCommand4+0x1da>
    1bee:	98 a3       	std	Y+32, r25	; 0x20
    1bf0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	9a a3       	std	Y+34, r25	; 0x22
    1bfa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	69 f7       	brne	.-38     	; 0x1bde <LCD_SendCommand4+0x1ce>
    1c04:	14 c0       	rjmp	.+40     	; 0x1c2e <LCD_SendCommand4+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c06:	6b a1       	ldd	r22, Y+35	; 0x23
    1c08:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	9a a3       	std	Y+34, r25	; 0x22
    1c18:	89 a3       	std	Y+33, r24	; 0x21
    1c1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c20:	8d 8f       	std	Y+29, r24	; 0x1d
    1c22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_SendCommand4+0x216>
    1c2a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c2c:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Delay for 2ms to let the LCD execute command */
	_delay_ms(1);
	
	/* shift cmd to right by 4 , to send the Low nibble to D0:D4 */
	x  = (cmd << 4);
    1c2e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c30:	82 95       	swap	r24
    1c32:	80 7f       	andi	r24, 0xF0	; 240
    1c34:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPortValue(Date, x);
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	69 ad       	ldd	r22, Y+57	; 0x39
    1c3a:	0e 94 af 08 	call	0x115e	; 0x115e <DIO_SetPortValue>
	/* Set EN pin to 1 value then to 0 to make pulse */
	DIO_SetPinValue(Control, EN, LOW);
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	63 e0       	ldi	r22, 0x03	; 3
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a0 e8       	ldi	r26, 0x80	; 128
    1c4e:	bf e3       	ldi	r27, 0x3F	; 63
    1c50:	89 8f       	std	Y+25, r24	; 0x19
    1c52:	9a 8f       	std	Y+26, r25	; 0x1a
    1c54:	ab 8f       	std	Y+27, r26	; 0x1b
    1c56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c58:	69 8d       	ldd	r22, Y+25	; 0x19
    1c5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a e7       	ldi	r20, 0x7A	; 122
    1c66:	53 e4       	ldi	r21, 0x43	; 67
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	8d 8b       	std	Y+21, r24	; 0x15
    1c72:	9e 8b       	std	Y+22, r25	; 0x16
    1c74:	af 8b       	std	Y+23, r26	; 0x17
    1c76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c78:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <LCD_SendCommand4+0x28a>
		__ticks = 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9c 8b       	std	Y+20, r25	; 0x14
    1c96:	8b 8b       	std	Y+19, r24	; 0x13
    1c98:	3f c0       	rjmp	.+126    	; 0x1d18 <LCD_SendCommand4+0x308>
	else if (__tmp > 65535)
    1c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	3f ef       	ldi	r19, 0xFF	; 255
    1ca6:	4f e7       	ldi	r20, 0x7F	; 127
    1ca8:	57 e4       	ldi	r21, 0x47	; 71
    1caa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cae:	18 16       	cp	r1, r24
    1cb0:	4c f5       	brge	.+82     	; 0x1d04 <LCD_SendCommand4+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e2       	ldi	r20, 0x20	; 32
    1cc0:	51 e4       	ldi	r21, 0x41	; 65
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9c 8b       	std	Y+20, r25	; 0x14
    1cd8:	8b 8b       	std	Y+19, r24	; 0x13
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <LCD_SendCommand4+0x2ea>
    1cdc:	89 e1       	ldi	r24, 0x19	; 25
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9a 8b       	std	Y+18, r25	; 0x12
    1ce2:	89 8b       	std	Y+17, r24	; 0x11
    1ce4:	89 89       	ldd	r24, Y+17	; 0x11
    1ce6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_SendCommand4+0x2d8>
    1cec:	9a 8b       	std	Y+18, r25	; 0x12
    1cee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	9c 8b       	std	Y+20, r25	; 0x14
    1cf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	69 f7       	brne	.-38     	; 0x1cdc <LCD_SendCommand4+0x2cc>
    1d02:	14 c0       	rjmp	.+40     	; 0x1d2c <LCD_SendCommand4+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d04:	6d 89       	ldd	r22, Y+21	; 0x15
    1d06:	7e 89       	ldd	r23, Y+22	; 0x16
    1d08:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9c 8b       	std	Y+20, r25	; 0x14
    1d16:	8b 8b       	std	Y+19, r24	; 0x13
    1d18:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1c:	98 8b       	std	Y+16, r25	; 0x10
    1d1e:	8f 87       	std	Y+15, r24	; 0x0f
    1d20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d22:	98 89       	ldd	r25, Y+16	; 0x10
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <LCD_SendCommand4+0x314>
    1d28:	98 8b       	std	Y+16, r25	; 0x10
    1d2a:	8f 87       	std	Y+15, r24	; 0x0f
	/* Wait for E to settle */
	_delay_ms(1);
	DIO_SetPinValue(Control, EN, HIGH);
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	63 e0       	ldi	r22, 0x03	; 3
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	a0 e8       	ldi	r26, 0x80	; 128
    1d3c:	bf e3       	ldi	r27, 0x3F	; 63
    1d3e:	8b 87       	std	Y+11, r24	; 0x0b
    1d40:	9c 87       	std	Y+12, r25	; 0x0c
    1d42:	ad 87       	std	Y+13, r26	; 0x0d
    1d44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	4a e7       	ldi	r20, 0x7A	; 122
    1d54:	53 e4       	ldi	r21, 0x43	; 67
    1d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	8f 83       	std	Y+7, r24	; 0x07
    1d60:	98 87       	std	Y+8, r25	; 0x08
    1d62:	a9 87       	std	Y+9, r26	; 0x09
    1d64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d66:	6f 81       	ldd	r22, Y+7	; 0x07
    1d68:	78 85       	ldd	r23, Y+8	; 0x08
    1d6a:	89 85       	ldd	r24, Y+9	; 0x09
    1d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e8       	ldi	r20, 0x80	; 128
    1d74:	5f e3       	ldi	r21, 0x3F	; 63
    1d76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d7a:	88 23       	and	r24, r24
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <LCD_SendCommand4+0x378>
		__ticks = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9e 83       	std	Y+6, r25	; 0x06
    1d84:	8d 83       	std	Y+5, r24	; 0x05
    1d86:	3f c0       	rjmp	.+126    	; 0x1e06 <LCD_SendCommand4+0x3f6>
	else if (__tmp > 65535)
    1d88:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8a:	78 85       	ldd	r23, Y+8	; 0x08
    1d8c:	89 85       	ldd	r24, Y+9	; 0x09
    1d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	3f ef       	ldi	r19, 0xFF	; 255
    1d94:	4f e7       	ldi	r20, 0x7F	; 127
    1d96:	57 e4       	ldi	r21, 0x47	; 71
    1d98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d9c:	18 16       	cp	r1, r24
    1d9e:	4c f5       	brge	.+82     	; 0x1df2 <LCD_SendCommand4+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e2       	ldi	r20, 0x20	; 32
    1dae:	51 e4       	ldi	r21, 0x41	; 65
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	bc 01       	movw	r22, r24
    1dba:	cd 01       	movw	r24, r26
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9e 83       	std	Y+6, r25	; 0x06
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
    1dc8:	0f c0       	rjmp	.+30     	; 0x1de8 <LCD_SendCommand4+0x3d8>
    1dca:	89 e1       	ldi	r24, 0x19	; 25
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9c 83       	std	Y+4, r25	; 0x04
    1dd0:	8b 83       	std	Y+3, r24	; 0x03
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_SendCommand4+0x3c6>
    1dda:	9c 83       	std	Y+4, r25	; 0x04
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	9e 83       	std	Y+6, r25	; 0x06
    1de6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dea:	9e 81       	ldd	r25, Y+6	; 0x06
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	69 f7       	brne	.-38     	; 0x1dca <LCD_SendCommand4+0x3ba>
    1df0:	14 c0       	rjmp	.+40     	; 0x1e1a <LCD_SendCommand4+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df2:	6f 81       	ldd	r22, Y+7	; 0x07
    1df4:	78 85       	ldd	r23, Y+8	; 0x08
    1df6:	89 85       	ldd	r24, Y+9	; 0x09
    1df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9e 83       	std	Y+6, r25	; 0x06
    1e04:	8d 83       	std	Y+5, r24	; 0x05
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	9a 81       	ldd	r25, Y+2	; 0x02
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_SendCommand4+0x402>
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	89 83       	std	Y+1, r24	; 0x01
	/* Delay for 2ms to let the LCD execute command */
	_delay_ms(1);
}
    1e1a:	ea 96       	adiw	r28, 0x3a	; 58
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <LCD_displayCharacter>:
}
#endif

/* LCD send char function to put on LCD display (panel) for any mode */
void LCD_displayCharacter(uint8 data)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	0f 92       	push	r0
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	89 83       	std	Y+1, r24	; 0x01
	//check LCD connection mode
	#if (mode == 4)
	{
		LCD_SendChar4(data);
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_SendChar4>
	#elif (mode == 8)
	{
		LCD_SendChar8(data);
	}
	#endif
}
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <LCD_SendChar4>:

#if(mode == 4)
/* LCD send char function to put on LCD display (panel) for 4-bit mode */
static void LCD_SendChar4(uint8 data)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	ea 97       	sbiw	r28, 0x3a	; 58
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	8a af       	std	Y+58, r24	; 0x3a
	/* Set RS pin to 1 value for select data register */
	DIO_SetPinValue(Control, RS, HIGH);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	62 e0       	ldi	r22, 0x02	; 2
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
	/* Set R_W pin to 0 value for select write operation */
	DIO_SetPinValue(Control, R_W, LOW);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
	/* Set E to HIGH */
	DIO_SetPinValue(Control, EN, HIGH);
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	63 e0       	ldi	r22, 0x03	; 3
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
	
	/* SEND the Data high nibble to D4:D7 */
	uint8 x  = data & 0xf0;
    1e7a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e7c:	80 7f       	andi	r24, 0xF0	; 240
    1e7e:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPortValue(Date, x);
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	69 ad       	ldd	r22, Y+57	; 0x39
    1e84:	0e 94 af 08 	call	0x115e	; 0x115e <DIO_SetPortValue>
	/* Set EN pin to 1 value then to 0 to make pulse */
	DIO_SetPinValue(Control, EN, LOW);
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	63 e0       	ldi	r22, 0x03	; 3
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 e0       	ldi	r26, 0x00	; 0
    1e98:	b0 e4       	ldi	r27, 0x40	; 64
    1e9a:	8d ab       	std	Y+53, r24	; 0x35
    1e9c:	9e ab       	std	Y+54, r25	; 0x36
    1e9e:	af ab       	std	Y+55, r26	; 0x37
    1ea0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a e7       	ldi	r20, 0x7A	; 122
    1eb0:	53 e4       	ldi	r21, 0x43	; 67
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	89 ab       	std	Y+49, r24	; 0x31
    1ebc:	9a ab       	std	Y+50, r25	; 0x32
    1ebe:	ab ab       	std	Y+51, r26	; 0x33
    1ec0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ec2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <LCD_SendChar4+0x9e>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	98 ab       	std	Y+48, r25	; 0x30
    1ee0:	8f a7       	std	Y+47, r24	; 0x2f
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <LCD_SendChar4+0x11c>
	else if (__tmp > 65535)
    1ee4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eea:	9c a9       	ldd	r25, Y+52	; 0x34
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <LCD_SendChar4+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	6d a9       	ldd	r22, Y+53	; 0x35
    1efe:	7e a9       	ldd	r23, Y+54	; 0x36
    1f00:	8f a9       	ldd	r24, Y+55	; 0x37
    1f02:	98 ad       	ldd	r25, Y+56	; 0x38
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	98 ab       	std	Y+48, r25	; 0x30
    1f22:	8f a7       	std	Y+47, r24	; 0x2f
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <LCD_SendChar4+0xfe>
    1f26:	89 e1       	ldi	r24, 0x19	; 25
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9e a7       	std	Y+46, r25	; 0x2e
    1f2c:	8d a7       	std	Y+45, r24	; 0x2d
    1f2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f30:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_SendChar4+0xec>
    1f36:	9e a7       	std	Y+46, r25	; 0x2e
    1f38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	98 ab       	std	Y+48, r25	; 0x30
    1f42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f46:	98 a9       	ldd	r25, Y+48	; 0x30
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <LCD_SendChar4+0xe0>
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <LCD_SendChar4+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f50:	7a a9       	ldd	r23, Y+50	; 0x32
    1f52:	8b a9       	ldd	r24, Y+51	; 0x33
    1f54:	9c a9       	ldd	r25, Y+52	; 0x34
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	98 ab       	std	Y+48, r25	; 0x30
    1f60:	8f a7       	std	Y+47, r24	; 0x2f
    1f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f64:	98 a9       	ldd	r25, Y+48	; 0x30
    1f66:	9c a7       	std	Y+44, r25	; 0x2c
    1f68:	8b a7       	std	Y+43, r24	; 0x2b
    1f6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <LCD_SendChar4+0x128>
    1f72:	9c a7       	std	Y+44, r25	; 0x2c
    1f74:	8b a7       	std	Y+43, r24	; 0x2b
	/* Wait for E to settle */
	_delay_ms(2);
	DIO_SetPinValue(Control, EN, HIGH);
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	63 e0       	ldi	r22, 0x03	; 3
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	a0 e0       	ldi	r26, 0x00	; 0
    1f86:	b0 e4       	ldi	r27, 0x40	; 64
    1f88:	8f a3       	std	Y+39, r24	; 0x27
    1f8a:	98 a7       	std	Y+40, r25	; 0x28
    1f8c:	a9 a7       	std	Y+41, r26	; 0x29
    1f8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f90:	6f a1       	ldd	r22, Y+39	; 0x27
    1f92:	78 a5       	ldd	r23, Y+40	; 0x28
    1f94:	89 a5       	ldd	r24, Y+41	; 0x29
    1f96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	4a e7       	ldi	r20, 0x7A	; 122
    1f9e:	53 e4       	ldi	r21, 0x43	; 67
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	8b a3       	std	Y+35, r24	; 0x23
    1faa:	9c a3       	std	Y+36, r25	; 0x24
    1fac:	ad a3       	std	Y+37, r26	; 0x25
    1fae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e8       	ldi	r20, 0x80	; 128
    1fbe:	5f e3       	ldi	r21, 0x3F	; 63
    1fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fc4:	88 23       	and	r24, r24
    1fc6:	2c f4       	brge	.+10     	; 0x1fd2 <LCD_SendChar4+0x18c>
		__ticks = 1;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9a a3       	std	Y+34, r25	; 0x22
    1fce:	89 a3       	std	Y+33, r24	; 0x21
    1fd0:	3f c0       	rjmp	.+126    	; 0x2050 <LCD_SendChar4+0x20a>
	else if (__tmp > 65535)
    1fd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	3f ef       	ldi	r19, 0xFF	; 255
    1fde:	4f e7       	ldi	r20, 0x7F	; 127
    1fe0:	57 e4       	ldi	r21, 0x47	; 71
    1fe2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fe6:	18 16       	cp	r1, r24
    1fe8:	4c f5       	brge	.+82     	; 0x203c <LCD_SendChar4+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fea:	6f a1       	ldd	r22, Y+39	; 0x27
    1fec:	78 a5       	ldd	r23, Y+40	; 0x28
    1fee:	89 a5       	ldd	r24, Y+41	; 0x29
    1ff0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e2       	ldi	r20, 0x20	; 32
    1ff8:	51 e4       	ldi	r21, 0x41	; 65
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	9a a3       	std	Y+34, r25	; 0x22
    2010:	89 a3       	std	Y+33, r24	; 0x21
    2012:	0f c0       	rjmp	.+30     	; 0x2032 <LCD_SendChar4+0x1ec>
    2014:	89 e1       	ldi	r24, 0x19	; 25
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	98 a3       	std	Y+32, r25	; 0x20
    201a:	8f 8f       	std	Y+31, r24	; 0x1f
    201c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    201e:	98 a1       	ldd	r25, Y+32	; 0x20
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <LCD_SendChar4+0x1da>
    2024:	98 a3       	std	Y+32, r25	; 0x20
    2026:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2028:	89 a1       	ldd	r24, Y+33	; 0x21
    202a:	9a a1       	ldd	r25, Y+34	; 0x22
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	9a a3       	std	Y+34, r25	; 0x22
    2030:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2032:	89 a1       	ldd	r24, Y+33	; 0x21
    2034:	9a a1       	ldd	r25, Y+34	; 0x22
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	69 f7       	brne	.-38     	; 0x2014 <LCD_SendChar4+0x1ce>
    203a:	14 c0       	rjmp	.+40     	; 0x2064 <LCD_SendChar4+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203c:	6b a1       	ldd	r22, Y+35	; 0x23
    203e:	7c a1       	ldd	r23, Y+36	; 0x24
    2040:	8d a1       	ldd	r24, Y+37	; 0x25
    2042:	9e a1       	ldd	r25, Y+38	; 0x26
    2044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	9a a3       	std	Y+34, r25	; 0x22
    204e:	89 a3       	std	Y+33, r24	; 0x21
    2050:	89 a1       	ldd	r24, Y+33	; 0x21
    2052:	9a a1       	ldd	r25, Y+34	; 0x22
    2054:	9e 8f       	std	Y+30, r25	; 0x1e
    2056:	8d 8f       	std	Y+29, r24	; 0x1d
    2058:	8d 8d       	ldd	r24, Y+29	; 0x1d
    205a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <LCD_SendChar4+0x216>
    2060:	9e 8f       	std	Y+30, r25	; 0x1e
    2062:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Delay for 2ms to let the LCD execute command */
	_delay_ms(2);
	
	/* shift data to right by 4 , to send the Low nibble to D0:D4 */
	x  = (data << 4);
    2064:	8a ad       	ldd	r24, Y+58	; 0x3a
    2066:	82 95       	swap	r24
    2068:	80 7f       	andi	r24, 0xF0	; 240
    206a:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPortValue(Date, x);
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	69 ad       	ldd	r22, Y+57	; 0x39
    2070:	0e 94 af 08 	call	0x115e	; 0x115e <DIO_SetPortValue>
	/* Set EN pin to 1 value then to 0 to make pulse */
	DIO_SetPinValue(Control, EN, LOW);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	63 e0       	ldi	r22, 0x03	; 3
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a0 e0       	ldi	r26, 0x00	; 0
    2084:	b0 e4       	ldi	r27, 0x40	; 64
    2086:	89 8f       	std	Y+25, r24	; 0x19
    2088:	9a 8f       	std	Y+26, r25	; 0x1a
    208a:	ab 8f       	std	Y+27, r26	; 0x1b
    208c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208e:	69 8d       	ldd	r22, Y+25	; 0x19
    2090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	4a e7       	ldi	r20, 0x7A	; 122
    209c:	53 e4       	ldi	r21, 0x43	; 67
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	8d 8b       	std	Y+21, r24	; 0x15
    20a8:	9e 8b       	std	Y+22, r25	; 0x16
    20aa:	af 8b       	std	Y+23, r26	; 0x17
    20ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ae:	6d 89       	ldd	r22, Y+21	; 0x15
    20b0:	7e 89       	ldd	r23, Y+22	; 0x16
    20b2:	8f 89       	ldd	r24, Y+23	; 0x17
    20b4:	98 8d       	ldd	r25, Y+24	; 0x18
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	5f e3       	ldi	r21, 0x3F	; 63
    20be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	2c f4       	brge	.+10     	; 0x20d0 <LCD_SendChar4+0x28a>
		__ticks = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9c 8b       	std	Y+20, r25	; 0x14
    20cc:	8b 8b       	std	Y+19, r24	; 0x13
    20ce:	3f c0       	rjmp	.+126    	; 0x214e <LCD_SendChar4+0x308>
	else if (__tmp > 65535)
    20d0:	6d 89       	ldd	r22, Y+21	; 0x15
    20d2:	7e 89       	ldd	r23, Y+22	; 0x16
    20d4:	8f 89       	ldd	r24, Y+23	; 0x17
    20d6:	98 8d       	ldd	r25, Y+24	; 0x18
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	3f ef       	ldi	r19, 0xFF	; 255
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	57 e4       	ldi	r21, 0x47	; 71
    20e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	4c f5       	brge	.+82     	; 0x213a <LCD_SendChar4+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e2       	ldi	r20, 0x20	; 32
    20f6:	51 e4       	ldi	r21, 0x41	; 65
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9c 8b       	std	Y+20, r25	; 0x14
    210e:	8b 8b       	std	Y+19, r24	; 0x13
    2110:	0f c0       	rjmp	.+30     	; 0x2130 <LCD_SendChar4+0x2ea>
    2112:	89 e1       	ldi	r24, 0x19	; 25
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9a 8b       	std	Y+18, r25	; 0x12
    2118:	89 8b       	std	Y+17, r24	; 0x11
    211a:	89 89       	ldd	r24, Y+17	; 0x11
    211c:	9a 89       	ldd	r25, Y+18	; 0x12
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_SendChar4+0x2d8>
    2122:	9a 8b       	std	Y+18, r25	; 0x12
    2124:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2126:	8b 89       	ldd	r24, Y+19	; 0x13
    2128:	9c 89       	ldd	r25, Y+20	; 0x14
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	9c 8b       	std	Y+20, r25	; 0x14
    212e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2130:	8b 89       	ldd	r24, Y+19	; 0x13
    2132:	9c 89       	ldd	r25, Y+20	; 0x14
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	69 f7       	brne	.-38     	; 0x2112 <LCD_SendChar4+0x2cc>
    2138:	14 c0       	rjmp	.+40     	; 0x2162 <LCD_SendChar4+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213a:	6d 89       	ldd	r22, Y+21	; 0x15
    213c:	7e 89       	ldd	r23, Y+22	; 0x16
    213e:	8f 89       	ldd	r24, Y+23	; 0x17
    2140:	98 8d       	ldd	r25, Y+24	; 0x18
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9c 8b       	std	Y+20, r25	; 0x14
    214c:	8b 8b       	std	Y+19, r24	; 0x13
    214e:	8b 89       	ldd	r24, Y+19	; 0x13
    2150:	9c 89       	ldd	r25, Y+20	; 0x14
    2152:	98 8b       	std	Y+16, r25	; 0x10
    2154:	8f 87       	std	Y+15, r24	; 0x0f
    2156:	8f 85       	ldd	r24, Y+15	; 0x0f
    2158:	98 89       	ldd	r25, Y+16	; 0x10
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <LCD_SendChar4+0x314>
    215e:	98 8b       	std	Y+16, r25	; 0x10
    2160:	8f 87       	std	Y+15, r24	; 0x0f
	/* Wait for E to settle */
	_delay_ms(2);
	DIO_SetPinValue(Control, EN, HIGH);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	63 e0       	ldi	r22, 0x03	; 3
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a0 e0       	ldi	r26, 0x00	; 0
    2172:	b0 e4       	ldi	r27, 0x40	; 64
    2174:	8b 87       	std	Y+11, r24	; 0x0b
    2176:	9c 87       	std	Y+12, r25	; 0x0c
    2178:	ad 87       	std	Y+13, r26	; 0x0d
    217a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a e7       	ldi	r20, 0x7A	; 122
    218a:	53 e4       	ldi	r21, 0x43	; 67
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8f 83       	std	Y+7, r24	; 0x07
    2196:	98 87       	std	Y+8, r25	; 0x08
    2198:	a9 87       	std	Y+9, r26	; 0x09
    219a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    219c:	6f 81       	ldd	r22, Y+7	; 0x07
    219e:	78 85       	ldd	r23, Y+8	; 0x08
    21a0:	89 85       	ldd	r24, Y+9	; 0x09
    21a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	2c f4       	brge	.+10     	; 0x21be <LCD_SendChar4+0x378>
		__ticks = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	3f c0       	rjmp	.+126    	; 0x223c <LCD_SendChar4+0x3f6>
	else if (__tmp > 65535)
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	4c f5       	brge	.+82     	; 0x2228 <LCD_SendChar4+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e2       	ldi	r20, 0x20	; 32
    21e4:	51 e4       	ldi	r21, 0x41	; 65
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	0f c0       	rjmp	.+30     	; 0x221e <LCD_SendChar4+0x3d8>
    2200:	89 e1       	ldi	r24, 0x19	; 25
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <LCD_SendChar4+0x3c6>
    2210:	9c 83       	std	Y+4, r25	; 0x04
    2212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	9e 81       	ldd	r25, Y+6	; 0x06
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	69 f7       	brne	.-38     	; 0x2200 <LCD_SendChar4+0x3ba>
    2226:	14 c0       	rjmp	.+40     	; 0x2250 <LCD_SendChar4+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <LCD_SendChar4+0x402>
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
	/* Delay for 2ms to let the LCD execute command */
	_delay_ms(2);
}
    2250:	ea 96       	adiw	r28, 0x3a	; 58
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <LCD_displayString>:
}
#endif

/* LCD send string function to put on LCD display (panel) */
void LCD_displayString(uint8 * data)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	61 97       	sbiw	r28, 0x11	; 17
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	99 8b       	std	Y+17, r25	; 0x11
    2278:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i; 
	for (i = 0; data[i] != '\0'; i++)
    227a:	1f 86       	std	Y+15, r1	; 0x0f
    227c:	80 c0       	rjmp	.+256    	; 0x237e <LCD_displayString+0x11c>
	{
		LCD_displayCharacter(data[i]);
    227e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	88 89       	ldd	r24, Y+16	; 0x10
    2286:	99 89       	ldd	r25, Y+17	; 0x11
    2288:	fc 01       	movw	r30, r24
    228a:	e2 0f       	add	r30, r18
    228c:	f3 1f       	adc	r31, r19
    228e:	80 81       	ld	r24, Z
    2290:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_displayCharacter>
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a0 e0       	ldi	r26, 0x00	; 0
    229a:	b0 e4       	ldi	r27, 0x40	; 64
    229c:	8b 87       	std	Y+11, r24	; 0x0b
    229e:	9c 87       	std	Y+12, r25	; 0x0c
    22a0:	ad 87       	std	Y+13, r26	; 0x0d
    22a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	4a e7       	ldi	r20, 0x7A	; 122
    22b2:	53 e4       	ldi	r21, 0x43	; 67
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	8f 83       	std	Y+7, r24	; 0x07
    22be:	98 87       	std	Y+8, r25	; 0x08
    22c0:	a9 87       	std	Y+9, r26	; 0x09
    22c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c4:	6f 81       	ldd	r22, Y+7	; 0x07
    22c6:	78 85       	ldd	r23, Y+8	; 0x08
    22c8:	89 85       	ldd	r24, Y+9	; 0x09
    22ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e8       	ldi	r20, 0x80	; 128
    22d2:	5f e3       	ldi	r21, 0x3F	; 63
    22d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d8:	88 23       	and	r24, r24
    22da:	2c f4       	brge	.+10     	; 0x22e6 <LCD_displayString+0x84>
		__ticks = 1;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	3f c0       	rjmp	.+126    	; 0x2364 <LCD_displayString+0x102>
	else if (__tmp > 65535)
    22e6:	6f 81       	ldd	r22, Y+7	; 0x07
    22e8:	78 85       	ldd	r23, Y+8	; 0x08
    22ea:	89 85       	ldd	r24, Y+9	; 0x09
    22ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	3f ef       	ldi	r19, 0xFF	; 255
    22f2:	4f e7       	ldi	r20, 0x7F	; 127
    22f4:	57 e4       	ldi	r21, 0x47	; 71
    22f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22fa:	18 16       	cp	r1, r24
    22fc:	4c f5       	brge	.+82     	; 0x2350 <LCD_displayString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2300:	7c 85       	ldd	r23, Y+12	; 0x0c
    2302:	8d 85       	ldd	r24, Y+13	; 0x0d
    2304:	9e 85       	ldd	r25, Y+14	; 0x0e
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e2       	ldi	r20, 0x20	; 32
    230c:	51 e4       	ldi	r21, 0x41	; 65
    230e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	0f c0       	rjmp	.+30     	; 0x2346 <LCD_displayString+0xe4>
    2328:	89 e1       	ldi	r24, 0x19	; 25
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	8b 83       	std	Y+3, r24	; 0x03
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <LCD_displayString+0xd2>
    2338:	9c 83       	std	Y+4, r25	; 0x04
    233a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2346:	8d 81       	ldd	r24, Y+5	; 0x05
    2348:	9e 81       	ldd	r25, Y+6	; 0x06
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	69 f7       	brne	.-38     	; 0x2328 <LCD_displayString+0xc6>
    234e:	14 c0       	rjmp	.+40     	; 0x2378 <LCD_displayString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2350:	6f 81       	ldd	r22, Y+7	; 0x07
    2352:	78 85       	ldd	r23, Y+8	; 0x08
    2354:	89 85       	ldd	r24, Y+9	; 0x09
    2356:	9a 85       	ldd	r25, Y+10	; 0x0a
    2358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	9e 83       	std	Y+6, r25	; 0x06
    2362:	8d 83       	std	Y+5, r24	; 0x05
    2364:	8d 81       	ldd	r24, Y+5	; 0x05
    2366:	9e 81       	ldd	r25, Y+6	; 0x06
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	9a 81       	ldd	r25, Y+2	; 0x02
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <LCD_displayString+0x10e>
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	89 83       	std	Y+1, r24	; 0x01

/* LCD send string function to put on LCD display (panel) */
void LCD_displayString(uint8 * data)
{
	uint8 i; 
	for (i = 0; data[i] != '\0'; i++)
    2378:	8f 85       	ldd	r24, Y+15	; 0x0f
    237a:	8f 5f       	subi	r24, 0xFF	; 255
    237c:	8f 87       	std	Y+15, r24	; 0x0f
    237e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	88 89       	ldd	r24, Y+16	; 0x10
    2386:	99 89       	ldd	r25, Y+17	; 0x11
    2388:	fc 01       	movw	r30, r24
    238a:	e2 0f       	add	r30, r18
    238c:	f3 1f       	adc	r31, r19
    238e:	80 81       	ld	r24, Z
    2390:	88 23       	and	r24, r24
    2392:	09 f0       	breq	.+2      	; 0x2396 <LCD_displayString+0x134>
    2394:	74 cf       	rjmp	.-280    	; 0x227e <LCD_displayString+0x1c>
	{
		LCD_displayCharacter(data[i]);
		/* Delay to let LCD write character */ 
		_delay_ms(2);
	}
}
    2396:	61 96       	adiw	r28, 0x11	; 17
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <LCD_goToRowColumn>:

/* go to xy position */
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <LCD_goToRowColumn+0x6>
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <LCD_goToRowColumn+0x8>
    23b0:	0f 92       	push	r0
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	8a 83       	std	Y+2, r24	; 0x02
    23b8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pos = 0;
    23ba:	19 82       	std	Y+1, r1	; 0x01
	
	switch(row)
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	3d 83       	std	Y+5, r19	; 0x05
    23c4:	2c 83       	std	Y+4, r18	; 0x04
    23c6:	8c 81       	ldd	r24, Y+4	; 0x04
    23c8:	9d 81       	ldd	r25, Y+5	; 0x05
    23ca:	81 30       	cpi	r24, 0x01	; 1
    23cc:	91 05       	cpc	r25, r1
    23ce:	c1 f0       	breq	.+48     	; 0x2400 <LCD_goToRowColumn+0x58>
    23d0:	2c 81       	ldd	r18, Y+4	; 0x04
    23d2:	3d 81       	ldd	r19, Y+5	; 0x05
    23d4:	22 30       	cpi	r18, 0x02	; 2
    23d6:	31 05       	cpc	r19, r1
    23d8:	2c f4       	brge	.+10     	; 0x23e4 <LCD_goToRowColumn+0x3c>
    23da:	8c 81       	ldd	r24, Y+4	; 0x04
    23dc:	9d 81       	ldd	r25, Y+5	; 0x05
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	61 f0       	breq	.+24     	; 0x23fa <LCD_goToRowColumn+0x52>
    23e2:	19 c0       	rjmp	.+50     	; 0x2416 <LCD_goToRowColumn+0x6e>
    23e4:	2c 81       	ldd	r18, Y+4	; 0x04
    23e6:	3d 81       	ldd	r19, Y+5	; 0x05
    23e8:	22 30       	cpi	r18, 0x02	; 2
    23ea:	31 05       	cpc	r19, r1
    23ec:	69 f0       	breq	.+26     	; 0x2408 <LCD_goToRowColumn+0x60>
    23ee:	8c 81       	ldd	r24, Y+4	; 0x04
    23f0:	9d 81       	ldd	r25, Y+5	; 0x05
    23f2:	83 30       	cpi	r24, 0x03	; 3
    23f4:	91 05       	cpc	r25, r1
    23f6:	61 f0       	breq	.+24     	; 0x2410 <LCD_goToRowColumn+0x68>
    23f8:	0e c0       	rjmp	.+28     	; 0x2416 <LCD_goToRowColumn+0x6e>
	{
		case 0:
				pos = col;
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	0b c0       	rjmp	.+22     	; 0x2416 <LCD_goToRowColumn+0x6e>
				break;
		case 1:
				pos = col+0x40;
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	80 5c       	subi	r24, 0xC0	; 192
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	07 c0       	rjmp	.+14     	; 0x2416 <LCD_goToRowColumn+0x6e>
				break;
		case 2:
				pos = col+0x14;
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	8c 5e       	subi	r24, 0xEC	; 236
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <LCD_goToRowColumn+0x6e>
				break;
		case 3:
				pos = col+0x54;
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	8c 5a       	subi	r24, 0xAC	; 172
    2414:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* send command to set cursor at pos */
	LCD_sendCommand(pos | 0x80);
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	80 68       	ori	r24, 0x80	; 128
    241a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_sendCommand>
}
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <LCD_displayStringRowColumn>:

/* write a string into LCD in x-y position */
void LCD_displayStringRowColumn  (uint8 row, uint8 pos, uint8* data)
{
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	00 d0       	rcall	.+0      	; 0x2434 <LCD_displayStringRowColumn+0x6>
    2434:	00 d0       	rcall	.+0      	; 0x2436 <LCD_displayStringRowColumn+0x8>
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	6a 83       	std	Y+2, r22	; 0x02
    243e:	5c 83       	std	Y+4, r21	; 0x04
    2440:	4b 83       	std	Y+3, r20	; 0x03
	/* go to LCD position required position */
	LCD_goToRowColumn(row,pos);
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	6a 81       	ldd	r22, Y+2	; 0x02
    2446:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
	
	/* display the string */
	LCD_displayString(data);
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
}
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <LCD_intgerToString>:

/* write number into LCD */ 
void LCD_intgerToString(uint16 Number)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	2d 97       	sbiw	r28, 0x0d	; 13
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	9d 87       	std	Y+13, r25	; 0x0d
    2476:	8c 87       	std	Y+12, r24	; 0x0c
	uint8 i = 0, arr[10];
    2478:	19 82       	std	Y+1, r1	; 0x01
	if (Number == 0)
    247a:	8c 85       	ldd	r24, Y+12	; 0x0c
    247c:	9d 85       	ldd	r25, Y+13	; 0x0d
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	11 f5       	brne	.+68     	; 0x24c6 <LCD_intgerToString+0x66>
	{
		LCD_displayCharacter('0');
    2482:	80 e3       	ldi	r24, 0x30	; 48
    2484:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_displayCharacter>
    2488:	1e c0       	rjmp	.+60     	; 0x24c6 <LCD_intgerToString+0x66>
	}
	while (Number != 0)
	{
		arr[i] = Number % 10 + '0';
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	e8 2f       	mov	r30, r24
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	8c 85       	ldd	r24, Y+12	; 0x0c
    2492:	9d 85       	ldd	r25, Y+13	; 0x0d
    2494:	2a e0       	ldi	r18, 0x0A	; 10
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	b9 01       	movw	r22, r18
    249a:	0e 94 c9 2f 	call	0x5f92	; 0x5f92 <__udivmodhi4>
    249e:	28 2f       	mov	r18, r24
    24a0:	20 5d       	subi	r18, 0xD0	; 208
    24a2:	ce 01       	movw	r24, r28
    24a4:	02 96       	adiw	r24, 0x02	; 2
    24a6:	e8 0f       	add	r30, r24
    24a8:	f9 1f       	adc	r31, r25
    24aa:	20 83       	st	Z, r18
		Number = Number / 10;
    24ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    24ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    24b0:	2a e0       	ldi	r18, 0x0A	; 10
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	b9 01       	movw	r22, r18
    24b6:	0e 94 c9 2f 	call	0x5f92	; 0x5f92 <__udivmodhi4>
    24ba:	cb 01       	movw	r24, r22
    24bc:	9d 87       	std	Y+13, r25	; 0x0d
    24be:	8c 87       	std	Y+12, r24	; 0x0c
		i++; 
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	8f 5f       	subi	r24, 0xFF	; 255
    24c4:	89 83       	std	Y+1, r24	; 0x01
	uint8 i = 0, arr[10];
	if (Number == 0)
	{
		LCD_displayCharacter('0');
	}
	while (Number != 0)
    24c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    24c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	f1 f6       	brne	.-68     	; 0x248a <LCD_intgerToString+0x2a>
    24ce:	11 c0       	rjmp	.+34     	; 0x24f2 <LCD_intgerToString+0x92>
		Number = Number / 10;
		i++; 
	}
	while (i > 0)
	{
		LCD_displayCharacter(arr[i-1]);
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9c 01       	movw	r18, r24
    24d8:	21 50       	subi	r18, 0x01	; 1
    24da:	30 40       	sbci	r19, 0x00	; 0
    24dc:	ce 01       	movw	r24, r28
    24de:	02 96       	adiw	r24, 0x02	; 2
    24e0:	fc 01       	movw	r30, r24
    24e2:	e2 0f       	add	r30, r18
    24e4:	f3 1f       	adc	r31, r19
    24e6:	80 81       	ld	r24, Z
    24e8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_displayCharacter>
		i--;
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	81 50       	subi	r24, 0x01	; 1
    24f0:	89 83       	std	Y+1, r24	; 0x01
	{
		arr[i] = Number % 10 + '0';
		Number = Number / 10;
		i++; 
	}
	while (i > 0)
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	88 23       	and	r24, r24
    24f6:	61 f7       	brne	.-40     	; 0x24d0 <LCD_intgerToString+0x70>
	{
		LCD_displayCharacter(arr[i-1]);
		i--;
	}
}
    24f8:	2d 96       	adiw	r28, 0x0d	; 13
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	de bf       	out	0x3e, r29	; 62
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	cd bf       	out	0x3d, r28	; 61
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	08 95       	ret

0000250a <LCD_clearScreen>:

/* clear LCD display */
void LCD_clearScreen(void)
{
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(DISPLAY_CLEAR);
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_HOME);
    2518:	82 e0       	ldi	r24, 0x02	; 2
    251a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_sendCommand>
}
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <SPI_init_as_master>:


#include "SPI.h"

void SPI_init_as_master(bool slow_mode)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	0f 92       	push	r0
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(SPI_port,MISO,INPUT);
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	66 e0       	ldi	r22, 0x06	; 6
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,MOSI,OUTPUT);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	65 e0       	ldi	r22, 0x05	; 5
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,sck,OUTPUT);
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	67 e0       	ldi	r22, 0x07	; 7
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,SS_bar,OUTPUT);
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	64 e0       	ldi	r22, 0x04	; 4
    2552:	41 e0       	ldi	r20, 0x01	; 1
    2554:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	DIO_SetPinValue(SPI_port,SS_bar,HIGH);       //disable slave selection
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	64 e0       	ldi	r22, 0x04	; 4
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
	if (slow_mode){                    //speed = Fosc/128
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	88 23       	and	r24, r24
    2566:	41 f0       	breq	.+16     	; 0x2578 <SPI_init_as_master+0x54>
			SPCR = 0x53;               //SPIE=0 SPE=1 Master=1 SPR0=1 SPR1=1
    2568:	ed e2       	ldi	r30, 0x2D	; 45
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	83 e5       	ldi	r24, 0x53	; 83
    256e:	80 83       	st	Z, r24
			SPSR = 0x00;               //SPI2X = 0
    2570:	ee e2       	ldi	r30, 0x2E	; 46
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	10 82       	st	Z, r1
    2576:	08 c0       	rjmp	.+16     	; 0x2588 <SPI_init_as_master+0x64>
	}
	else{							   //speed = Fosc/2
			SPCR = 0x50;               //SPIE=0 SPE=1 Master=1 SPR0=0 SPR1=0
    2578:	ed e2       	ldi	r30, 0x2D	; 45
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 e5       	ldi	r24, 0x50	; 80
    257e:	80 83       	st	Z, r24
			SPSR = 0x01;               //SPI2X = 1
    2580:	ee e2       	ldi	r30, 0x2E	; 46
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	80 83       	st	Z, r24
	}
}
    2588:	0f 90       	pop	r0
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <SPI_init_as_slave>:

void SPI_init_as_slave(bool slow_mode)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	0f 92       	push	r0
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(SPI_port,MISO,OUTPUT);
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	66 e0       	ldi	r22, 0x06	; 6
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,MOSI,INPUT);
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	65 e0       	ldi	r22, 0x05	; 5
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,sck,INPUT);
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	67 e0       	ldi	r22, 0x07	; 7
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	DIO_SetPinDirection(SPI_port,SS_bar,INPUT);
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	64 e0       	ldi	r22, 0x04	; 4
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	DIO_SetPinValue(SPI_port,SS_bar,HIGH);       //pull up for ss_bar pin 
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	64 e0       	ldi	r22, 0x04	; 4
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
		if (slow_mode){                //speed = Fosc/128
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	88 23       	and	r24, r24
    25d2:	41 f0       	breq	.+16     	; 0x25e4 <SPI_init_as_slave+0x54>
			SPCR = 0xC3;               //SPIE=1 SPE=1 Master=0 SPR0=1 SPR1=1
    25d4:	ed e2       	ldi	r30, 0x2D	; 45
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	83 ec       	ldi	r24, 0xC3	; 195
    25da:	80 83       	st	Z, r24
			SPSR = 0x00;               //SPI2X = 0
    25dc:	ee e2       	ldi	r30, 0x2E	; 46
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	10 82       	st	Z, r1
    25e2:	08 c0       	rjmp	.+16     	; 0x25f4 <SPI_init_as_slave+0x64>
		}
		else{						   //speed = Fosc/2
			SPCR = 0xC0;               //SPIE=1 SPE=1 Master=0 SPR0=0 SPR1=0
    25e4:	ed e2       	ldi	r30, 0x2D	; 45
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 ec       	ldi	r24, 0xC0	; 192
    25ea:	80 83       	st	Z, r24
			SPSR = 0x01;               //SPI2X = 1
    25ec:	ee e2       	ldi	r30, 0x2E	; 46
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	80 83       	st	Z, r24
		}

}
    25f4:	0f 90       	pop	r0
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <SPI_send_char>:


void SPI_send_char(uint8 data)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	0f 92       	push	r0
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinValue(SPI_port,SS_bar,LOW);   //select slave     
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	64 e0       	ldi	r22, 0x04	; 4
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
	SPDR=data;
    2612:	ef e2       	ldi	r30, 0x2F	; 47
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	80 83       	st	Z, r24
	while((SPSR & (1<<7))==0) ;     //wait for SPIF to set (transfer of data is complete )
    261a:	ee e2       	ldi	r30, 0x2E	; 46
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	88 23       	and	r24, r24
    2622:	dc f7       	brge	.-10     	; 0x261a <SPI_send_char+0x1e>
	DIO_SetPinValue(SPI_port,SS_bar,HIGH);   //leave slave
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	64 e0       	ldi	r22, 0x04	; 4
    2628:	41 e0       	ldi	r20, 0x01	; 1
    262a:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
	
}
    262e:	0f 90       	pop	r0
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <SPI_recieve_char_no_ISR>:


uint8 SPI_recieve_char_no_ISR()
{
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
	while((SPSR & (1<<7))==0) ;    //wait for SPIF to set (transfer of data is complete )
    263e:	ee e2       	ldi	r30, 0x2E	; 46
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	88 23       	and	r24, r24
    2646:	dc f7       	brge	.-10     	; 0x263e <SPI_recieve_char_no_ISR+0x8>
	return SPDR;
    2648:	ef e2       	ldi	r30, 0x2F	; 47
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z

}
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <SPI_recieve_char_ISR>:
uint8 SPI_recieve_char_ISR()
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
    265c:	ef e2       	ldi	r30, 0x2F	; 47
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
}
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <SPI_turn_to_slave>:

void SPI_turn_to_slave(){
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62

	SPI_send_char(0x7f);           //code for swapping master and slave
    2670:	8f e7       	ldi	r24, 0x7F	; 127
    2672:	0e 94 fe 12 	call	0x25fc	; 0x25fc <SPI_send_char>
	SPI_init_as_slave(false);
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	0e 94 c8 12 	call	0x2590	; 0x2590 <SPI_init_as_slave>
	
}
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <SPI_should_turn_to_master>:

bool SPI_should_turn_to_master(uint8 data){
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <SPI_should_turn_to_master+0x6>
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	89 83       	std	Y+1, r24	; 0x01
	if (data==0x7f)                //code for swapping master and slave
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	8f 37       	cpi	r24, 0x7F	; 127
    2692:	31 f4       	brne	.+12     	; 0x26a0 <SPI_should_turn_to_master+0x1e>
	{
		SPI_init_as_master(false);
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	0e 94 92 12 	call	0x2524	; 0x2524 <SPI_init_as_master>
		return true;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	8a 83       	std	Y+2, r24	; 0x02
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <SPI_should_turn_to_master+0x20>

	}
	return false;
    26a0:	1a 82       	std	Y+2, r1	; 0x02
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <KeyPad_getPressedKey+0x6>
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    26b8:	1a 82       	std	Y+2, r1	; 0x02
    26ba:	50 c0       	rjmp	.+160    	; 0x275c <KeyPad_getPressedKey+0xae>
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			//KEYPAD_PORT_DIR = (0b00010000<<col);
            DIO_SetPortDirection(KEYPAD_PORT_OUT, 0b00010000<<col);
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	80 e1       	ldi	r24, 0x10	; 16
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <KeyPad_getPressedKey+0x1e>
    26c8:	88 0f       	add	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	2a 95       	dec	r18
    26ce:	e2 f7       	brpl	.-8      	; 0x26c8 <KeyPad_getPressedKey+0x1a>
    26d0:	98 2f       	mov	r25, r24
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	69 2f       	mov	r22, r25
    26d6:	0e 94 6e 07 	call	0xedc	; 0xedc <DIO_SetPortDirection>
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			//KEYPAD_PORT_OUT = (~(0b00010000<<col));
            DIO_SetPortValue(KEYPAD_PORT_OUT, ~(0b00010000<<col));
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	80 e1       	ldi	r24, 0x10	; 16
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <KeyPad_getPressedKey+0x3c>
    26e6:	88 0f       	add	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	2a 95       	dec	r18
    26ec:	e2 f7       	brpl	.-8      	; 0x26e6 <KeyPad_getPressedKey+0x38>
    26ee:	98 2f       	mov	r25, r24
    26f0:	90 95       	com	r25
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	69 2f       	mov	r22, r25
    26f6:	0e 94 af 08 	call	0x115e	; 0x115e <DIO_SetPortValue>

			for(row=0;row<N_row;row++) /* loop for rows */
    26fa:	19 82       	std	Y+1, r1	; 0x01
    26fc:	29 c0       	rjmp	.+82     	; 0x2750 <KeyPad_getPressedKey+0xa2>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
    26fe:	e9 e3       	ldi	r30, 0x39	; 57
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	28 2f       	mov	r18, r24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	88 2f       	mov	r24, r24
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	a9 01       	movw	r20, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <KeyPad_getPressedKey+0x68>
    2712:	55 95       	asr	r21
    2714:	47 95       	ror	r20
    2716:	8a 95       	dec	r24
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <KeyPad_getPressedKey+0x64>
    271a:	ca 01       	movw	r24, r20
    271c:	81 70       	andi	r24, 0x01	; 1
    271e:	90 70       	andi	r25, 0x00	; 0
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	99 f4       	brne	.+38     	; 0x274a <KeyPad_getPressedKey+0x9c>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	c9 01       	movw	r24, r18
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	82 0f       	add	r24, r18
    2732:	93 1f       	adc	r25, r19
    2734:	98 2f       	mov	r25, r24
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	89 0f       	add	r24, r25
    273a:	8f 5f       	subi	r24, 0xFF	; 255
    273c:	0e 94 b3 13 	call	0x2766	; 0x2766 <KeyPad_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret
			 * pull up resistors for the rows pins
			 */
			//KEYPAD_PORT_OUT = (~(0b00010000<<col));
            DIO_SetPortValue(KEYPAD_PORT_OUT, ~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	8f 5f       	subi	r24, 0xFF	; 255
    274e:	89 83       	std	Y+1, r24	; 0x01
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	84 30       	cpi	r24, 0x04	; 4
    2754:	a0 f2       	brcs	.-88     	; 0x26fe <KeyPad_getPressedKey+0x50>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	8f 5f       	subi	r24, 0xFF	; 255
    275a:	8a 83       	std	Y+2, r24	; 0x02
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	83 30       	cpi	r24, 0x03	; 3
    2760:	08 f4       	brcc	.+2      	; 0x2764 <KeyPad_getPressedKey+0xb6>
    2762:	ac cf       	rjmp	.-168    	; 0x26bc <KeyPad_getPressedKey+0xe>
    2764:	a9 cf       	rjmp	.-174    	; 0x26b8 <KeyPad_getPressedKey+0xa>

00002766 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3)

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	00 d0       	rcall	.+0      	; 0x276c <KeyPad_4x3_adjustKeyNumber+0x6>
    276c:	00 d0       	rcall	.+0      	; 0x276e <KeyPad_4x3_adjustKeyNumber+0x8>
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	3c 83       	std	Y+4, r19	; 0x04
    277c:	2b 83       	std	Y+3, r18	; 0x03
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	8a 30       	cpi	r24, 0x0A	; 10
    2784:	91 05       	cpc	r25, r1
    2786:	81 f0       	breq	.+32     	; 0x27a8 <KeyPad_4x3_adjustKeyNumber+0x42>
    2788:	2b 81       	ldd	r18, Y+3	; 0x03
    278a:	3c 81       	ldd	r19, Y+4	; 0x04
    278c:	2a 30       	cpi	r18, 0x0A	; 10
    278e:	31 05       	cpc	r19, r1
    2790:	9c f0       	brlt	.+38     	; 0x27b8 <KeyPad_4x3_adjustKeyNumber+0x52>
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	8b 30       	cpi	r24, 0x0B	; 11
    2798:	91 05       	cpc	r25, r1
    279a:	49 f0       	breq	.+18     	; 0x27ae <KeyPad_4x3_adjustKeyNumber+0x48>
    279c:	2b 81       	ldd	r18, Y+3	; 0x03
    279e:	3c 81       	ldd	r19, Y+4	; 0x04
    27a0:	2c 30       	cpi	r18, 0x0C	; 12
    27a2:	31 05       	cpc	r19, r1
    27a4:	31 f0       	breq	.+12     	; 0x27b2 <KeyPad_4x3_adjustKeyNumber+0x4c>
    27a6:	08 c0       	rjmp	.+16     	; 0x27b8 <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of *
    27a8:	3a e2       	ldi	r19, 0x2A	; 42
    27aa:	3a 83       	std	Y+2, r19	; 0x02
    27ac:	07 c0       	rjmp	.+14     	; 0x27bc <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
    27ae:	1a 82       	std	Y+2, r1	; 0x02
    27b0:	05 c0       	rjmp	.+10     	; 0x27bc <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 12: return '#'; // ASCII Code of #
    27b2:	83 e2       	ldi	r24, 0x23	; 35
    27b4:	8a 83       	std	Y+2, r24	; 0x02
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;
    27b8:	99 81       	ldd	r25, Y+1	; 0x01
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <main>:
void device_manager(uint8 room_num,char *room,char *device,uint8 SPI_on_code,uint8 SPI_off_code);
void room_manager(uint8 room_num,char *room,uint8 SPI_on_code,uint8 SPI_off_code);
void set_temp();

uint8 main(void)
{
    27cc:	0f 93       	push	r16
    27ce:	1f 93       	push	r17
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	cc 5c       	subi	r28, 0xCC	; 204
    27da:	d0 40       	sbci	r29, 0x00	; 0
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
	uint8 read[5];
	uint8 read_1[5];
	uint8 j=0,i=0;
    27e6:	fe 01       	movw	r30, r28
    27e8:	ef 53       	subi	r30, 0x3F	; 63
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	10 82       	st	Z, r1
    27ee:	fe 01       	movw	r30, r28
    27f0:	e0 54       	subi	r30, 0x40	; 64
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	10 82       	st	Z, r1
	uint8 out_1,out=0;
    27f6:	fe 01       	movw	r30, r28
    27f8:	e2 54       	subi	r30, 0x42	; 66
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	10 82       	st	Z, r1
	uint8 key_in,key;
	uint8 count,count_1;
	uint8 o=0;
    27fe:	fe 01       	movw	r30, r28
    2800:	e7 54       	subi	r30, 0x47	; 71
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	10 82       	st	Z, r1
	uint8 o_1;
	uint8 wrong=0;
    2806:	fe 01       	movw	r30, r28
    2808:	e9 54       	subi	r30, 0x49	; 73
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	10 82       	st	Z, r1

	SPI_init_as_master(false);
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	0e 94 92 12 	call	0x2524	; 0x2524 <SPI_init_as_master>
	LCD_init();
    2814:	0e 94 b4 09 	call	0x1368	; 0x1368 <LCD_init>
	DIO_SetPinDirection(PORTB,PIN0,INPUT);
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	DIO_SetPinDirection(TRIGGER_PORT,7,OUTPUT);
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	67 e0       	ldi	r22, 0x07	; 7
    2826:	41 e0       	ldi	r20, 0x01	; 1
    2828:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
	ultrasonic_init();
    282c:	0e 94 67 2d 	call	0x5ace	; 0x5ace <ultrasonic_init>
	SREG=SREG|(1<<7);
    2830:	af e5       	ldi	r26, 0x5F	; 95
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	ef e5       	ldi	r30, 0x5F	; 95
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	80 68       	ori	r24, 0x80	; 128
    283c:	8c 93       	st	X, r24


	if(PINB&(1<<0))
    283e:	e6 e3       	ldi	r30, 0x36	; 54
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	88 2f       	mov	r24, r24
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	81 70       	andi	r24, 0x01	; 1
    284a:	90 70       	andi	r25, 0x00	; 0
    284c:	88 23       	and	r24, r24
    284e:	e9 f0       	breq	.+58     	; 0x288a <main+0xbe>
	{
		for ( count_1=0;count_1<5;count_1++)
    2850:	fe 01       	movw	r30, r28
    2852:	e6 54       	subi	r30, 0x46	; 70
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	10 82       	st	Z, r1
    2858:	12 c0       	rjmp	.+36     	; 0x287e <main+0xb2>
		{
			eeprom_write_byte (count_1,0xFF);
    285a:	fe 01       	movw	r30, r28
    285c:	e6 54       	subi	r30, 0x46	; 70
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 81       	ld	r24, Z
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	6f ef       	ldi	r22, 0xFF	; 255
    2868:	0e 94 3e 30 	call	0x607c	; 0x607c <__eewr_byte_m16>
	SREG=SREG|(1<<7);


	if(PINB&(1<<0))
	{
		for ( count_1=0;count_1<5;count_1++)
    286c:	de 01       	movw	r26, r28
    286e:	a6 54       	subi	r26, 0x46	; 70
    2870:	bf 4f       	sbci	r27, 0xFF	; 255
    2872:	fe 01       	movw	r30, r28
    2874:	e6 54       	subi	r30, 0x46	; 70
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	8c 93       	st	X, r24
    287e:	fe 01       	movw	r30, r28
    2880:	e6 54       	subi	r30, 0x46	; 70
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	80 81       	ld	r24, Z
    2886:	85 30       	cpi	r24, 0x05	; 5
    2888:	40 f3       	brcs	.-48     	; 0x285a <main+0x8e>
		}
	}



	if(((eeprom_read_byte((const uint8_t *)(0))==0xFF)&&(eeprom_read_byte((const uint8_t *)(1))==0xFF)&&(eeprom_read_byte((const uint8_t *)(2))==0xFF)&&(eeprom_read_byte((const uint8_t *)(3))==0xFF)&&(eeprom_read_byte((const uint8_t *)(4))==0xFF)))
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	0e 94 36 30 	call	0x606c	; 0x606c <__eerd_byte_m16>
    2892:	8f 3f       	cpi	r24, 0xFF	; 255
    2894:	09 f0       	breq	.+2      	; 0x2898 <main+0xcc>
    2896:	38 c5       	rjmp	.+2672   	; 0x3308 <main+0xb3c>
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 36 30 	call	0x606c	; 0x606c <__eerd_byte_m16>
    28a0:	8f 3f       	cpi	r24, 0xFF	; 255
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <main+0xda>
    28a4:	31 c5       	rjmp	.+2658   	; 0x3308 <main+0xb3c>
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 36 30 	call	0x606c	; 0x606c <__eerd_byte_m16>
    28ae:	8f 3f       	cpi	r24, 0xFF	; 255
    28b0:	09 f0       	breq	.+2      	; 0x28b4 <main+0xe8>
    28b2:	2a c5       	rjmp	.+2644   	; 0x3308 <main+0xb3c>
    28b4:	83 e0       	ldi	r24, 0x03	; 3
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	0e 94 36 30 	call	0x606c	; 0x606c <__eerd_byte_m16>
    28bc:	8f 3f       	cpi	r24, 0xFF	; 255
    28be:	09 f0       	breq	.+2      	; 0x28c2 <main+0xf6>
    28c0:	23 c5       	rjmp	.+2630   	; 0x3308 <main+0xb3c>
    28c2:	84 e0       	ldi	r24, 0x04	; 4
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 36 30 	call	0x606c	; 0x606c <__eerd_byte_m16>
    28ca:	8f 3f       	cpi	r24, 0xFF	; 255
    28cc:	09 f0       	breq	.+2      	; 0x28d0 <main+0x104>
    28ce:	1c c5       	rjmp	.+2616   	; 0x3308 <main+0xb3c>
	{
		if(i!=5)
    28d0:	fe 01       	movw	r30, r28
    28d2:	e0 54       	subi	r30, 0x40	; 64
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	80 81       	ld	r24, Z
    28d8:	85 30       	cpi	r24, 0x05	; 5
    28da:	09 f4       	brne	.+2      	; 0x28de <main+0x112>
    28dc:	a6 c2       	rjmp	.+1356   	; 0x2e2a <main+0x65e>
		{
			LCD_displayString("enter your first ");
    28de:	80 e6       	ldi	r24, 0x60	; 96
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
			LCD_goToRowColumn(1,2);
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	62 e0       	ldi	r22, 0x02	; 2
    28ea:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
			LCD_displayString(" password");
    28ee:	82 e7       	ldi	r24, 0x72	; 114
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    28f6:	99 c2       	rjmp	.+1330   	; 0x2e2a <main+0x65e>
		}
		while((i!=5))
		{
			key = KeyPad_getPressedKey();
    28f8:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    28fc:	fe 01       	movw	r30, r28
    28fe:	e4 54       	subi	r30, 0x44	; 68
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 83       	st	Z, r24
			if(!(i==5))
    2904:	fe 01       	movw	r30, r28
    2906:	e0 54       	subi	r30, 0x40	; 64
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 81       	ld	r24, Z
    290c:	85 30       	cpi	r24, 0x05	; 5
    290e:	09 f4       	brne	.+2      	; 0x2912 <main+0x146>
    2910:	8c c2       	rjmp	.+1304   	; 0x2e2a <main+0x65e>
			{
				if(!(out==1)){out++;LCD_clearScreen();}
    2912:	fe 01       	movw	r30, r28
    2914:	e2 54       	subi	r30, 0x42	; 66
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	80 81       	ld	r24, Z
    291a:	81 30       	cpi	r24, 0x01	; 1
    291c:	59 f0       	breq	.+22     	; 0x2934 <main+0x168>
    291e:	de 01       	movw	r26, r28
    2920:	a2 54       	subi	r26, 0x42	; 66
    2922:	bf 4f       	sbci	r27, 0xFF	; 255
    2924:	fe 01       	movw	r30, r28
    2926:	e2 54       	subi	r30, 0x42	; 66
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	80 81       	ld	r24, Z
    292c:	8f 5f       	subi	r24, 0xFF	; 255
    292e:	8c 93       	st	X, r24
    2930:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
				if ((key>= 0) && (key<= 9))
    2934:	fe 01       	movw	r30, r28
    2936:	e4 54       	subi	r30, 0x44	; 68
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 81       	ld	r24, Z
    293c:	8a 30       	cpi	r24, 0x0A	; 10
    293e:	08 f0       	brcs	.+2      	; 0x2942 <main+0x176>
    2940:	db c0       	rjmp	.+438    	; 0x2af8 <main+0x32c>
				{
					eeprom_write_byte (i,key);
    2942:	fe 01       	movw	r30, r28
    2944:	e0 54       	subi	r30, 0x40	; 64
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	80 81       	ld	r24, Z
    294a:	88 2f       	mov	r24, r24
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	fe 01       	movw	r30, r28
    2950:	e4 54       	subi	r30, 0x44	; 68
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	60 81       	ld	r22, Z
    2956:	0e 94 3e 30 	call	0x607c	; 0x607c <__eewr_byte_m16>
					LCD_intgerToString(key);
    295a:	fe 01       	movw	r30, r28
    295c:	e4 54       	subi	r30, 0x44	; 68
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_intgerToString>
    296a:	fe 01       	movw	r30, r28
    296c:	ed 54       	subi	r30, 0x4D	; 77
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	aa ef       	ldi	r26, 0xFA	; 250
    2976:	b3 e4       	ldi	r27, 0x43	; 67
    2978:	80 83       	st	Z, r24
    297a:	91 83       	std	Z+1, r25	; 0x01
    297c:	a2 83       	std	Z+2, r26	; 0x02
    297e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	8e 01       	movw	r16, r28
    2982:	01 55       	subi	r16, 0x51	; 81
    2984:	1f 4f       	sbci	r17, 0xFF	; 255
    2986:	fe 01       	movw	r30, r28
    2988:	ed 54       	subi	r30, 0x4D	; 77
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	4a ef       	ldi	r20, 0xFA	; 250
    299a:	54 e4       	ldi	r21, 0x44	; 68
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	f8 01       	movw	r30, r16
    29a6:	80 83       	st	Z, r24
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	a2 83       	std	Z+2, r26	; 0x02
    29ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ae:	fe 01       	movw	r30, r28
    29b0:	e1 55       	subi	r30, 0x51	; 81
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e8       	ldi	r20, 0x80	; 128
    29c2:	5f e3       	ldi	r21, 0x3F	; 63
    29c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29c8:	88 23       	and	r24, r24
    29ca:	44 f4       	brge	.+16     	; 0x29dc <main+0x210>
		__ticks = 1;
    29cc:	fe 01       	movw	r30, r28
    29ce:	e3 55       	subi	r30, 0x53	; 83
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
    29da:	64 c0       	rjmp	.+200    	; 0x2aa4 <main+0x2d8>
	else if (__tmp > 65535)
    29dc:	fe 01       	movw	r30, r28
    29de:	e1 55       	subi	r30, 0x51	; 81
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	3f ef       	ldi	r19, 0xFF	; 255
    29ee:	4f e7       	ldi	r20, 0x7F	; 127
    29f0:	57 e4       	ldi	r21, 0x47	; 71
    29f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f6:	18 16       	cp	r1, r24
    29f8:	0c f0       	brlt	.+2      	; 0x29fc <main+0x230>
    29fa:	43 c0       	rjmp	.+134    	; 0x2a82 <main+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fc:	fe 01       	movw	r30, r28
    29fe:	ed 54       	subi	r30, 0x4D	; 77
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e2       	ldi	r20, 0x20	; 32
    2a10:	51 e4       	ldi	r21, 0x41	; 65
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	8e 01       	movw	r16, r28
    2a1c:	03 55       	subi	r16, 0x53	; 83
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	91 83       	std	Z+1, r25	; 0x01
    2a30:	80 83       	st	Z, r24
    2a32:	1f c0       	rjmp	.+62     	; 0x2a72 <main+0x2a6>
    2a34:	fe 01       	movw	r30, r28
    2a36:	e5 55       	subi	r30, 0x55	; 85
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	88 ec       	ldi	r24, 0xC8	; 200
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	80 83       	st	Z, r24
    2a42:	fe 01       	movw	r30, r28
    2a44:	e5 55       	subi	r30, 0x55	; 85
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <main+0x280>
    2a50:	fe 01       	movw	r30, r28
    2a52:	e5 55       	subi	r30, 0x55	; 85
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	de 01       	movw	r26, r28
    2a5c:	a3 55       	subi	r26, 0x53	; 83
    2a5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a60:	fe 01       	movw	r30, r28
    2a62:	e3 55       	subi	r30, 0x53	; 83
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	11 96       	adiw	r26, 0x01	; 1
    2a6e:	9c 93       	st	X, r25
    2a70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a72:	fe 01       	movw	r30, r28
    2a74:	e3 55       	subi	r30, 0x53	; 83
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	91 81       	ldd	r25, Z+1	; 0x01
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	d1 f6       	brne	.-76     	; 0x2a34 <main+0x268>
    2a80:	27 c0       	rjmp	.+78     	; 0x2ad0 <main+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	8e 01       	movw	r16, r28
    2a84:	03 55       	subi	r16, 0x53	; 83
    2a86:	1f 4f       	sbci	r17, 0xFF	; 255
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e1 55       	subi	r30, 0x51	; 81
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	60 81       	ld	r22, Z
    2a90:	71 81       	ldd	r23, Z+1	; 0x01
    2a92:	82 81       	ldd	r24, Z+2	; 0x02
    2a94:	93 81       	ldd	r25, Z+3	; 0x03
    2a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    2aa4:	de 01       	movw	r26, r28
    2aa6:	a7 55       	subi	r26, 0x57	; 87
    2aa8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e3 55       	subi	r30, 0x53	; 83
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	91 81       	ldd	r25, Z+1	; 0x01
    2ab4:	8d 93       	st	X+, r24
    2ab6:	9c 93       	st	X, r25
    2ab8:	fe 01       	movw	r30, r28
    2aba:	e7 55       	subi	r30, 0x57	; 87
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 81       	ld	r24, Z
    2ac0:	91 81       	ldd	r25, Z+1	; 0x01
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <main+0x2f6>
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e7 55       	subi	r30, 0x57	; 87
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	91 83       	std	Z+1, r25	; 0x01
    2ace:	80 83       	st	Z, r24
					_delay_ms(500);
					LCD_goToRowColumn(0,i);
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	e0 54       	subi	r30, 0x40	; 64
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	60 81       	ld	r22, Z
    2ada:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
					LCD_displayCharacter('*');
    2ade:	8a e2       	ldi	r24, 0x2A	; 42
    2ae0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_displayCharacter>
					i++;
    2ae4:	de 01       	movw	r26, r28
    2ae6:	a0 54       	subi	r26, 0x40	; 64
    2ae8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aea:	fe 01       	movw	r30, r28
    2aec:	e0 54       	subi	r30, 0x40	; 64
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 81       	ld	r24, Z
    2af2:	8f 5f       	subi	r24, 0xFF	; 255
    2af4:	8c 93       	st	X, r24
    2af6:	e5 c0       	rjmp	.+458    	; 0x2cc2 <main+0x4f6>
				}
				else
				{
					eeprom_write_byte (i,key);
    2af8:	fe 01       	movw	r30, r28
    2afa:	e0 54       	subi	r30, 0x40	; 64
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 81       	ld	r24, Z
    2b00:	88 2f       	mov	r24, r24
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	fe 01       	movw	r30, r28
    2b06:	e4 54       	subi	r30, 0x44	; 68
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	60 81       	ld	r22, Z
    2b0c:	0e 94 3e 30 	call	0x607c	; 0x607c <__eewr_byte_m16>
					if(key=='#'){LCD_displayCharacter('#');}else if(key=='*'){LCD_displayCharacter('*');};
    2b10:	fe 01       	movw	r30, r28
    2b12:	e4 54       	subi	r30, 0x44	; 68
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 81       	ld	r24, Z
    2b18:	83 32       	cpi	r24, 0x23	; 35
    2b1a:	21 f4       	brne	.+8      	; 0x2b24 <main+0x358>
    2b1c:	83 e2       	ldi	r24, 0x23	; 35
    2b1e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_displayCharacter>
    2b22:	09 c0       	rjmp	.+18     	; 0x2b36 <main+0x36a>
    2b24:	fe 01       	movw	r30, r28
    2b26:	e4 54       	subi	r30, 0x44	; 68
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	8a 32       	cpi	r24, 0x2A	; 42
    2b2e:	19 f4       	brne	.+6      	; 0x2b36 <main+0x36a>
    2b30:	8a e2       	ldi	r24, 0x2A	; 42
    2b32:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_displayCharacter>
    2b36:	fe 01       	movw	r30, r28
    2b38:	eb 55       	subi	r30, 0x5B	; 91
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	aa ef       	ldi	r26, 0xFA	; 250
    2b42:	b3 e4       	ldi	r27, 0x43	; 67
    2b44:	80 83       	st	Z, r24
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	a2 83       	std	Z+2, r26	; 0x02
    2b4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4c:	8e 01       	movw	r16, r28
    2b4e:	0f 55       	subi	r16, 0x5F	; 95
    2b50:	1f 4f       	sbci	r17, 0xFF	; 255
    2b52:	fe 01       	movw	r30, r28
    2b54:	eb 55       	subi	r30, 0x5B	; 91
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	4a ef       	ldi	r20, 0xFA	; 250
    2b66:	54 e4       	ldi	r21, 0x44	; 68
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	f8 01       	movw	r30, r16
    2b72:	80 83       	st	Z, r24
    2b74:	91 83       	std	Z+1, r25	; 0x01
    2b76:	a2 83       	std	Z+2, r26	; 0x02
    2b78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	ef 55       	subi	r30, 0x5F	; 95
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	60 81       	ld	r22, Z
    2b82:	71 81       	ldd	r23, Z+1	; 0x01
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e8       	ldi	r20, 0x80	; 128
    2b8e:	5f e3       	ldi	r21, 0x3F	; 63
    2b90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b94:	88 23       	and	r24, r24
    2b96:	44 f4       	brge	.+16     	; 0x2ba8 <main+0x3dc>
		__ticks = 1;
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e1 56       	subi	r30, 0x61	; 97
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	91 83       	std	Z+1, r25	; 0x01
    2ba4:	80 83       	st	Z, r24
    2ba6:	64 c0       	rjmp	.+200    	; 0x2c70 <main+0x4a4>
	else if (__tmp > 65535)
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ef 55       	subi	r30, 0x5F	; 95
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	60 81       	ld	r22, Z
    2bb0:	71 81       	ldd	r23, Z+1	; 0x01
    2bb2:	82 81       	ldd	r24, Z+2	; 0x02
    2bb4:	93 81       	ldd	r25, Z+3	; 0x03
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	3f ef       	ldi	r19, 0xFF	; 255
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	57 e4       	ldi	r21, 0x47	; 71
    2bbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	0c f0       	brlt	.+2      	; 0x2bc8 <main+0x3fc>
    2bc6:	43 c0       	rjmp	.+134    	; 0x2c4e <main+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc8:	fe 01       	movw	r30, r28
    2bca:	eb 55       	subi	r30, 0x5B	; 91
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e2       	ldi	r20, 0x20	; 32
    2bdc:	51 e4       	ldi	r21, 0x41	; 65
    2bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	8e 01       	movw	r16, r28
    2be8:	01 56       	subi	r16, 0x61	; 97
    2bea:	1f 4f       	sbci	r17, 0xFF	; 255
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	f8 01       	movw	r30, r16
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	80 83       	st	Z, r24
    2bfe:	1f c0       	rjmp	.+62     	; 0x2c3e <main+0x472>
    2c00:	fe 01       	movw	r30, r28
    2c02:	e3 56       	subi	r30, 0x63	; 99
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	88 ec       	ldi	r24, 0xC8	; 200
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	80 83       	st	Z, r24
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e3 56       	subi	r30, 0x63	; 99
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 81       	ld	r24, Z
    2c16:	91 81       	ldd	r25, Z+1	; 0x01
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <main+0x44c>
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e3 56       	subi	r30, 0x63	; 99
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	91 83       	std	Z+1, r25	; 0x01
    2c24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c26:	de 01       	movw	r26, r28
    2c28:	a1 56       	subi	r26, 0x61	; 97
    2c2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e1 56       	subi	r30, 0x61	; 97
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 81       	ld	r24, Z
    2c34:	91 81       	ldd	r25, Z+1	; 0x01
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	11 96       	adiw	r26, 0x01	; 1
    2c3a:	9c 93       	st	X, r25
    2c3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e1 56       	subi	r30, 0x61	; 97
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	80 81       	ld	r24, Z
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	d1 f6       	brne	.-76     	; 0x2c00 <main+0x434>
    2c4c:	27 c0       	rjmp	.+78     	; 0x2c9c <main+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4e:	8e 01       	movw	r16, r28
    2c50:	01 56       	subi	r16, 0x61	; 97
    2c52:	1f 4f       	sbci	r17, 0xFF	; 255
    2c54:	fe 01       	movw	r30, r28
    2c56:	ef 55       	subi	r30, 0x5F	; 95
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	60 81       	ld	r22, Z
    2c5c:	71 81       	ldd	r23, Z+1	; 0x01
    2c5e:	82 81       	ldd	r24, Z+2	; 0x02
    2c60:	93 81       	ldd	r25, Z+3	; 0x03
    2c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	f8 01       	movw	r30, r16
    2c6c:	91 83       	std	Z+1, r25	; 0x01
    2c6e:	80 83       	st	Z, r24
    2c70:	de 01       	movw	r26, r28
    2c72:	a5 56       	subi	r26, 0x65	; 101
    2c74:	bf 4f       	sbci	r27, 0xFF	; 255
    2c76:	fe 01       	movw	r30, r28
    2c78:	e1 56       	subi	r30, 0x61	; 97
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 81       	ld	r24, Z
    2c7e:	91 81       	ldd	r25, Z+1	; 0x01
    2c80:	8d 93       	st	X+, r24
    2c82:	9c 93       	st	X, r25
    2c84:	fe 01       	movw	r30, r28
    2c86:	e5 56       	subi	r30, 0x65	; 101
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 81       	ld	r24, Z
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <main+0x4c2>
    2c92:	fe 01       	movw	r30, r28
    2c94:	e5 56       	subi	r30, 0x65	; 101
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
					_delay_ms(500);
					LCD_goToRowColumn(0,i);
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e0 54       	subi	r30, 0x40	; 64
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	60 81       	ld	r22, Z
    2ca6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
					LCD_displayCharacter('*');
    2caa:	8a e2       	ldi	r24, 0x2A	; 42
    2cac:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_displayCharacter>
					i++;
    2cb0:	de 01       	movw	r26, r28
    2cb2:	a0 54       	subi	r26, 0x40	; 64
    2cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e0 54       	subi	r30, 0x40	; 64
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8f 5f       	subi	r24, 0xFF	; 255
    2cc0:	8c 93       	st	X, r24
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e9 56       	subi	r30, 0x69	; 105
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	a8 ec       	ldi	r26, 0xC8	; 200
    2cce:	b2 e4       	ldi	r27, 0x42	; 66
    2cd0:	80 83       	st	Z, r24
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	a2 83       	std	Z+2, r26	; 0x02
    2cd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd8:	8e 01       	movw	r16, r28
    2cda:	0d 56       	subi	r16, 0x6D	; 109
    2cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e9 56       	subi	r30, 0x69	; 105
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	60 81       	ld	r22, Z
    2ce6:	71 81       	ldd	r23, Z+1	; 0x01
    2ce8:	82 81       	ldd	r24, Z+2	; 0x02
    2cea:	93 81       	ldd	r25, Z+3	; 0x03
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a ef       	ldi	r20, 0xFA	; 250
    2cf2:	54 e4       	ldi	r21, 0x44	; 68
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	80 83       	st	Z, r24
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	a2 83       	std	Z+2, r26	; 0x02
    2d04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d06:	fe 01       	movw	r30, r28
    2d08:	ed 56       	subi	r30, 0x6D	; 109
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	60 81       	ld	r22, Z
    2d0e:	71 81       	ldd	r23, Z+1	; 0x01
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	44 f4       	brge	.+16     	; 0x2d34 <main+0x568>
		__ticks = 1;
    2d24:	fe 01       	movw	r30, r28
    2d26:	ef 56       	subi	r30, 0x6F	; 111
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	91 83       	std	Z+1, r25	; 0x01
    2d30:	80 83       	st	Z, r24
    2d32:	64 c0       	rjmp	.+200    	; 0x2dfc <main+0x630>
	else if (__tmp > 65535)
    2d34:	fe 01       	movw	r30, r28
    2d36:	ed 56       	subi	r30, 0x6D	; 109
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	60 81       	ld	r22, Z
    2d3c:	71 81       	ldd	r23, Z+1	; 0x01
    2d3e:	82 81       	ldd	r24, Z+2	; 0x02
    2d40:	93 81       	ldd	r25, Z+3	; 0x03
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	3f ef       	ldi	r19, 0xFF	; 255
    2d46:	4f e7       	ldi	r20, 0x7F	; 127
    2d48:	57 e4       	ldi	r21, 0x47	; 71
    2d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d4e:	18 16       	cp	r1, r24
    2d50:	0c f0       	brlt	.+2      	; 0x2d54 <main+0x588>
    2d52:	43 c0       	rjmp	.+134    	; 0x2dda <main+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d54:	fe 01       	movw	r30, r28
    2d56:	e9 56       	subi	r30, 0x69	; 105
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	60 81       	ld	r22, Z
    2d5c:	71 81       	ldd	r23, Z+1	; 0x01
    2d5e:	82 81       	ldd	r24, Z+2	; 0x02
    2d60:	93 81       	ldd	r25, Z+3	; 0x03
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e2       	ldi	r20, 0x20	; 32
    2d68:	51 e4       	ldi	r21, 0x41	; 65
    2d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	8e 01       	movw	r16, r28
    2d74:	0f 56       	subi	r16, 0x6F	; 111
    2d76:	1f 4f       	sbci	r17, 0xFF	; 255
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	f8 01       	movw	r30, r16
    2d86:	91 83       	std	Z+1, r25	; 0x01
    2d88:	80 83       	st	Z, r24
    2d8a:	1f c0       	rjmp	.+62     	; 0x2dca <main+0x5fe>
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e1 57       	subi	r30, 0x71	; 113
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	88 ec       	ldi	r24, 0xC8	; 200
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e1 57       	subi	r30, 0x71	; 113
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 81       	ld	r24, Z
    2da2:	91 81       	ldd	r25, Z+1	; 0x01
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <main+0x5d8>
    2da8:	fe 01       	movw	r30, r28
    2daa:	e1 57       	subi	r30, 0x71	; 113
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db2:	de 01       	movw	r26, r28
    2db4:	af 56       	subi	r26, 0x6F	; 111
    2db6:	bf 4f       	sbci	r27, 0xFF	; 255
    2db8:	fe 01       	movw	r30, r28
    2dba:	ef 56       	subi	r30, 0x6F	; 111
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	80 81       	ld	r24, Z
    2dc0:	91 81       	ldd	r25, Z+1	; 0x01
    2dc2:	01 97       	sbiw	r24, 0x01	; 1
    2dc4:	11 96       	adiw	r26, 0x01	; 1
    2dc6:	9c 93       	st	X, r25
    2dc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dca:	fe 01       	movw	r30, r28
    2dcc:	ef 56       	subi	r30, 0x6F	; 111
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	80 81       	ld	r24, Z
    2dd2:	91 81       	ldd	r25, Z+1	; 0x01
    2dd4:	00 97       	sbiw	r24, 0x00	; 0
    2dd6:	d1 f6       	brne	.-76     	; 0x2d8c <main+0x5c0>
    2dd8:	28 c0       	rjmp	.+80     	; 0x2e2a <main+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dda:	8e 01       	movw	r16, r28
    2ddc:	0f 56       	subi	r16, 0x6F	; 111
    2dde:	1f 4f       	sbci	r17, 0xFF	; 255
    2de0:	fe 01       	movw	r30, r28
    2de2:	ed 56       	subi	r30, 0x6D	; 109
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	60 81       	ld	r22, Z
    2de8:	71 81       	ldd	r23, Z+1	; 0x01
    2dea:	82 81       	ldd	r24, Z+2	; 0x02
    2dec:	93 81       	ldd	r25, Z+3	; 0x03
    2dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	f8 01       	movw	r30, r16
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	80 83       	st	Z, r24
    2dfc:	de 01       	movw	r26, r28
    2dfe:	a3 57       	subi	r26, 0x73	; 115
    2e00:	bf 4f       	sbci	r27, 0xFF	; 255
    2e02:	fe 01       	movw	r30, r28
    2e04:	ef 56       	subi	r30, 0x6F	; 111
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	11 96       	adiw	r26, 0x01	; 1
    2e0e:	9c 93       	st	X, r25
    2e10:	8e 93       	st	-X, r24
    2e12:	fe 01       	movw	r30, r28
    2e14:	e3 57       	subi	r30, 0x73	; 115
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	80 81       	ld	r24, Z
    2e1a:	91 81       	ldd	r25, Z+1	; 0x01
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <main+0x650>
    2e20:	fe 01       	movw	r30, r28
    2e22:	e3 57       	subi	r30, 0x73	; 115
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	91 83       	std	Z+1, r25	; 0x01
    2e28:	80 83       	st	Z, r24
		{
			LCD_displayString("enter your first ");
			LCD_goToRowColumn(1,2);
			LCD_displayString(" password");
		}
		while((i!=5))
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e0 54       	subi	r30, 0x40	; 64
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	80 81       	ld	r24, Z
    2e32:	85 30       	cpi	r24, 0x05	; 5
    2e34:	09 f0       	breq	.+2      	; 0x2e38 <main+0x66c>
    2e36:	60 cd       	rjmp	.-1344   	; 0x28f8 <main+0x12c>

			}

		}

		if(i==5)
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e0 54       	subi	r30, 0x40	; 64
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 81       	ld	r24, Z
    2e40:	85 30       	cpi	r24, 0x05	; 5
    2e42:	09 f0       	breq	.+2      	; 0x2e46 <main+0x67a>
    2e44:	c3 c0       	rjmp	.+390    	; 0x2fcc <main+0x800>
		{
			o++;
    2e46:	de 01       	movw	r26, r28
    2e48:	a7 54       	subi	r26, 0x47	; 71
    2e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e7 54       	subi	r30, 0x47	; 71
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 81       	ld	r24, Z
    2e54:	8f 5f       	subi	r24, 0xFF	; 255
    2e56:	8c 93       	st	X, r24
			LCD_clearScreen();
    2e58:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			LCD_displayString("please wait");
    2e5c:	8c e7       	ldi	r24, 0x7C	; 124
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    2e64:	fe 01       	movw	r30, r28
    2e66:	e7 57       	subi	r30, 0x77	; 119
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	aa e7       	ldi	r26, 0x7A	; 122
    2e70:	b3 e4       	ldi	r27, 0x43	; 67
    2e72:	80 83       	st	Z, r24
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	a2 83       	std	Z+2, r26	; 0x02
    2e78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7a:	8e 01       	movw	r16, r28
    2e7c:	0b 57       	subi	r16, 0x7B	; 123
    2e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e80:	fe 01       	movw	r30, r28
    2e82:	e7 57       	subi	r30, 0x77	; 119
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	60 81       	ld	r22, Z
    2e88:	71 81       	ldd	r23, Z+1	; 0x01
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	93 81       	ldd	r25, Z+3	; 0x03
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	4a ef       	ldi	r20, 0xFA	; 250
    2e94:	54 e4       	ldi	r21, 0x44	; 68
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	80 83       	st	Z, r24
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	a2 83       	std	Z+2, r26	; 0x02
    2ea6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	eb 57       	subi	r30, 0x7B	; 123
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	60 81       	ld	r22, Z
    2eb0:	71 81       	ldd	r23, Z+1	; 0x01
    2eb2:	82 81       	ldd	r24, Z+2	; 0x02
    2eb4:	93 81       	ldd	r25, Z+3	; 0x03
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e8       	ldi	r20, 0x80	; 128
    2ebc:	5f e3       	ldi	r21, 0x3F	; 63
    2ebe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec2:	88 23       	and	r24, r24
    2ec4:	44 f4       	brge	.+16     	; 0x2ed6 <main+0x70a>
		__ticks = 1;
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	ed 57       	subi	r30, 0x7D	; 125
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
    2ed4:	64 c0       	rjmp	.+200    	; 0x2f9e <main+0x7d2>
	else if (__tmp > 65535)
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	eb 57       	subi	r30, 0x7B	; 123
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	60 81       	ld	r22, Z
    2ede:	71 81       	ldd	r23, Z+1	; 0x01
    2ee0:	82 81       	ldd	r24, Z+2	; 0x02
    2ee2:	93 81       	ldd	r25, Z+3	; 0x03
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f e7       	ldi	r20, 0x7F	; 127
    2eea:	57 e4       	ldi	r21, 0x47	; 71
    2eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	0c f0       	brlt	.+2      	; 0x2ef6 <main+0x72a>
    2ef4:	43 c0       	rjmp	.+134    	; 0x2f7c <main+0x7b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e7 57       	subi	r30, 0x77	; 119
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	60 81       	ld	r22, Z
    2efe:	71 81       	ldd	r23, Z+1	; 0x01
    2f00:	82 81       	ldd	r24, Z+2	; 0x02
    2f02:	93 81       	ldd	r25, Z+3	; 0x03
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e2       	ldi	r20, 0x20	; 32
    2f0a:	51 e4       	ldi	r21, 0x41	; 65
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	8e 01       	movw	r16, r28
    2f16:	0d 57       	subi	r16, 0x7D	; 125
    2f18:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1a:	bc 01       	movw	r22, r24
    2f1c:	cd 01       	movw	r24, r26
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	f8 01       	movw	r30, r16
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
    2f2c:	1f c0       	rjmp	.+62     	; 0x2f6c <main+0x7a0>
    2f2e:	fe 01       	movw	r30, r28
    2f30:	ef 57       	subi	r30, 0x7F	; 127
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	88 ec       	ldi	r24, 0xC8	; 200
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	ef 57       	subi	r30, 0x7F	; 127
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	80 81       	ld	r24, Z
    2f44:	91 81       	ldd	r25, Z+1	; 0x01
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <main+0x77a>
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	ef 57       	subi	r30, 0x7F	; 127
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	91 83       	std	Z+1, r25	; 0x01
    2f52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f54:	de 01       	movw	r26, r28
    2f56:	ad 57       	subi	r26, 0x7D	; 125
    2f58:	bf 4f       	sbci	r27, 0xFF	; 255
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	ed 57       	subi	r30, 0x7D	; 125
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	80 81       	ld	r24, Z
    2f62:	91 81       	ldd	r25, Z+1	; 0x01
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	11 96       	adiw	r26, 0x01	; 1
    2f68:	9c 93       	st	X, r25
    2f6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	ed 57       	subi	r30, 0x7D	; 125
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	80 81       	ld	r24, Z
    2f74:	91 81       	ldd	r25, Z+1	; 0x01
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	d1 f6       	brne	.-76     	; 0x2f2e <main+0x762>
    2f7a:	28 c0       	rjmp	.+80     	; 0x2fcc <main+0x800>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7c:	8e 01       	movw	r16, r28
    2f7e:	0d 57       	subi	r16, 0x7D	; 125
    2f80:	1f 4f       	sbci	r17, 0xFF	; 255
    2f82:	fe 01       	movw	r30, r28
    2f84:	eb 57       	subi	r30, 0x7B	; 123
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	60 81       	ld	r22, Z
    2f8a:	71 81       	ldd	r23, Z+1	; 0x01
    2f8c:	82 81       	ldd	r24, Z+2	; 0x02
    2f8e:	93 81       	ldd	r25, Z+3	; 0x03
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	f8 01       	movw	r30, r16
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	80 83       	st	Z, r24
    2f9e:	de 01       	movw	r26, r28
    2fa0:	a1 58       	subi	r26, 0x81	; 129
    2fa2:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ed 57       	subi	r30, 0x7D	; 125
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	11 96       	adiw	r26, 0x01	; 1
    2fb0:	9c 93       	st	X, r25
    2fb2:	8e 93       	st	-X, r24
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e1 58       	subi	r30, 0x81	; 129
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	80 81       	ld	r24, Z
    2fbc:	91 81       	ldd	r25, Z+1	; 0x01
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <main+0x7f2>
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e1 58       	subi	r30, 0x81	; 129
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	91 83       	std	Z+1, r25	; 0x01
    2fca:	80 83       	st	Z, r24
			_delay_ms(250);
		}

		if(o==1)
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e7 54       	subi	r30, 0x47	; 71
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	80 81       	ld	r24, Z
    2fd4:	81 30       	cpi	r24, 0x01	; 1
    2fd6:	51 f5       	brne	.+84     	; 0x302c <main+0x860>
		{
			for ( count=0;count<5;count++)
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e5 54       	subi	r30, 0x45	; 69
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	10 82       	st	Z, r1
    2fe0:	1f c0       	rjmp	.+62     	; 0x3020 <main+0x854>
			{
				read[count]=eeprom_read_byte((const uint8_t *)(count));
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e5 54       	subi	r30, 0x45	; 69
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	08 2f       	mov	r16, r24
    2fec:	10 e0       	ldi	r17, 0x00	; 0
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e5 54       	subi	r30, 0x45	; 69
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	80 81       	ld	r24, Z
    2ff6:	88 2f       	mov	r24, r24
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	0e 94 36 30 	call	0x606c	; 0x606c <__eerd_byte_m16>
    2ffe:	28 2f       	mov	r18, r24
    3000:	ce 01       	movw	r24, r28
    3002:	8e 53       	subi	r24, 0x3E	; 62
    3004:	9f 4f       	sbci	r25, 0xFF	; 255
    3006:	fc 01       	movw	r30, r24
    3008:	e0 0f       	add	r30, r16
    300a:	f1 1f       	adc	r31, r17
    300c:	20 83       	st	Z, r18
			_delay_ms(250);
		}

		if(o==1)
		{
			for ( count=0;count<5;count++)
    300e:	de 01       	movw	r26, r28
    3010:	a5 54       	subi	r26, 0x45	; 69
    3012:	bf 4f       	sbci	r27, 0xFF	; 255
    3014:	fe 01       	movw	r30, r28
    3016:	e5 54       	subi	r30, 0x45	; 69
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	80 81       	ld	r24, Z
    301c:	8f 5f       	subi	r24, 0xFF	; 255
    301e:	8c 93       	st	X, r24
    3020:	fe 01       	movw	r30, r28
    3022:	e5 54       	subi	r30, 0x45	; 69
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	80 81       	ld	r24, Z
    3028:	85 30       	cpi	r24, 0x05	; 5
    302a:	d8 f2       	brcs	.-74     	; 0x2fe2 <main+0x816>
    302c:	fe 01       	movw	r30, r28
    302e:	e5 58       	subi	r30, 0x85	; 133
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	aa e7       	ldi	r26, 0x7A	; 122
    3038:	b3 e4       	ldi	r27, 0x43	; 67
    303a:	80 83       	st	Z, r24
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	a2 83       	std	Z+2, r26	; 0x02
    3040:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3042:	8e 01       	movw	r16, r28
    3044:	09 58       	subi	r16, 0x89	; 137
    3046:	1f 4f       	sbci	r17, 0xFF	; 255
    3048:	fe 01       	movw	r30, r28
    304a:	e5 58       	subi	r30, 0x85	; 133
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	60 81       	ld	r22, Z
    3050:	71 81       	ldd	r23, Z+1	; 0x01
    3052:	82 81       	ldd	r24, Z+2	; 0x02
    3054:	93 81       	ldd	r25, Z+3	; 0x03
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4a ef       	ldi	r20, 0xFA	; 250
    305c:	54 e4       	ldi	r21, 0x44	; 68
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	f8 01       	movw	r30, r16
    3068:	80 83       	st	Z, r24
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	a2 83       	std	Z+2, r26	; 0x02
    306e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3070:	fe 01       	movw	r30, r28
    3072:	e9 58       	subi	r30, 0x89	; 137
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	5f e3       	ldi	r21, 0x3F	; 63
    3086:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    308a:	88 23       	and	r24, r24
    308c:	44 f4       	brge	.+16     	; 0x309e <main+0x8d2>
		__ticks = 1;
    308e:	fe 01       	movw	r30, r28
    3090:	eb 58       	subi	r30, 0x8B	; 139
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
    309c:	64 c0       	rjmp	.+200    	; 0x3166 <main+0x99a>
	else if (__tmp > 65535)
    309e:	fe 01       	movw	r30, r28
    30a0:	e9 58       	subi	r30, 0x89	; 137
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	60 81       	ld	r22, Z
    30a6:	71 81       	ldd	r23, Z+1	; 0x01
    30a8:	82 81       	ldd	r24, Z+2	; 0x02
    30aa:	93 81       	ldd	r25, Z+3	; 0x03
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	3f ef       	ldi	r19, 0xFF	; 255
    30b0:	4f e7       	ldi	r20, 0x7F	; 127
    30b2:	57 e4       	ldi	r21, 0x47	; 71
    30b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30b8:	18 16       	cp	r1, r24
    30ba:	0c f0       	brlt	.+2      	; 0x30be <main+0x8f2>
    30bc:	43 c0       	rjmp	.+134    	; 0x3144 <main+0x978>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30be:	fe 01       	movw	r30, r28
    30c0:	e5 58       	subi	r30, 0x85	; 133
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e2       	ldi	r20, 0x20	; 32
    30d2:	51 e4       	ldi	r21, 0x41	; 65
    30d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	8e 01       	movw	r16, r28
    30de:	0b 58       	subi	r16, 0x8B	; 139
    30e0:	1f 4f       	sbci	r17, 0xFF	; 255
    30e2:	bc 01       	movw	r22, r24
    30e4:	cd 01       	movw	r24, r26
    30e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	f8 01       	movw	r30, r16
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
    30f4:	1f c0       	rjmp	.+62     	; 0x3134 <main+0x968>
    30f6:	fe 01       	movw	r30, r28
    30f8:	ed 58       	subi	r30, 0x8D	; 141
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	88 ec       	ldi	r24, 0xC8	; 200
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	91 83       	std	Z+1, r25	; 0x01
    3102:	80 83       	st	Z, r24
    3104:	fe 01       	movw	r30, r28
    3106:	ed 58       	subi	r30, 0x8D	; 141
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	80 81       	ld	r24, Z
    310c:	91 81       	ldd	r25, Z+1	; 0x01
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	f1 f7       	brne	.-4      	; 0x310e <main+0x942>
    3112:	fe 01       	movw	r30, r28
    3114:	ed 58       	subi	r30, 0x8D	; 141
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	91 83       	std	Z+1, r25	; 0x01
    311a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311c:	de 01       	movw	r26, r28
    311e:	ab 58       	subi	r26, 0x8B	; 139
    3120:	bf 4f       	sbci	r27, 0xFF	; 255
    3122:	fe 01       	movw	r30, r28
    3124:	eb 58       	subi	r30, 0x8B	; 139
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	80 81       	ld	r24, Z
    312a:	91 81       	ldd	r25, Z+1	; 0x01
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	11 96       	adiw	r26, 0x01	; 1
    3130:	9c 93       	st	X, r25
    3132:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3134:	fe 01       	movw	r30, r28
    3136:	eb 58       	subi	r30, 0x8B	; 139
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	80 81       	ld	r24, Z
    313c:	91 81       	ldd	r25, Z+1	; 0x01
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	d1 f6       	brne	.-76     	; 0x30f6 <main+0x92a>
    3142:	27 c0       	rjmp	.+78     	; 0x3192 <main+0x9c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3144:	8e 01       	movw	r16, r28
    3146:	0b 58       	subi	r16, 0x8B	; 139
    3148:	1f 4f       	sbci	r17, 0xFF	; 255
    314a:	fe 01       	movw	r30, r28
    314c:	e9 58       	subi	r30, 0x89	; 137
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	60 81       	ld	r22, Z
    3152:	71 81       	ldd	r23, Z+1	; 0x01
    3154:	82 81       	ldd	r24, Z+2	; 0x02
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	f8 01       	movw	r30, r16
    3162:	91 83       	std	Z+1, r25	; 0x01
    3164:	80 83       	st	Z, r24
    3166:	de 01       	movw	r26, r28
    3168:	af 58       	subi	r26, 0x8F	; 143
    316a:	bf 4f       	sbci	r27, 0xFF	; 255
    316c:	fe 01       	movw	r30, r28
    316e:	eb 58       	subi	r30, 0x8B	; 139
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	80 81       	ld	r24, Z
    3174:	91 81       	ldd	r25, Z+1	; 0x01
    3176:	8d 93       	st	X+, r24
    3178:	9c 93       	st	X, r25
    317a:	fe 01       	movw	r30, r28
    317c:	ef 58       	subi	r30, 0x8F	; 143
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <main+0x9b8>
    3188:	fe 01       	movw	r30, r28
    318a:	ef 58       	subi	r30, 0x8F	; 143
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	91 83       	std	Z+1, r25	; 0x01
    3190:	80 83       	st	Z, r24
			{
				read[count]=eeprom_read_byte((const uint8_t *)(count));
			}
		}
		_delay_ms(250);
		LCD_clearScreen();
    3192:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
		LCD_displayString("saved");
    3196:	88 e8       	ldi	r24, 0x88	; 136
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    319e:	fe 01       	movw	r30, r28
    31a0:	e3 59       	subi	r30, 0x93	; 147
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	aa ef       	ldi	r26, 0xFA	; 250
    31aa:	b3 e4       	ldi	r27, 0x43	; 67
    31ac:	80 83       	st	Z, r24
    31ae:	91 83       	std	Z+1, r25	; 0x01
    31b0:	a2 83       	std	Z+2, r26	; 0x02
    31b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b4:	8e 01       	movw	r16, r28
    31b6:	07 59       	subi	r16, 0x97	; 151
    31b8:	1f 4f       	sbci	r17, 0xFF	; 255
    31ba:	fe 01       	movw	r30, r28
    31bc:	e3 59       	subi	r30, 0x93	; 147
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	60 81       	ld	r22, Z
    31c2:	71 81       	ldd	r23, Z+1	; 0x01
    31c4:	82 81       	ldd	r24, Z+2	; 0x02
    31c6:	93 81       	ldd	r25, Z+3	; 0x03
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	4a ef       	ldi	r20, 0xFA	; 250
    31ce:	54 e4       	ldi	r21, 0x44	; 68
    31d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	f8 01       	movw	r30, r16
    31da:	80 83       	st	Z, r24
    31dc:	91 83       	std	Z+1, r25	; 0x01
    31de:	a2 83       	std	Z+2, r26	; 0x02
    31e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31e2:	fe 01       	movw	r30, r28
    31e4:	e7 59       	subi	r30, 0x97	; 151
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	60 81       	ld	r22, Z
    31ea:	71 81       	ldd	r23, Z+1	; 0x01
    31ec:	82 81       	ldd	r24, Z+2	; 0x02
    31ee:	93 81       	ldd	r25, Z+3	; 0x03
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	40 e8       	ldi	r20, 0x80	; 128
    31f6:	5f e3       	ldi	r21, 0x3F	; 63
    31f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31fc:	88 23       	and	r24, r24
    31fe:	44 f4       	brge	.+16     	; 0x3210 <main+0xa44>
		__ticks = 1;
    3200:	fe 01       	movw	r30, r28
    3202:	e9 59       	subi	r30, 0x99	; 153
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	91 83       	std	Z+1, r25	; 0x01
    320c:	80 83       	st	Z, r24
    320e:	64 c0       	rjmp	.+200    	; 0x32d8 <main+0xb0c>
	else if (__tmp > 65535)
    3210:	fe 01       	movw	r30, r28
    3212:	e7 59       	subi	r30, 0x97	; 151
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	60 81       	ld	r22, Z
    3218:	71 81       	ldd	r23, Z+1	; 0x01
    321a:	82 81       	ldd	r24, Z+2	; 0x02
    321c:	93 81       	ldd	r25, Z+3	; 0x03
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	3f ef       	ldi	r19, 0xFF	; 255
    3222:	4f e7       	ldi	r20, 0x7F	; 127
    3224:	57 e4       	ldi	r21, 0x47	; 71
    3226:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    322a:	18 16       	cp	r1, r24
    322c:	0c f0       	brlt	.+2      	; 0x3230 <main+0xa64>
    322e:	43 c0       	rjmp	.+134    	; 0x32b6 <main+0xaea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3230:	fe 01       	movw	r30, r28
    3232:	e3 59       	subi	r30, 0x93	; 147
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	60 81       	ld	r22, Z
    3238:	71 81       	ldd	r23, Z+1	; 0x01
    323a:	82 81       	ldd	r24, Z+2	; 0x02
    323c:	93 81       	ldd	r25, Z+3	; 0x03
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e2       	ldi	r20, 0x20	; 32
    3244:	51 e4       	ldi	r21, 0x41	; 65
    3246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	8e 01       	movw	r16, r28
    3250:	09 59       	subi	r16, 0x99	; 153
    3252:	1f 4f       	sbci	r17, 0xFF	; 255
    3254:	bc 01       	movw	r22, r24
    3256:	cd 01       	movw	r24, r26
    3258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	f8 01       	movw	r30, r16
    3262:	91 83       	std	Z+1, r25	; 0x01
    3264:	80 83       	st	Z, r24
    3266:	1f c0       	rjmp	.+62     	; 0x32a6 <main+0xada>
    3268:	fe 01       	movw	r30, r28
    326a:	eb 59       	subi	r30, 0x9B	; 155
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	88 ec       	ldi	r24, 0xC8	; 200
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	91 83       	std	Z+1, r25	; 0x01
    3274:	80 83       	st	Z, r24
    3276:	fe 01       	movw	r30, r28
    3278:	eb 59       	subi	r30, 0x9B	; 155
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	80 81       	ld	r24, Z
    327e:	91 81       	ldd	r25, Z+1	; 0x01
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <main+0xab4>
    3284:	fe 01       	movw	r30, r28
    3286:	eb 59       	subi	r30, 0x9B	; 155
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328e:	de 01       	movw	r26, r28
    3290:	a9 59       	subi	r26, 0x99	; 153
    3292:	bf 4f       	sbci	r27, 0xFF	; 255
    3294:	fe 01       	movw	r30, r28
    3296:	e9 59       	subi	r30, 0x99	; 153
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	80 81       	ld	r24, Z
    329c:	91 81       	ldd	r25, Z+1	; 0x01
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	11 96       	adiw	r26, 0x01	; 1
    32a2:	9c 93       	st	X, r25
    32a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a6:	fe 01       	movw	r30, r28
    32a8:	e9 59       	subi	r30, 0x99	; 153
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	80 81       	ld	r24, Z
    32ae:	91 81       	ldd	r25, Z+1	; 0x01
    32b0:	00 97       	sbiw	r24, 0x00	; 0
    32b2:	d1 f6       	brne	.-76     	; 0x3268 <main+0xa9c>
    32b4:	27 c0       	rjmp	.+78     	; 0x3304 <main+0xb38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b6:	8e 01       	movw	r16, r28
    32b8:	09 59       	subi	r16, 0x99	; 153
    32ba:	1f 4f       	sbci	r17, 0xFF	; 255
    32bc:	fe 01       	movw	r30, r28
    32be:	e7 59       	subi	r30, 0x97	; 151
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	60 81       	ld	r22, Z
    32c4:	71 81       	ldd	r23, Z+1	; 0x01
    32c6:	82 81       	ldd	r24, Z+2	; 0x02
    32c8:	93 81       	ldd	r25, Z+3	; 0x03
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	f8 01       	movw	r30, r16
    32d4:	91 83       	std	Z+1, r25	; 0x01
    32d6:	80 83       	st	Z, r24
    32d8:	de 01       	movw	r26, r28
    32da:	ad 59       	subi	r26, 0x9D	; 157
    32dc:	bf 4f       	sbci	r27, 0xFF	; 255
    32de:	fe 01       	movw	r30, r28
    32e0:	e9 59       	subi	r30, 0x99	; 153
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	80 81       	ld	r24, Z
    32e6:	91 81       	ldd	r25, Z+1	; 0x01
    32e8:	8d 93       	st	X+, r24
    32ea:	9c 93       	st	X, r25
    32ec:	fe 01       	movw	r30, r28
    32ee:	ed 59       	subi	r30, 0x9D	; 157
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	80 81       	ld	r24, Z
    32f4:	91 81       	ldd	r25, Z+1	; 0x01
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <main+0xb2a>
    32fa:	fe 01       	movw	r30, r28
    32fc:	ed 59       	subi	r30, 0x9D	; 157
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	91 83       	std	Z+1, r25	; 0x01
    3302:	80 83       	st	Z, r24
		_delay_ms(500);
		LCD_clearScreen();
    3304:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>

	}

	for ( count=0;count<5;count++)
    3308:	fe 01       	movw	r30, r28
    330a:	e5 54       	subi	r30, 0x45	; 69
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	10 82       	st	Z, r1
    3310:	1f c0       	rjmp	.+62     	; 0x3350 <main+0xb84>
	{
		read[count]=eeprom_read_byte((const uint8_t *)(count));
    3312:	fe 01       	movw	r30, r28
    3314:	e5 54       	subi	r30, 0x45	; 69
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	80 81       	ld	r24, Z
    331a:	08 2f       	mov	r16, r24
    331c:	10 e0       	ldi	r17, 0x00	; 0
    331e:	fe 01       	movw	r30, r28
    3320:	e5 54       	subi	r30, 0x45	; 69
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	80 81       	ld	r24, Z
    3326:	88 2f       	mov	r24, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 36 30 	call	0x606c	; 0x606c <__eerd_byte_m16>
    332e:	28 2f       	mov	r18, r24
    3330:	ce 01       	movw	r24, r28
    3332:	8e 53       	subi	r24, 0x3E	; 62
    3334:	9f 4f       	sbci	r25, 0xFF	; 255
    3336:	fc 01       	movw	r30, r24
    3338:	e0 0f       	add	r30, r16
    333a:	f1 1f       	adc	r31, r17
    333c:	20 83       	st	Z, r18
		_delay_ms(500);
		LCD_clearScreen();

	}

	for ( count=0;count<5;count++)
    333e:	de 01       	movw	r26, r28
    3340:	a5 54       	subi	r26, 0x45	; 69
    3342:	bf 4f       	sbci	r27, 0xFF	; 255
    3344:	fe 01       	movw	r30, r28
    3346:	e5 54       	subi	r30, 0x45	; 69
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 81       	ld	r24, Z
    334c:	8f 5f       	subi	r24, 0xFF	; 255
    334e:	8c 93       	st	X, r24
    3350:	fe 01       	movw	r30, r28
    3352:	e5 54       	subi	r30, 0x45	; 69
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 81       	ld	r24, Z
    3358:	85 30       	cpi	r24, 0x05	; 5
    335a:	d8 f2       	brcs	.-74     	; 0x3312 <main+0xb46>
	{
		read[count]=eeprom_read_byte((const uint8_t *)(count));
	}
	if(j==0)
    335c:	fe 01       	movw	r30, r28
    335e:	ef 53       	subi	r30, 0x3F	; 63
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 81       	ld	r24, Z
    3364:	88 23       	and	r24, r24
    3366:	09 f0       	breq	.+2      	; 0x336a <main+0xb9e>
    3368:	d5 c4       	rjmp	.+2474   	; 0x3d14 <main+0x1548>
	{

		out_1=0;
    336a:	fe 01       	movw	r30, r28
    336c:	e1 54       	subi	r30, 0x41	; 65
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	10 82       	st	Z, r1
		LCD_displayString("  enter your");
    3372:	8e e8       	ldi	r24, 0x8E	; 142
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
		LCD_goToRowColumn(1,2);
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	62 e0       	ldi	r22, 0x02	; 2
    337e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
		LCD_displayString(" password");
    3382:	82 e7       	ldi	r24, 0x72	; 114
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
		o_1=0;
    338a:	fe 01       	movw	r30, r28
    338c:	e8 54       	subi	r30, 0x48	; 72
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	10 82       	st	Z, r1
    3392:	c0 c4       	rjmp	.+2432   	; 0x3d14 <main+0x1548>

	//******************************writing the  password to enter home******************************************//

	while ((o_1!=1)){

		key_in = KeyPad_getPressedKey();
    3394:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    3398:	fe 01       	movw	r30, r28
    339a:	e3 54       	subi	r30, 0x43	; 67
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	80 83       	st	Z, r24

		if(!(j==5)){
    33a0:	fe 01       	movw	r30, r28
    33a2:	ef 53       	subi	r30, 0x3F	; 63
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	80 81       	ld	r24, Z
    33a8:	85 30       	cpi	r24, 0x05	; 5
    33aa:	09 f4       	brne	.+2      	; 0x33ae <main+0xbe2>
    33ac:	67 c2       	rjmp	.+1230   	; 0x387c <main+0x10b0>

			{if(!(out_1==1)){out_1++;LCD_clearScreen();}}
    33ae:	fe 01       	movw	r30, r28
    33b0:	e1 54       	subi	r30, 0x41	; 65
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	80 81       	ld	r24, Z
    33b6:	81 30       	cpi	r24, 0x01	; 1
    33b8:	59 f0       	breq	.+22     	; 0x33d0 <main+0xc04>
    33ba:	de 01       	movw	r26, r28
    33bc:	a1 54       	subi	r26, 0x41	; 65
    33be:	bf 4f       	sbci	r27, 0xFF	; 255
    33c0:	fe 01       	movw	r30, r28
    33c2:	e1 54       	subi	r30, 0x41	; 65
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	80 81       	ld	r24, Z
    33c8:	8f 5f       	subi	r24, 0xFF	; 255
    33ca:	8c 93       	st	X, r24
    33cc:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>

			if ((key_in>= 0) && (key_in<= 9))
    33d0:	fe 01       	movw	r30, r28
    33d2:	e3 54       	subi	r30, 0x43	; 67
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	80 81       	ld	r24, Z
    33d8:	8a 30       	cpi	r24, 0x0A	; 10
    33da:	08 f0       	brcs	.+2      	; 0x33de <main+0xc12>
    33dc:	e0 c0       	rjmp	.+448    	; 0x359e <main+0xdd2>
			{read_1[j]=key_in;
    33de:	fe 01       	movw	r30, r28
    33e0:	ef 53       	subi	r30, 0x3F	; 63
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	80 81       	ld	r24, Z
    33e6:	28 2f       	mov	r18, r24
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	ce 01       	movw	r24, r28
    33ec:	89 53       	subi	r24, 0x39	; 57
    33ee:	9f 4f       	sbci	r25, 0xFF	; 255
    33f0:	dc 01       	movw	r26, r24
    33f2:	a2 0f       	add	r26, r18
    33f4:	b3 1f       	adc	r27, r19
    33f6:	fe 01       	movw	r30, r28
    33f8:	e3 54       	subi	r30, 0x43	; 67
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	80 81       	ld	r24, Z
    33fe:	8c 93       	st	X, r24

			LCD_intgerToString(key_in);
    3400:	fe 01       	movw	r30, r28
    3402:	e3 54       	subi	r30, 0x43	; 67
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	80 81       	ld	r24, Z
    3408:	88 2f       	mov	r24, r24
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_intgerToString>
    3410:	fe 01       	movw	r30, r28
    3412:	e1 5a       	subi	r30, 0xA1	; 161
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	a8 e4       	ldi	r26, 0x48	; 72
    341c:	b2 e4       	ldi	r27, 0x42	; 66
    341e:	80 83       	st	Z, r24
    3420:	91 83       	std	Z+1, r25	; 0x01
    3422:	a2 83       	std	Z+2, r26	; 0x02
    3424:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3426:	8e 01       	movw	r16, r28
    3428:	05 5a       	subi	r16, 0xA5	; 165
    342a:	1f 4f       	sbci	r17, 0xFF	; 255
    342c:	fe 01       	movw	r30, r28
    342e:	e1 5a       	subi	r30, 0xA1	; 161
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	60 81       	ld	r22, Z
    3434:	71 81       	ldd	r23, Z+1	; 0x01
    3436:	82 81       	ldd	r24, Z+2	; 0x02
    3438:	93 81       	ldd	r25, Z+3	; 0x03
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	4a ef       	ldi	r20, 0xFA	; 250
    3440:	54 e4       	ldi	r21, 0x44	; 68
    3442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	f8 01       	movw	r30, r16
    344c:	80 83       	st	Z, r24
    344e:	91 83       	std	Z+1, r25	; 0x01
    3450:	a2 83       	std	Z+2, r26	; 0x02
    3452:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3454:	fe 01       	movw	r30, r28
    3456:	e5 5a       	subi	r30, 0xA5	; 165
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	60 81       	ld	r22, Z
    345c:	71 81       	ldd	r23, Z+1	; 0x01
    345e:	82 81       	ldd	r24, Z+2	; 0x02
    3460:	93 81       	ldd	r25, Z+3	; 0x03
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e8       	ldi	r20, 0x80	; 128
    3468:	5f e3       	ldi	r21, 0x3F	; 63
    346a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    346e:	88 23       	and	r24, r24
    3470:	44 f4       	brge	.+16     	; 0x3482 <main+0xcb6>
		__ticks = 1;
    3472:	fe 01       	movw	r30, r28
    3474:	e7 5a       	subi	r30, 0xA7	; 167
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
    3480:	64 c0       	rjmp	.+200    	; 0x354a <main+0xd7e>
	else if (__tmp > 65535)
    3482:	fe 01       	movw	r30, r28
    3484:	e5 5a       	subi	r30, 0xA5	; 165
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	60 81       	ld	r22, Z
    348a:	71 81       	ldd	r23, Z+1	; 0x01
    348c:	82 81       	ldd	r24, Z+2	; 0x02
    348e:	93 81       	ldd	r25, Z+3	; 0x03
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	3f ef       	ldi	r19, 0xFF	; 255
    3494:	4f e7       	ldi	r20, 0x7F	; 127
    3496:	57 e4       	ldi	r21, 0x47	; 71
    3498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    349c:	18 16       	cp	r1, r24
    349e:	0c f0       	brlt	.+2      	; 0x34a2 <main+0xcd6>
    34a0:	43 c0       	rjmp	.+134    	; 0x3528 <main+0xd5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a2:	fe 01       	movw	r30, r28
    34a4:	e1 5a       	subi	r30, 0xA1	; 161
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	60 81       	ld	r22, Z
    34aa:	71 81       	ldd	r23, Z+1	; 0x01
    34ac:	82 81       	ldd	r24, Z+2	; 0x02
    34ae:	93 81       	ldd	r25, Z+3	; 0x03
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e2       	ldi	r20, 0x20	; 32
    34b6:	51 e4       	ldi	r21, 0x41	; 65
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	8e 01       	movw	r16, r28
    34c2:	07 5a       	subi	r16, 0xA7	; 167
    34c4:	1f 4f       	sbci	r17, 0xFF	; 255
    34c6:	bc 01       	movw	r22, r24
    34c8:	cd 01       	movw	r24, r26
    34ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	f8 01       	movw	r30, r16
    34d4:	91 83       	std	Z+1, r25	; 0x01
    34d6:	80 83       	st	Z, r24
    34d8:	1f c0       	rjmp	.+62     	; 0x3518 <main+0xd4c>
    34da:	fe 01       	movw	r30, r28
    34dc:	e9 5a       	subi	r30, 0xA9	; 169
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	88 ec       	ldi	r24, 0xC8	; 200
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	91 83       	std	Z+1, r25	; 0x01
    34e6:	80 83       	st	Z, r24
    34e8:	fe 01       	movw	r30, r28
    34ea:	e9 5a       	subi	r30, 0xA9	; 169
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	80 81       	ld	r24, Z
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <main+0xd26>
    34f6:	fe 01       	movw	r30, r28
    34f8:	e9 5a       	subi	r30, 0xA9	; 169
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3500:	de 01       	movw	r26, r28
    3502:	a7 5a       	subi	r26, 0xA7	; 167
    3504:	bf 4f       	sbci	r27, 0xFF	; 255
    3506:	fe 01       	movw	r30, r28
    3508:	e7 5a       	subi	r30, 0xA7	; 167
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	11 96       	adiw	r26, 0x01	; 1
    3514:	9c 93       	st	X, r25
    3516:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3518:	fe 01       	movw	r30, r28
    351a:	e7 5a       	subi	r30, 0xA7	; 167
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	80 81       	ld	r24, Z
    3520:	91 81       	ldd	r25, Z+1	; 0x01
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	d1 f6       	brne	.-76     	; 0x34da <main+0xd0e>
    3526:	27 c0       	rjmp	.+78     	; 0x3576 <main+0xdaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3528:	8e 01       	movw	r16, r28
    352a:	07 5a       	subi	r16, 0xA7	; 167
    352c:	1f 4f       	sbci	r17, 0xFF	; 255
    352e:	fe 01       	movw	r30, r28
    3530:	e5 5a       	subi	r30, 0xA5	; 165
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	60 81       	ld	r22, Z
    3536:	71 81       	ldd	r23, Z+1	; 0x01
    3538:	82 81       	ldd	r24, Z+2	; 0x02
    353a:	93 81       	ldd	r25, Z+3	; 0x03
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	f8 01       	movw	r30, r16
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	80 83       	st	Z, r24
    354a:	de 01       	movw	r26, r28
    354c:	ab 5a       	subi	r26, 0xAB	; 171
    354e:	bf 4f       	sbci	r27, 0xFF	; 255
    3550:	fe 01       	movw	r30, r28
    3552:	e7 5a       	subi	r30, 0xA7	; 167
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	80 81       	ld	r24, Z
    3558:	91 81       	ldd	r25, Z+1	; 0x01
    355a:	8d 93       	st	X+, r24
    355c:	9c 93       	st	X, r25
    355e:	fe 01       	movw	r30, r28
    3560:	eb 5a       	subi	r30, 0xAB	; 171
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	80 81       	ld	r24, Z
    3566:	91 81       	ldd	r25, Z+1	; 0x01
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	f1 f7       	brne	.-4      	; 0x3568 <main+0xd9c>
    356c:	fe 01       	movw	r30, r28
    356e:	eb 5a       	subi	r30, 0xAB	; 171
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	91 83       	std	Z+1, r25	; 0x01
    3574:	80 83       	st	Z, r24
			_delay_ms(50);
			LCD_goToRowColumn(0,j);
    3576:	fe 01       	movw	r30, r28
    3578:	ef 53       	subi	r30, 0x3F	; 63
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	60 81       	ld	r22, Z
    3580:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
			LCD_displayCharacter('*');
    3584:	8a e2       	ldi	r24, 0x2A	; 42
    3586:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_displayCharacter>
			j++;
    358a:	de 01       	movw	r26, r28
    358c:	af 53       	subi	r26, 0x3F	; 63
    358e:	bf 4f       	sbci	r27, 0xFF	; 255
    3590:	fe 01       	movw	r30, r28
    3592:	ef 53       	subi	r30, 0x3F	; 63
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	8f 5f       	subi	r24, 0xFF	; 255
    359a:	8c 93       	st	X, r24
    359c:	ea c0       	rjmp	.+468    	; 0x3772 <main+0xfa6>
			}
			else
			{read_1[j]=key_in ;
    359e:	fe 01       	movw	r30, r28
    35a0:	ef 53       	subi	r30, 0x3F	; 63
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	80 81       	ld	r24, Z
    35a6:	28 2f       	mov	r18, r24
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	ce 01       	movw	r24, r28
    35ac:	89 53       	subi	r24, 0x39	; 57
    35ae:	9f 4f       	sbci	r25, 0xFF	; 255
    35b0:	dc 01       	movw	r26, r24
    35b2:	a2 0f       	add	r26, r18
    35b4:	b3 1f       	adc	r27, r19
    35b6:	fe 01       	movw	r30, r28
    35b8:	e3 54       	subi	r30, 0x43	; 67
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	80 81       	ld	r24, Z
    35be:	8c 93       	st	X, r24

			if(key_in=='#'){LCD_displayCharacter('#');}else if(key_in=='*'){LCD_displayCharacter('*');};
    35c0:	fe 01       	movw	r30, r28
    35c2:	e3 54       	subi	r30, 0x43	; 67
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 81       	ld	r24, Z
    35c8:	83 32       	cpi	r24, 0x23	; 35
    35ca:	21 f4       	brne	.+8      	; 0x35d4 <main+0xe08>
    35cc:	83 e2       	ldi	r24, 0x23	; 35
    35ce:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_displayCharacter>
    35d2:	09 c0       	rjmp	.+18     	; 0x35e6 <main+0xe1a>
    35d4:	fe 01       	movw	r30, r28
    35d6:	e3 54       	subi	r30, 0x43	; 67
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	80 81       	ld	r24, Z
    35dc:	8a 32       	cpi	r24, 0x2A	; 42
    35de:	19 f4       	brne	.+6      	; 0x35e6 <main+0xe1a>
    35e0:	8a e2       	ldi	r24, 0x2A	; 42
    35e2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_displayCharacter>
    35e6:	fe 01       	movw	r30, r28
    35e8:	ef 5a       	subi	r30, 0xAF	; 175
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	a8 e4       	ldi	r26, 0x48	; 72
    35f2:	b2 e4       	ldi	r27, 0x42	; 66
    35f4:	80 83       	st	Z, r24
    35f6:	91 83       	std	Z+1, r25	; 0x01
    35f8:	a2 83       	std	Z+2, r26	; 0x02
    35fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35fc:	8e 01       	movw	r16, r28
    35fe:	03 5b       	subi	r16, 0xB3	; 179
    3600:	1f 4f       	sbci	r17, 0xFF	; 255
    3602:	fe 01       	movw	r30, r28
    3604:	ef 5a       	subi	r30, 0xAF	; 175
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	60 81       	ld	r22, Z
    360a:	71 81       	ldd	r23, Z+1	; 0x01
    360c:	82 81       	ldd	r24, Z+2	; 0x02
    360e:	93 81       	ldd	r25, Z+3	; 0x03
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	4a ef       	ldi	r20, 0xFA	; 250
    3616:	54 e4       	ldi	r21, 0x44	; 68
    3618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	f8 01       	movw	r30, r16
    3622:	80 83       	st	Z, r24
    3624:	91 83       	std	Z+1, r25	; 0x01
    3626:	a2 83       	std	Z+2, r26	; 0x02
    3628:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    362a:	fe 01       	movw	r30, r28
    362c:	e3 5b       	subi	r30, 0xB3	; 179
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	60 81       	ld	r22, Z
    3632:	71 81       	ldd	r23, Z+1	; 0x01
    3634:	82 81       	ldd	r24, Z+2	; 0x02
    3636:	93 81       	ldd	r25, Z+3	; 0x03
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e8       	ldi	r20, 0x80	; 128
    363e:	5f e3       	ldi	r21, 0x3F	; 63
    3640:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3644:	88 23       	and	r24, r24
    3646:	44 f4       	brge	.+16     	; 0x3658 <main+0xe8c>
		__ticks = 1;
    3648:	fe 01       	movw	r30, r28
    364a:	e5 5b       	subi	r30, 0xB5	; 181
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	91 83       	std	Z+1, r25	; 0x01
    3654:	80 83       	st	Z, r24
    3656:	64 c0       	rjmp	.+200    	; 0x3720 <main+0xf54>
	else if (__tmp > 65535)
    3658:	fe 01       	movw	r30, r28
    365a:	e3 5b       	subi	r30, 0xB3	; 179
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	60 81       	ld	r22, Z
    3660:	71 81       	ldd	r23, Z+1	; 0x01
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	93 81       	ldd	r25, Z+3	; 0x03
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	3f ef       	ldi	r19, 0xFF	; 255
    366a:	4f e7       	ldi	r20, 0x7F	; 127
    366c:	57 e4       	ldi	r21, 0x47	; 71
    366e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3672:	18 16       	cp	r1, r24
    3674:	0c f0       	brlt	.+2      	; 0x3678 <main+0xeac>
    3676:	43 c0       	rjmp	.+134    	; 0x36fe <main+0xf32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3678:	fe 01       	movw	r30, r28
    367a:	ef 5a       	subi	r30, 0xAF	; 175
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	60 81       	ld	r22, Z
    3680:	71 81       	ldd	r23, Z+1	; 0x01
    3682:	82 81       	ldd	r24, Z+2	; 0x02
    3684:	93 81       	ldd	r25, Z+3	; 0x03
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	40 e2       	ldi	r20, 0x20	; 32
    368c:	51 e4       	ldi	r21, 0x41	; 65
    368e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	8e 01       	movw	r16, r28
    3698:	05 5b       	subi	r16, 0xB5	; 181
    369a:	1f 4f       	sbci	r17, 0xFF	; 255
    369c:	bc 01       	movw	r22, r24
    369e:	cd 01       	movw	r24, r26
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	f8 01       	movw	r30, r16
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	80 83       	st	Z, r24
    36ae:	1f c0       	rjmp	.+62     	; 0x36ee <main+0xf22>
    36b0:	fe 01       	movw	r30, r28
    36b2:	e7 5b       	subi	r30, 0xB7	; 183
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	88 ec       	ldi	r24, 0xC8	; 200
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	91 83       	std	Z+1, r25	; 0x01
    36bc:	80 83       	st	Z, r24
    36be:	fe 01       	movw	r30, r28
    36c0:	e7 5b       	subi	r30, 0xB7	; 183
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	91 81       	ldd	r25, Z+1	; 0x01
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <main+0xefc>
    36cc:	fe 01       	movw	r30, r28
    36ce:	e7 5b       	subi	r30, 0xB7	; 183
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d6:	de 01       	movw	r26, r28
    36d8:	a5 5b       	subi	r26, 0xB5	; 181
    36da:	bf 4f       	sbci	r27, 0xFF	; 255
    36dc:	fe 01       	movw	r30, r28
    36de:	e5 5b       	subi	r30, 0xB5	; 181
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	80 81       	ld	r24, Z
    36e4:	91 81       	ldd	r25, Z+1	; 0x01
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	11 96       	adiw	r26, 0x01	; 1
    36ea:	9c 93       	st	X, r25
    36ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ee:	fe 01       	movw	r30, r28
    36f0:	e5 5b       	subi	r30, 0xB5	; 181
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	80 81       	ld	r24, Z
    36f6:	91 81       	ldd	r25, Z+1	; 0x01
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	d1 f6       	brne	.-76     	; 0x36b0 <main+0xee4>
    36fc:	27 c0       	rjmp	.+78     	; 0x374c <main+0xf80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fe:	8e 01       	movw	r16, r28
    3700:	05 5b       	subi	r16, 0xB5	; 181
    3702:	1f 4f       	sbci	r17, 0xFF	; 255
    3704:	fe 01       	movw	r30, r28
    3706:	e3 5b       	subi	r30, 0xB3	; 179
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	60 81       	ld	r22, Z
    370c:	71 81       	ldd	r23, Z+1	; 0x01
    370e:	82 81       	ldd	r24, Z+2	; 0x02
    3710:	93 81       	ldd	r25, Z+3	; 0x03
    3712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	f8 01       	movw	r30, r16
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	80 83       	st	Z, r24
    3720:	de 01       	movw	r26, r28
    3722:	a9 5b       	subi	r26, 0xB9	; 185
    3724:	bf 4f       	sbci	r27, 0xFF	; 255
    3726:	fe 01       	movw	r30, r28
    3728:	e5 5b       	subi	r30, 0xB5	; 181
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	80 81       	ld	r24, Z
    372e:	91 81       	ldd	r25, Z+1	; 0x01
    3730:	8d 93       	st	X+, r24
    3732:	9c 93       	st	X, r25
    3734:	fe 01       	movw	r30, r28
    3736:	e9 5b       	subi	r30, 0xB9	; 185
    3738:	ff 4f       	sbci	r31, 0xFF	; 255
    373a:	80 81       	ld	r24, Z
    373c:	91 81       	ldd	r25, Z+1	; 0x01
    373e:	01 97       	sbiw	r24, 0x01	; 1
    3740:	f1 f7       	brne	.-4      	; 0x373e <main+0xf72>
    3742:	fe 01       	movw	r30, r28
    3744:	e9 5b       	subi	r30, 0xB9	; 185
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	91 83       	std	Z+1, r25	; 0x01
    374a:	80 83       	st	Z, r24
			_delay_ms(50);
			LCD_goToRowColumn(0,j);
    374c:	fe 01       	movw	r30, r28
    374e:	ef 53       	subi	r30, 0x3F	; 63
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	60 81       	ld	r22, Z
    3756:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
			LCD_displayCharacter('*');
    375a:	8a e2       	ldi	r24, 0x2A	; 42
    375c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_displayCharacter>
			j++;
    3760:	de 01       	movw	r26, r28
    3762:	af 53       	subi	r26, 0x3F	; 63
    3764:	bf 4f       	sbci	r27, 0xFF	; 255
    3766:	fe 01       	movw	r30, r28
    3768:	ef 53       	subi	r30, 0x3F	; 63
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	80 81       	ld	r24, Z
    376e:	8f 5f       	subi	r24, 0xFF	; 255
    3770:	8c 93       	st	X, r24
    3772:	fe 01       	movw	r30, r28
    3774:	ed 5b       	subi	r30, 0xBD	; 189
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	a8 ec       	ldi	r26, 0xC8	; 200
    377e:	b2 e4       	ldi	r27, 0x42	; 66
    3780:	80 83       	st	Z, r24
    3782:	91 83       	std	Z+1, r25	; 0x01
    3784:	a2 83       	std	Z+2, r26	; 0x02
    3786:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3788:	8e 01       	movw	r16, r28
    378a:	01 5c       	subi	r16, 0xC1	; 193
    378c:	1f 4f       	sbci	r17, 0xFF	; 255
    378e:	fe 01       	movw	r30, r28
    3790:	ed 5b       	subi	r30, 0xBD	; 189
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	60 81       	ld	r22, Z
    3796:	71 81       	ldd	r23, Z+1	; 0x01
    3798:	82 81       	ldd	r24, Z+2	; 0x02
    379a:	93 81       	ldd	r25, Z+3	; 0x03
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	4a ef       	ldi	r20, 0xFA	; 250
    37a2:	54 e4       	ldi	r21, 0x44	; 68
    37a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	f8 01       	movw	r30, r16
    37ae:	80 83       	st	Z, r24
    37b0:	91 83       	std	Z+1, r25	; 0x01
    37b2:	a2 83       	std	Z+2, r26	; 0x02
    37b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37b6:	fe 01       	movw	r30, r28
    37b8:	ff 96       	adiw	r30, 0x3f	; 63
    37ba:	60 81       	ld	r22, Z
    37bc:	71 81       	ldd	r23, Z+1	; 0x01
    37be:	82 81       	ldd	r24, Z+2	; 0x02
    37c0:	93 81       	ldd	r25, Z+3	; 0x03
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	40 e8       	ldi	r20, 0x80	; 128
    37c8:	5f e3       	ldi	r21, 0x3F	; 63
    37ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ce:	88 23       	and	r24, r24
    37d0:	2c f4       	brge	.+10     	; 0x37dc <main+0x1010>
		__ticks = 1;
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	9e af       	std	Y+62, r25	; 0x3e
    37d8:	8d af       	std	Y+61, r24	; 0x3d
    37da:	46 c0       	rjmp	.+140    	; 0x3868 <main+0x109c>
	else if (__tmp > 65535)
    37dc:	fe 01       	movw	r30, r28
    37de:	ff 96       	adiw	r30, 0x3f	; 63
    37e0:	60 81       	ld	r22, Z
    37e2:	71 81       	ldd	r23, Z+1	; 0x01
    37e4:	82 81       	ldd	r24, Z+2	; 0x02
    37e6:	93 81       	ldd	r25, Z+3	; 0x03
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	3f ef       	ldi	r19, 0xFF	; 255
    37ec:	4f e7       	ldi	r20, 0x7F	; 127
    37ee:	57 e4       	ldi	r21, 0x47	; 71
    37f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37f4:	18 16       	cp	r1, r24
    37f6:	64 f5       	brge	.+88     	; 0x3850 <main+0x1084>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f8:	fe 01       	movw	r30, r28
    37fa:	ed 5b       	subi	r30, 0xBD	; 189
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	60 81       	ld	r22, Z
    3800:	71 81       	ldd	r23, Z+1	; 0x01
    3802:	82 81       	ldd	r24, Z+2	; 0x02
    3804:	93 81       	ldd	r25, Z+3	; 0x03
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e2       	ldi	r20, 0x20	; 32
    380c:	51 e4       	ldi	r21, 0x41	; 65
    380e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	bc 01       	movw	r22, r24
    3818:	cd 01       	movw	r24, r26
    381a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	9e af       	std	Y+62, r25	; 0x3e
    3824:	8d af       	std	Y+61, r24	; 0x3d
    3826:	0f c0       	rjmp	.+30     	; 0x3846 <main+0x107a>
    3828:	88 ec       	ldi	r24, 0xC8	; 200
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	9c af       	std	Y+60, r25	; 0x3c
    382e:	8b af       	std	Y+59, r24	; 0x3b
    3830:	8b ad       	ldd	r24, Y+59	; 0x3b
    3832:	9c ad       	ldd	r25, Y+60	; 0x3c
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <main+0x1068>
    3838:	9c af       	std	Y+60, r25	; 0x3c
    383a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    383c:	8d ad       	ldd	r24, Y+61	; 0x3d
    383e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	9e af       	std	Y+62, r25	; 0x3e
    3844:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3846:	8d ad       	ldd	r24, Y+61	; 0x3d
    3848:	9e ad       	ldd	r25, Y+62	; 0x3e
    384a:	00 97       	sbiw	r24, 0x00	; 0
    384c:	69 f7       	brne	.-38     	; 0x3828 <main+0x105c>
    384e:	16 c0       	rjmp	.+44     	; 0x387c <main+0x10b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3850:	fe 01       	movw	r30, r28
    3852:	ff 96       	adiw	r30, 0x3f	; 63
    3854:	60 81       	ld	r22, Z
    3856:	71 81       	ldd	r23, Z+1	; 0x01
    3858:	82 81       	ldd	r24, Z+2	; 0x02
    385a:	93 81       	ldd	r25, Z+3	; 0x03
    385c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	9e af       	std	Y+62, r25	; 0x3e
    3866:	8d af       	std	Y+61, r24	; 0x3d
    3868:	8d ad       	ldd	r24, Y+61	; 0x3d
    386a:	9e ad       	ldd	r25, Y+62	; 0x3e
    386c:	9a af       	std	Y+58, r25	; 0x3a
    386e:	89 af       	std	Y+57, r24	; 0x39
    3870:	89 ad       	ldd	r24, Y+57	; 0x39
    3872:	9a ad       	ldd	r25, Y+58	; 0x3a
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	f1 f7       	brne	.-4      	; 0x3874 <main+0x10a8>
    3878:	9a af       	std	Y+58, r25	; 0x3a
    387a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(100);

		}


	if(j==5){
    387c:	fe 01       	movw	r30, r28
    387e:	ef 53       	subi	r30, 0x3F	; 63
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	80 81       	ld	r24, Z
    3884:	85 30       	cpi	r24, 0x05	; 5
    3886:	09 f0       	breq	.+2      	; 0x388a <main+0x10be>
    3888:	45 c2       	rjmp	.+1162   	; 0x3d14 <main+0x1548>

		LCD_clearScreen();
    388a:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
		LCD_displayString("please wait");
    388e:	8c e7       	ldi	r24, 0x7C	; 124
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	aa ef       	ldi	r26, 0xFA	; 250
    389c:	b3 e4       	ldi	r27, 0x43	; 67
    389e:	8d ab       	std	Y+53, r24	; 0x35
    38a0:	9e ab       	std	Y+54, r25	; 0x36
    38a2:	af ab       	std	Y+55, r26	; 0x37
    38a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a6:	6d a9       	ldd	r22, Y+53	; 0x35
    38a8:	7e a9       	ldd	r23, Y+54	; 0x36
    38aa:	8f a9       	ldd	r24, Y+55	; 0x37
    38ac:	98 ad       	ldd	r25, Y+56	; 0x38
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	4a ef       	ldi	r20, 0xFA	; 250
    38b4:	54 e4       	ldi	r21, 0x44	; 68
    38b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	89 ab       	std	Y+49, r24	; 0x31
    38c0:	9a ab       	std	Y+50, r25	; 0x32
    38c2:	ab ab       	std	Y+51, r26	; 0x33
    38c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38c6:	69 a9       	ldd	r22, Y+49	; 0x31
    38c8:	7a a9       	ldd	r23, Y+50	; 0x32
    38ca:	8b a9       	ldd	r24, Y+51	; 0x33
    38cc:	9c a9       	ldd	r25, Y+52	; 0x34
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e8       	ldi	r20, 0x80	; 128
    38d4:	5f e3       	ldi	r21, 0x3F	; 63
    38d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38da:	88 23       	and	r24, r24
    38dc:	2c f4       	brge	.+10     	; 0x38e8 <main+0x111c>
		__ticks = 1;
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	98 ab       	std	Y+48, r25	; 0x30
    38e4:	8f a7       	std	Y+47, r24	; 0x2f
    38e6:	3f c0       	rjmp	.+126    	; 0x3966 <main+0x119a>
	else if (__tmp > 65535)
    38e8:	69 a9       	ldd	r22, Y+49	; 0x31
    38ea:	7a a9       	ldd	r23, Y+50	; 0x32
    38ec:	8b a9       	ldd	r24, Y+51	; 0x33
    38ee:	9c a9       	ldd	r25, Y+52	; 0x34
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	3f ef       	ldi	r19, 0xFF	; 255
    38f4:	4f e7       	ldi	r20, 0x7F	; 127
    38f6:	57 e4       	ldi	r21, 0x47	; 71
    38f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38fc:	18 16       	cp	r1, r24
    38fe:	4c f5       	brge	.+82     	; 0x3952 <main+0x1186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3900:	6d a9       	ldd	r22, Y+53	; 0x35
    3902:	7e a9       	ldd	r23, Y+54	; 0x36
    3904:	8f a9       	ldd	r24, Y+55	; 0x37
    3906:	98 ad       	ldd	r25, Y+56	; 0x38
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	40 e2       	ldi	r20, 0x20	; 32
    390e:	51 e4       	ldi	r21, 0x41	; 65
    3910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	bc 01       	movw	r22, r24
    391a:	cd 01       	movw	r24, r26
    391c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	98 ab       	std	Y+48, r25	; 0x30
    3926:	8f a7       	std	Y+47, r24	; 0x2f
    3928:	0f c0       	rjmp	.+30     	; 0x3948 <main+0x117c>
    392a:	88 ec       	ldi	r24, 0xC8	; 200
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	9e a7       	std	Y+46, r25	; 0x2e
    3930:	8d a7       	std	Y+45, r24	; 0x2d
    3932:	8d a5       	ldd	r24, Y+45	; 0x2d
    3934:	9e a5       	ldd	r25, Y+46	; 0x2e
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	f1 f7       	brne	.-4      	; 0x3936 <main+0x116a>
    393a:	9e a7       	std	Y+46, r25	; 0x2e
    393c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3940:	98 a9       	ldd	r25, Y+48	; 0x30
    3942:	01 97       	sbiw	r24, 0x01	; 1
    3944:	98 ab       	std	Y+48, r25	; 0x30
    3946:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3948:	8f a5       	ldd	r24, Y+47	; 0x2f
    394a:	98 a9       	ldd	r25, Y+48	; 0x30
    394c:	00 97       	sbiw	r24, 0x00	; 0
    394e:	69 f7       	brne	.-38     	; 0x392a <main+0x115e>
    3950:	14 c0       	rjmp	.+40     	; 0x397a <main+0x11ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3952:	69 a9       	ldd	r22, Y+49	; 0x31
    3954:	7a a9       	ldd	r23, Y+50	; 0x32
    3956:	8b a9       	ldd	r24, Y+51	; 0x33
    3958:	9c a9       	ldd	r25, Y+52	; 0x34
    395a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	98 ab       	std	Y+48, r25	; 0x30
    3964:	8f a7       	std	Y+47, r24	; 0x2f
    3966:	8f a5       	ldd	r24, Y+47	; 0x2f
    3968:	98 a9       	ldd	r25, Y+48	; 0x30
    396a:	9c a7       	std	Y+44, r25	; 0x2c
    396c:	8b a7       	std	Y+43, r24	; 0x2b
    396e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3970:	9c a5       	ldd	r25, Y+44	; 0x2c
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <main+0x11a6>
    3976:	9c a7       	std	Y+44, r25	; 0x2c
    3978:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		LCD_clearScreen();
    397a:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>

		if((read[0]==read_1[0])&&(read[1]==read_1[1])&&(read[2]==read_1[2])&&(read[3]==read_1[3])&&(read[4]==read_1[4]))
    397e:	fe 01       	movw	r30, r28
    3980:	ee 53       	subi	r30, 0x3E	; 62
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	90 81       	ld	r25, Z
    3986:	fe 01       	movw	r30, r28
    3988:	e9 53       	subi	r30, 0x39	; 57
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	80 81       	ld	r24, Z
    398e:	98 17       	cp	r25, r24
    3990:	91 f5       	brne	.+100    	; 0x39f6 <main+0x122a>
    3992:	fe 01       	movw	r30, r28
    3994:	ee 53       	subi	r30, 0x3E	; 62
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	91 81       	ldd	r25, Z+1	; 0x01
    399a:	fe 01       	movw	r30, r28
    399c:	e9 53       	subi	r30, 0x39	; 57
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	81 81       	ldd	r24, Z+1	; 0x01
    39a2:	98 17       	cp	r25, r24
    39a4:	41 f5       	brne	.+80     	; 0x39f6 <main+0x122a>
    39a6:	fe 01       	movw	r30, r28
    39a8:	ee 53       	subi	r30, 0x3E	; 62
    39aa:	ff 4f       	sbci	r31, 0xFF	; 255
    39ac:	92 81       	ldd	r25, Z+2	; 0x02
    39ae:	fe 01       	movw	r30, r28
    39b0:	e9 53       	subi	r30, 0x39	; 57
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	82 81       	ldd	r24, Z+2	; 0x02
    39b6:	98 17       	cp	r25, r24
    39b8:	f1 f4       	brne	.+60     	; 0x39f6 <main+0x122a>
    39ba:	fe 01       	movw	r30, r28
    39bc:	ee 53       	subi	r30, 0x3E	; 62
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	93 81       	ldd	r25, Z+3	; 0x03
    39c2:	fe 01       	movw	r30, r28
    39c4:	e9 53       	subi	r30, 0x39	; 57
    39c6:	ff 4f       	sbci	r31, 0xFF	; 255
    39c8:	83 81       	ldd	r24, Z+3	; 0x03
    39ca:	98 17       	cp	r25, r24
    39cc:	a1 f4       	brne	.+40     	; 0x39f6 <main+0x122a>
    39ce:	fe 01       	movw	r30, r28
    39d0:	ee 53       	subi	r30, 0x3E	; 62
    39d2:	ff 4f       	sbci	r31, 0xFF	; 255
    39d4:	94 81       	ldd	r25, Z+4	; 0x04
    39d6:	fe 01       	movw	r30, r28
    39d8:	e9 53       	subi	r30, 0x39	; 57
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	84 81       	ldd	r24, Z+4	; 0x04
    39de:	98 17       	cp	r25, r24
    39e0:	51 f4       	brne	.+20     	; 0x39f6 <main+0x122a>
		{

			LCD_clearScreen();
    39e2:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			o_1=1;
    39e6:	fe 01       	movw	r30, r28
    39e8:	e8 54       	subi	r30, 0x48	; 72
    39ea:	ff 4f       	sbci	r31, 0xFF	; 255
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	80 83       	st	Z, r24

			show_all_options();
    39f0:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <show_all_options>
    39f4:	8f c1       	rjmp	.+798    	; 0x3d14 <main+0x1548>

		}

		else
		{
			LCD_displayString("wrong password");
    39f6:	8b e9       	ldi	r24, 0x9B	; 155
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    39fe:	80 e0       	ldi	r24, 0x00	; 0
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	a6 e9       	ldi	r26, 0x96	; 150
    3a04:	b3 e4       	ldi	r27, 0x43	; 67
    3a06:	8f a3       	std	Y+39, r24	; 0x27
    3a08:	98 a7       	std	Y+40, r25	; 0x28
    3a0a:	a9 a7       	std	Y+41, r26	; 0x29
    3a0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a0e:	6f a1       	ldd	r22, Y+39	; 0x27
    3a10:	78 a5       	ldd	r23, Y+40	; 0x28
    3a12:	89 a5       	ldd	r24, Y+41	; 0x29
    3a14:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	4a ef       	ldi	r20, 0xFA	; 250
    3a1c:	54 e4       	ldi	r21, 0x44	; 68
    3a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a22:	dc 01       	movw	r26, r24
    3a24:	cb 01       	movw	r24, r22
    3a26:	8b a3       	std	Y+35, r24	; 0x23
    3a28:	9c a3       	std	Y+36, r25	; 0x24
    3a2a:	ad a3       	std	Y+37, r26	; 0x25
    3a2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a2e:	6b a1       	ldd	r22, Y+35	; 0x23
    3a30:	7c a1       	ldd	r23, Y+36	; 0x24
    3a32:	8d a1       	ldd	r24, Y+37	; 0x25
    3a34:	9e a1       	ldd	r25, Y+38	; 0x26
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e8       	ldi	r20, 0x80	; 128
    3a3c:	5f e3       	ldi	r21, 0x3F	; 63
    3a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a42:	88 23       	and	r24, r24
    3a44:	2c f4       	brge	.+10     	; 0x3a50 <main+0x1284>
		__ticks = 1;
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	9a a3       	std	Y+34, r25	; 0x22
    3a4c:	89 a3       	std	Y+33, r24	; 0x21
    3a4e:	3f c0       	rjmp	.+126    	; 0x3ace <main+0x1302>
	else if (__tmp > 65535)
    3a50:	6b a1       	ldd	r22, Y+35	; 0x23
    3a52:	7c a1       	ldd	r23, Y+36	; 0x24
    3a54:	8d a1       	ldd	r24, Y+37	; 0x25
    3a56:	9e a1       	ldd	r25, Y+38	; 0x26
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	3f ef       	ldi	r19, 0xFF	; 255
    3a5c:	4f e7       	ldi	r20, 0x7F	; 127
    3a5e:	57 e4       	ldi	r21, 0x47	; 71
    3a60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a64:	18 16       	cp	r1, r24
    3a66:	4c f5       	brge	.+82     	; 0x3aba <main+0x12ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a68:	6f a1       	ldd	r22, Y+39	; 0x27
    3a6a:	78 a5       	ldd	r23, Y+40	; 0x28
    3a6c:	89 a5       	ldd	r24, Y+41	; 0x29
    3a6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	40 e2       	ldi	r20, 0x20	; 32
    3a76:	51 e4       	ldi	r21, 0x41	; 65
    3a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	bc 01       	movw	r22, r24
    3a82:	cd 01       	movw	r24, r26
    3a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	9a a3       	std	Y+34, r25	; 0x22
    3a8e:	89 a3       	std	Y+33, r24	; 0x21
    3a90:	0f c0       	rjmp	.+30     	; 0x3ab0 <main+0x12e4>
    3a92:	88 ec       	ldi	r24, 0xC8	; 200
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	98 a3       	std	Y+32, r25	; 0x20
    3a98:	8f 8f       	std	Y+31, r24	; 0x1f
    3a9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a9c:	98 a1       	ldd	r25, Y+32	; 0x20
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	f1 f7       	brne	.-4      	; 0x3a9e <main+0x12d2>
    3aa2:	98 a3       	std	Y+32, r25	; 0x20
    3aa4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa6:	89 a1       	ldd	r24, Y+33	; 0x21
    3aa8:	9a a1       	ldd	r25, Y+34	; 0x22
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	9a a3       	std	Y+34, r25	; 0x22
    3aae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ab4:	00 97       	sbiw	r24, 0x00	; 0
    3ab6:	69 f7       	brne	.-38     	; 0x3a92 <main+0x12c6>
    3ab8:	14 c0       	rjmp	.+40     	; 0x3ae2 <main+0x1316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aba:	6b a1       	ldd	r22, Y+35	; 0x23
    3abc:	7c a1       	ldd	r23, Y+36	; 0x24
    3abe:	8d a1       	ldd	r24, Y+37	; 0x25
    3ac0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	9a a3       	std	Y+34, r25	; 0x22
    3acc:	89 a3       	std	Y+33, r24	; 0x21
    3ace:	89 a1       	ldd	r24, Y+33	; 0x21
    3ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad2:	9e 8f       	std	Y+30, r25	; 0x1e
    3ad4:	8d 8f       	std	Y+29, r24	; 0x1d
    3ad6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ad8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ada:	01 97       	sbiw	r24, 0x01	; 1
    3adc:	f1 f7       	brne	.-4      	; 0x3ada <main+0x130e>
    3ade:	9e 8f       	std	Y+30, r25	; 0x1e
    3ae0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(LCD_DELAY);
			LCD_clearScreen();o_1=0;j=0;
    3ae2:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	e8 54       	subi	r30, 0x48	; 72
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	10 82       	st	Z, r1
    3aee:	fe 01       	movw	r30, r28
    3af0:	ef 53       	subi	r30, 0x3F	; 63
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	10 82       	st	Z, r1
			wrong++;
    3af6:	de 01       	movw	r26, r28
    3af8:	a9 54       	subi	r26, 0x49	; 73
    3afa:	bf 4f       	sbci	r27, 0xFF	; 255
    3afc:	fe 01       	movw	r30, r28
    3afe:	e9 54       	subi	r30, 0x49	; 73
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	8f 5f       	subi	r24, 0xFF	; 255
    3b06:	8c 93       	st	X, r24
			if(wrong==3)
    3b08:	fe 01       	movw	r30, r28
    3b0a:	e9 54       	subi	r30, 0x49	; 73
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	80 81       	ld	r24, Z
    3b10:	83 30       	cpi	r24, 0x03	; 3
    3b12:	09 f0       	breq	.+2      	; 0x3b16 <main+0x134a>
    3b14:	7f c0       	rjmp	.+254    	; 0x3c14 <main+0x1448>
			{
			SPI_send_char(WRONG_FOR_3TIMES);
    3b16:	8c e0       	ldi	r24, 0x0C	; 12
    3b18:	0e 94 fe 12 	call	0x25fc	; 0x25fc <SPI_send_char>
			LCD_displayString("wait 6 sec");
    3b1c:	8a ea       	ldi	r24, 0xAA	; 170
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	90 e8       	ldi	r25, 0x80	; 128
    3b28:	ab eb       	ldi	r26, 0xBB	; 187
    3b2a:	b5 e4       	ldi	r27, 0x45	; 69
    3b2c:	89 8f       	std	Y+25, r24	; 0x19
    3b2e:	9a 8f       	std	Y+26, r25	; 0x1a
    3b30:	ab 8f       	std	Y+27, r26	; 0x1b
    3b32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b34:	69 8d       	ldd	r22, Y+25	; 0x19
    3b36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	4a ef       	ldi	r20, 0xFA	; 250
    3b42:	54 e4       	ldi	r21, 0x44	; 68
    3b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	8d 8b       	std	Y+21, r24	; 0x15
    3b4e:	9e 8b       	std	Y+22, r25	; 0x16
    3b50:	af 8b       	std	Y+23, r26	; 0x17
    3b52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b54:	6d 89       	ldd	r22, Y+21	; 0x15
    3b56:	7e 89       	ldd	r23, Y+22	; 0x16
    3b58:	8f 89       	ldd	r24, Y+23	; 0x17
    3b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e8       	ldi	r20, 0x80	; 128
    3b62:	5f e3       	ldi	r21, 0x3F	; 63
    3b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b68:	88 23       	and	r24, r24
    3b6a:	2c f4       	brge	.+10     	; 0x3b76 <main+0x13aa>
		__ticks = 1;
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	9c 8b       	std	Y+20, r25	; 0x14
    3b72:	8b 8b       	std	Y+19, r24	; 0x13
    3b74:	3f c0       	rjmp	.+126    	; 0x3bf4 <main+0x1428>
	else if (__tmp > 65535)
    3b76:	6d 89       	ldd	r22, Y+21	; 0x15
    3b78:	7e 89       	ldd	r23, Y+22	; 0x16
    3b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	3f ef       	ldi	r19, 0xFF	; 255
    3b82:	4f e7       	ldi	r20, 0x7F	; 127
    3b84:	57 e4       	ldi	r21, 0x47	; 71
    3b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b8a:	18 16       	cp	r1, r24
    3b8c:	4c f5       	brge	.+82     	; 0x3be0 <main+0x1414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b8e:	69 8d       	ldd	r22, Y+25	; 0x19
    3b90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	40 e2       	ldi	r20, 0x20	; 32
    3b9c:	51 e4       	ldi	r21, 0x41	; 65
    3b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	bc 01       	movw	r22, r24
    3ba8:	cd 01       	movw	r24, r26
    3baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	9c 8b       	std	Y+20, r25	; 0x14
    3bb4:	8b 8b       	std	Y+19, r24	; 0x13
    3bb6:	0f c0       	rjmp	.+30     	; 0x3bd6 <main+0x140a>
    3bb8:	88 ec       	ldi	r24, 0xC8	; 200
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	9a 8b       	std	Y+18, r25	; 0x12
    3bbe:	89 8b       	std	Y+17, r24	; 0x11
    3bc0:	89 89       	ldd	r24, Y+17	; 0x11
    3bc2:	9a 89       	ldd	r25, Y+18	; 0x12
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	f1 f7       	brne	.-4      	; 0x3bc4 <main+0x13f8>
    3bc8:	9a 8b       	std	Y+18, r25	; 0x12
    3bca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    3bce:	9c 89       	ldd	r25, Y+20	; 0x14
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	9c 8b       	std	Y+20, r25	; 0x14
    3bd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    3bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	69 f7       	brne	.-38     	; 0x3bb8 <main+0x13ec>
    3bde:	14 c0       	rjmp	.+40     	; 0x3c08 <main+0x143c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be0:	6d 89       	ldd	r22, Y+21	; 0x15
    3be2:	7e 89       	ldd	r23, Y+22	; 0x16
    3be4:	8f 89       	ldd	r24, Y+23	; 0x17
    3be6:	98 8d       	ldd	r25, Y+24	; 0x18
    3be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	9c 8b       	std	Y+20, r25	; 0x14
    3bf2:	8b 8b       	std	Y+19, r24	; 0x13
    3bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    3bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    3bf8:	98 8b       	std	Y+16, r25	; 0x10
    3bfa:	8f 87       	std	Y+15, r24	; 0x0f
    3bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bfe:	98 89       	ldd	r25, Y+16	; 0x10
    3c00:	01 97       	sbiw	r24, 0x01	; 1
    3c02:	f1 f7       	brne	.-4      	; 0x3c00 <main+0x1434>
    3c04:	98 8b       	std	Y+16, r25	; 0x10
    3c06:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(6000);
			LCD_clearScreen();
    3c08:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			wrong=0;}
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	e9 54       	subi	r30, 0x49	; 73
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	10 82       	st	Z, r1
			LCD_displayString("  enter your ");
    3c14:	85 eb       	ldi	r24, 0xB5	; 181
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
			LCD_goToRowColumn(1,2);
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	62 e0       	ldi	r22, 0x02	; 2
    3c20:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
			LCD_displayString(" password");
    3c24:	82 e7       	ldi	r24, 0x72	; 114
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	aa e7       	ldi	r26, 0x7A	; 122
    3c32:	b4 e4       	ldi	r27, 0x44	; 68
    3c34:	8b 87       	std	Y+11, r24	; 0x0b
    3c36:	9c 87       	std	Y+12, r25	; 0x0c
    3c38:	ad 87       	std	Y+13, r26	; 0x0d
    3c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	4a ef       	ldi	r20, 0xFA	; 250
    3c4a:	54 e4       	ldi	r21, 0x44	; 68
    3c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	8f 83       	std	Y+7, r24	; 0x07
    3c56:	98 87       	std	Y+8, r25	; 0x08
    3c58:	a9 87       	std	Y+9, r26	; 0x09
    3c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c5e:	78 85       	ldd	r23, Y+8	; 0x08
    3c60:	89 85       	ldd	r24, Y+9	; 0x09
    3c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e8       	ldi	r20, 0x80	; 128
    3c6a:	5f e3       	ldi	r21, 0x3F	; 63
    3c6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c70:	88 23       	and	r24, r24
    3c72:	2c f4       	brge	.+10     	; 0x3c7e <main+0x14b2>
		__ticks = 1;
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	9e 83       	std	Y+6, r25	; 0x06
    3c7a:	8d 83       	std	Y+5, r24	; 0x05
    3c7c:	3f c0       	rjmp	.+126    	; 0x3cfc <main+0x1530>
	else if (__tmp > 65535)
    3c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c80:	78 85       	ldd	r23, Y+8	; 0x08
    3c82:	89 85       	ldd	r24, Y+9	; 0x09
    3c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	3f ef       	ldi	r19, 0xFF	; 255
    3c8a:	4f e7       	ldi	r20, 0x7F	; 127
    3c8c:	57 e4       	ldi	r21, 0x47	; 71
    3c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c92:	18 16       	cp	r1, r24
    3c94:	4c f5       	brge	.+82     	; 0x3ce8 <main+0x151c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e2       	ldi	r20, 0x20	; 32
    3ca4:	51 e4       	ldi	r21, 0x41	; 65
    3ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	bc 01       	movw	r22, r24
    3cb0:	cd 01       	movw	r24, r26
    3cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	9e 83       	std	Y+6, r25	; 0x06
    3cbc:	8d 83       	std	Y+5, r24	; 0x05
    3cbe:	0f c0       	rjmp	.+30     	; 0x3cde <main+0x1512>
    3cc0:	88 ec       	ldi	r24, 0xC8	; 200
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	9c 83       	std	Y+4, r25	; 0x04
    3cc6:	8b 83       	std	Y+3, r24	; 0x03
    3cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cca:	9c 81       	ldd	r25, Y+4	; 0x04
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <main+0x1500>
    3cd0:	9c 83       	std	Y+4, r25	; 0x04
    3cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	9e 83       	std	Y+6, r25	; 0x06
    3cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cde:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	69 f7       	brne	.-38     	; 0x3cc0 <main+0x14f4>
    3ce6:	14 c0       	rjmp	.+40     	; 0x3d10 <main+0x1544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cea:	78 85       	ldd	r23, Y+8	; 0x08
    3cec:	89 85       	ldd	r24, Y+9	; 0x09
    3cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	9e 83       	std	Y+6, r25	; 0x06
    3cfa:	8d 83       	std	Y+5, r24	; 0x05
    3cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    3d00:	9a 83       	std	Y+2, r25	; 0x02
    3d02:	89 83       	std	Y+1, r24	; 0x01
    3d04:	89 81       	ldd	r24, Y+1	; 0x01
    3d06:	9a 81       	ldd	r25, Y+2	; 0x02
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <main+0x153c>
    3d0c:	9a 83       	std	Y+2, r25	; 0x02
    3d0e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_clearScreen();
    3d10:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
		o_1=0;
	}

	//******************************writing the  password to enter home******************************************//

	while ((o_1!=1)){
    3d14:	fe 01       	movw	r30, r28
    3d16:	e8 54       	subi	r30, 0x48	; 72
    3d18:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1a:	80 81       	ld	r24, Z
    3d1c:	81 30       	cpi	r24, 0x01	; 1
    3d1e:	09 f0       	breq	.+2      	; 0x3d22 <main+0x1556>
    3d20:	39 cb       	rjmp	.-2446   	; 0x3394 <main+0xbc8>
		}


	}

}
    3d22:	c4 53       	subi	r28, 0x34	; 52
    3d24:	df 4f       	sbci	r29, 0xFF	; 255
    3d26:	0f b6       	in	r0, 0x3f	; 63
    3d28:	f8 94       	cli
    3d2a:	de bf       	out	0x3e, r29	; 62
    3d2c:	0f be       	out	0x3f, r0	; 63
    3d2e:	cd bf       	out	0x3d, r28	; 61
    3d30:	cf 91       	pop	r28
    3d32:	df 91       	pop	r29
    3d34:	1f 91       	pop	r17
    3d36:	0f 91       	pop	r16
    3d38:	08 95       	ret

00003d3a <show_all_options>:



void show_all_options(){
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	2e 97       	sbiw	r28, 0x0e	; 14
    3d44:	0f b6       	in	r0, 0x3f	; 63
    3d46:	f8 94       	cli
    3d48:	de bf       	out	0x3e, r29	; 62
    3d4a:	0f be       	out	0x3f, r0	; 63
    3d4c:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		LCD_clearScreen();
    3d4e:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
		LCD_displayString("Door     1");
    3d52:	83 ec       	ldi	r24, 0xC3	; 195
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	60 e0       	ldi	r22, 0x00	; 0
    3d5e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
		LCD_displayString("settings 2");
    3d62:	8e ec       	ldi	r24, 0xCE	; 206
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
		if(KeyPad_getPressedKey()==1)
    3d6a:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    3d6e:	81 30       	cpi	r24, 0x01	; 1
    3d70:	19 f4       	brne	.+6      	; 0x3d78 <show_all_options+0x3e>
		{
			Door();
    3d72:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <Door>
    3d76:	eb cf       	rjmp	.-42     	; 0x3d4e <show_all_options+0x14>
		}

		else if(KeyPad_getPressedKey()==2)
    3d78:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    3d7c:	82 30       	cpi	r24, 0x02	; 2
    3d7e:	19 f4       	brne	.+6      	; 0x3d86 <show_all_options+0x4c>
		{
			settings();
    3d80:	0e 94 ed 20 	call	0x41da	; 0x41da <settings>
    3d84:	e4 cf       	rjmp	.-56     	; 0x3d4e <show_all_options+0x14>
		}
		else
		{LCD_clearScreen();
    3d86:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			LCD_displayString("wrong no");
    3d8a:	89 ed       	ldi	r24, 0xD9	; 217
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    3d92:	80 e0       	ldi	r24, 0x00	; 0
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	a6 e9       	ldi	r26, 0x96	; 150
    3d98:	b3 e4       	ldi	r27, 0x43	; 67
    3d9a:	8b 87       	std	Y+11, r24	; 0x0b
    3d9c:	9c 87       	std	Y+12, r25	; 0x0c
    3d9e:	ad 87       	std	Y+13, r26	; 0x0d
    3da0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	4a ef       	ldi	r20, 0xFA	; 250
    3db0:	54 e4       	ldi	r21, 0x44	; 68
    3db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db6:	dc 01       	movw	r26, r24
    3db8:	cb 01       	movw	r24, r22
    3dba:	8f 83       	std	Y+7, r24	; 0x07
    3dbc:	98 87       	std	Y+8, r25	; 0x08
    3dbe:	a9 87       	std	Y+9, r26	; 0x09
    3dc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc4:	78 85       	ldd	r23, Y+8	; 0x08
    3dc6:	89 85       	ldd	r24, Y+9	; 0x09
    3dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dca:	20 e0       	ldi	r18, 0x00	; 0
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	40 e8       	ldi	r20, 0x80	; 128
    3dd0:	5f e3       	ldi	r21, 0x3F	; 63
    3dd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dd6:	88 23       	and	r24, r24
    3dd8:	2c f4       	brge	.+10     	; 0x3de4 <show_all_options+0xaa>
		__ticks = 1;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	9e 83       	std	Y+6, r25	; 0x06
    3de0:	8d 83       	std	Y+5, r24	; 0x05
    3de2:	3f c0       	rjmp	.+126    	; 0x3e62 <show_all_options+0x128>
	else if (__tmp > 65535)
    3de4:	6f 81       	ldd	r22, Y+7	; 0x07
    3de6:	78 85       	ldd	r23, Y+8	; 0x08
    3de8:	89 85       	ldd	r24, Y+9	; 0x09
    3dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	3f ef       	ldi	r19, 0xFF	; 255
    3df0:	4f e7       	ldi	r20, 0x7F	; 127
    3df2:	57 e4       	ldi	r21, 0x47	; 71
    3df4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3df8:	18 16       	cp	r1, r24
    3dfa:	4c f5       	brge	.+82     	; 0x3e4e <show_all_options+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	40 e2       	ldi	r20, 0x20	; 32
    3e0a:	51 e4       	ldi	r21, 0x41	; 65
    3e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e10:	dc 01       	movw	r26, r24
    3e12:	cb 01       	movw	r24, r22
    3e14:	bc 01       	movw	r22, r24
    3e16:	cd 01       	movw	r24, r26
    3e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	9e 83       	std	Y+6, r25	; 0x06
    3e22:	8d 83       	std	Y+5, r24	; 0x05
    3e24:	0f c0       	rjmp	.+30     	; 0x3e44 <show_all_options+0x10a>
    3e26:	88 ec       	ldi	r24, 0xC8	; 200
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	9c 83       	std	Y+4, r25	; 0x04
    3e2c:	8b 83       	std	Y+3, r24	; 0x03
    3e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e30:	9c 81       	ldd	r25, Y+4	; 0x04
    3e32:	01 97       	sbiw	r24, 0x01	; 1
    3e34:	f1 f7       	brne	.-4      	; 0x3e32 <show_all_options+0xf8>
    3e36:	9c 83       	std	Y+4, r25	; 0x04
    3e38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	9e 83       	std	Y+6, r25	; 0x06
    3e42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e44:	8d 81       	ldd	r24, Y+5	; 0x05
    3e46:	9e 81       	ldd	r25, Y+6	; 0x06
    3e48:	00 97       	sbiw	r24, 0x00	; 0
    3e4a:	69 f7       	brne	.-38     	; 0x3e26 <show_all_options+0xec>
    3e4c:	80 cf       	rjmp	.-256    	; 0x3d4e <show_all_options+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e50:	78 85       	ldd	r23, Y+8	; 0x08
    3e52:	89 85       	ldd	r24, Y+9	; 0x09
    3e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	cb 01       	movw	r24, r22
    3e5e:	9e 83       	std	Y+6, r25	; 0x06
    3e60:	8d 83       	std	Y+5, r24	; 0x05
    3e62:	8d 81       	ldd	r24, Y+5	; 0x05
    3e64:	9e 81       	ldd	r25, Y+6	; 0x06
    3e66:	9a 83       	std	Y+2, r25	; 0x02
    3e68:	89 83       	std	Y+1, r24	; 0x01
    3e6a:	89 81       	ldd	r24, Y+1	; 0x01
    3e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6e:	01 97       	sbiw	r24, 0x01	; 1
    3e70:	f1 f7       	brne	.-4      	; 0x3e6e <show_all_options+0x134>
    3e72:	9a 83       	std	Y+2, r25	; 0x02
    3e74:	89 83       	std	Y+1, r24	; 0x01
    3e76:	6b cf       	rjmp	.-298    	; 0x3d4e <show_all_options+0x14>

00003e78 <Door>:
		}

	}
}

void Door(){
    3e78:	df 93       	push	r29
    3e7a:	cf 93       	push	r28
    3e7c:	cd b7       	in	r28, 0x3d	; 61
    3e7e:	de b7       	in	r29, 0x3e	; 62
    3e80:	ac 97       	sbiw	r28, 0x2c	; 44
    3e82:	0f b6       	in	r0, 0x3f	; 63
    3e84:	f8 94       	cli
    3e86:	de bf       	out	0x3e, r29	; 62
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		LCD_clearScreen();
    3e8c:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
		LCD_displayString("open door?");
    3e90:	82 ee       	ldi	r24, 0xE2	; 226
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	60 e0       	ldi	r22, 0x00	; 0
    3e9c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
		LCD_displayString("   yes1   no2");
    3ea0:	8d ee       	ldi	r24, 0xED	; 237
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>

		if(KeyPad_getPressedKey()==1)
    3ea8:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    3eac:	81 30       	cpi	r24, 0x01	; 1
    3eae:	09 f0       	breq	.+2      	; 0x3eb2 <Door+0x3a>
    3eb0:	0d c1       	rjmp	.+538    	; 0x40cc <Door+0x254>
		{
			SPI_send_char(RIGHT_PASSWARD);       //open door
    3eb2:	8b e0       	ldi	r24, 0x0B	; 11
    3eb4:	0e 94 fe 12 	call	0x25fc	; 0x25fc <SPI_send_char>
			LCD_clearScreen();
    3eb8:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			LCD_displayString(" the door is ");
    3ebc:	8b ef       	ldi	r24, 0xFB	; 251
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
			LCD_goToRowColumn(1,2);
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	62 e0       	ldi	r22, 0x02	; 2
    3ec8:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
			LCD_displayString(" opening ");
    3ecc:	89 e0       	ldi	r24, 0x09	; 9
    3ece:	91 e0       	ldi	r25, 0x01	; 1
    3ed0:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	a6 e9       	ldi	r26, 0x96	; 150
    3eda:	b3 e4       	ldi	r27, 0x43	; 67
    3edc:	8f a3       	std	Y+39, r24	; 0x27
    3ede:	98 a7       	std	Y+40, r25	; 0x28
    3ee0:	a9 a7       	std	Y+41, r26	; 0x29
    3ee2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee4:	6f a1       	ldd	r22, Y+39	; 0x27
    3ee6:	78 a5       	ldd	r23, Y+40	; 0x28
    3ee8:	89 a5       	ldd	r24, Y+41	; 0x29
    3eea:	9a a5       	ldd	r25, Y+42	; 0x2a
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	4a ef       	ldi	r20, 0xFA	; 250
    3ef2:	54 e4       	ldi	r21, 0x44	; 68
    3ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	8b a3       	std	Y+35, r24	; 0x23
    3efe:	9c a3       	std	Y+36, r25	; 0x24
    3f00:	ad a3       	std	Y+37, r26	; 0x25
    3f02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f04:	6b a1       	ldd	r22, Y+35	; 0x23
    3f06:	7c a1       	ldd	r23, Y+36	; 0x24
    3f08:	8d a1       	ldd	r24, Y+37	; 0x25
    3f0a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	40 e8       	ldi	r20, 0x80	; 128
    3f12:	5f e3       	ldi	r21, 0x3F	; 63
    3f14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f18:	88 23       	and	r24, r24
    3f1a:	2c f4       	brge	.+10     	; 0x3f26 <Door+0xae>
		__ticks = 1;
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	9a a3       	std	Y+34, r25	; 0x22
    3f22:	89 a3       	std	Y+33, r24	; 0x21
    3f24:	3f c0       	rjmp	.+126    	; 0x3fa4 <Door+0x12c>
	else if (__tmp > 65535)
    3f26:	6b a1       	ldd	r22, Y+35	; 0x23
    3f28:	7c a1       	ldd	r23, Y+36	; 0x24
    3f2a:	8d a1       	ldd	r24, Y+37	; 0x25
    3f2c:	9e a1       	ldd	r25, Y+38	; 0x26
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	3f ef       	ldi	r19, 0xFF	; 255
    3f32:	4f e7       	ldi	r20, 0x7F	; 127
    3f34:	57 e4       	ldi	r21, 0x47	; 71
    3f36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f3a:	18 16       	cp	r1, r24
    3f3c:	4c f5       	brge	.+82     	; 0x3f90 <Door+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f3e:	6f a1       	ldd	r22, Y+39	; 0x27
    3f40:	78 a5       	ldd	r23, Y+40	; 0x28
    3f42:	89 a5       	ldd	r24, Y+41	; 0x29
    3f44:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e2       	ldi	r20, 0x20	; 32
    3f4c:	51 e4       	ldi	r21, 0x41	; 65
    3f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	bc 01       	movw	r22, r24
    3f58:	cd 01       	movw	r24, r26
    3f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	9a a3       	std	Y+34, r25	; 0x22
    3f64:	89 a3       	std	Y+33, r24	; 0x21
    3f66:	0f c0       	rjmp	.+30     	; 0x3f86 <Door+0x10e>
    3f68:	88 ec       	ldi	r24, 0xC8	; 200
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	98 a3       	std	Y+32, r25	; 0x20
    3f6e:	8f 8f       	std	Y+31, r24	; 0x1f
    3f70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f72:	98 a1       	ldd	r25, Y+32	; 0x20
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	f1 f7       	brne	.-4      	; 0x3f74 <Door+0xfc>
    3f78:	98 a3       	std	Y+32, r25	; 0x20
    3f7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7c:	89 a1       	ldd	r24, Y+33	; 0x21
    3f7e:	9a a1       	ldd	r25, Y+34	; 0x22
    3f80:	01 97       	sbiw	r24, 0x01	; 1
    3f82:	9a a3       	std	Y+34, r25	; 0x22
    3f84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f86:	89 a1       	ldd	r24, Y+33	; 0x21
    3f88:	9a a1       	ldd	r25, Y+34	; 0x22
    3f8a:	00 97       	sbiw	r24, 0x00	; 0
    3f8c:	69 f7       	brne	.-38     	; 0x3f68 <Door+0xf0>
    3f8e:	14 c0       	rjmp	.+40     	; 0x3fb8 <Door+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f90:	6b a1       	ldd	r22, Y+35	; 0x23
    3f92:	7c a1       	ldd	r23, Y+36	; 0x24
    3f94:	8d a1       	ldd	r24, Y+37	; 0x25
    3f96:	9e a1       	ldd	r25, Y+38	; 0x26
    3f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	9a a3       	std	Y+34, r25	; 0x22
    3fa2:	89 a3       	std	Y+33, r24	; 0x21
    3fa4:	89 a1       	ldd	r24, Y+33	; 0x21
    3fa6:	9a a1       	ldd	r25, Y+34	; 0x22
    3fa8:	9e 8f       	std	Y+30, r25	; 0x1e
    3faa:	8d 8f       	std	Y+29, r24	; 0x1d
    3fac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	f1 f7       	brne	.-4      	; 0x3fb0 <Door+0x138>
    3fb4:	9e 8f       	std	Y+30, r25	; 0x1e
    3fb6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(LCD_DELAY);
			LCD_clearScreen();
    3fb8:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			LCD_displayString(" Welcome! ");
    3fbc:	83 e1       	ldi	r24, 0x13	; 19
    3fbe:	91 e0       	ldi	r25, 0x01	; 1
    3fc0:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
			for(uint16 i =0 ; i<2*
    3fc4:	1c a6       	std	Y+44, r1	; 0x2c
    3fc6:	1b a6       	std	Y+43, r1	; 0x2b
    3fc8:	79 c0       	rjmp	.+242    	; 0x40bc <Door+0x244>
			DOOR_DELAY;i++)        //send until door closes and a while after it
			{
				ultrasonic_trigger();
    3fca:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <ultrasonic_trigger>
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	a0 e8       	ldi	r26, 0x80	; 128
    3fd4:	bf e3       	ldi	r27, 0x3F	; 63
    3fd6:	89 8f       	std	Y+25, r24	; 0x19
    3fd8:	9a 8f       	std	Y+26, r25	; 0x1a
    3fda:	ab 8f       	std	Y+27, r26	; 0x1b
    3fdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fde:	69 8d       	ldd	r22, Y+25	; 0x19
    3fe0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fe2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fe4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fe6:	20 e0       	ldi	r18, 0x00	; 0
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	4a ef       	ldi	r20, 0xFA	; 250
    3fec:	54 e4       	ldi	r21, 0x44	; 68
    3fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	8d 8b       	std	Y+21, r24	; 0x15
    3ff8:	9e 8b       	std	Y+22, r25	; 0x16
    3ffa:	af 8b       	std	Y+23, r26	; 0x17
    3ffc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    4000:	7e 89       	ldd	r23, Y+22	; 0x16
    4002:	8f 89       	ldd	r24, Y+23	; 0x17
    4004:	98 8d       	ldd	r25, Y+24	; 0x18
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	40 e8       	ldi	r20, 0x80	; 128
    400c:	5f e3       	ldi	r21, 0x3F	; 63
    400e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4012:	88 23       	and	r24, r24
    4014:	2c f4       	brge	.+10     	; 0x4020 <Door+0x1a8>
		__ticks = 1;
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	9c 8b       	std	Y+20, r25	; 0x14
    401c:	8b 8b       	std	Y+19, r24	; 0x13
    401e:	3f c0       	rjmp	.+126    	; 0x409e <Door+0x226>
	else if (__tmp > 65535)
    4020:	6d 89       	ldd	r22, Y+21	; 0x15
    4022:	7e 89       	ldd	r23, Y+22	; 0x16
    4024:	8f 89       	ldd	r24, Y+23	; 0x17
    4026:	98 8d       	ldd	r25, Y+24	; 0x18
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	3f ef       	ldi	r19, 0xFF	; 255
    402c:	4f e7       	ldi	r20, 0x7F	; 127
    402e:	57 e4       	ldi	r21, 0x47	; 71
    4030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4034:	18 16       	cp	r1, r24
    4036:	4c f5       	brge	.+82     	; 0x408a <Door+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4038:	69 8d       	ldd	r22, Y+25	; 0x19
    403a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    403c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    403e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	40 e2       	ldi	r20, 0x20	; 32
    4046:	51 e4       	ldi	r21, 0x41	; 65
    4048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404c:	dc 01       	movw	r26, r24
    404e:	cb 01       	movw	r24, r22
    4050:	bc 01       	movw	r22, r24
    4052:	cd 01       	movw	r24, r26
    4054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4058:	dc 01       	movw	r26, r24
    405a:	cb 01       	movw	r24, r22
    405c:	9c 8b       	std	Y+20, r25	; 0x14
    405e:	8b 8b       	std	Y+19, r24	; 0x13
    4060:	0f c0       	rjmp	.+30     	; 0x4080 <Door+0x208>
    4062:	88 ec       	ldi	r24, 0xC8	; 200
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	9a 8b       	std	Y+18, r25	; 0x12
    4068:	89 8b       	std	Y+17, r24	; 0x11
    406a:	89 89       	ldd	r24, Y+17	; 0x11
    406c:	9a 89       	ldd	r25, Y+18	; 0x12
    406e:	01 97       	sbiw	r24, 0x01	; 1
    4070:	f1 f7       	brne	.-4      	; 0x406e <Door+0x1f6>
    4072:	9a 8b       	std	Y+18, r25	; 0x12
    4074:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4076:	8b 89       	ldd	r24, Y+19	; 0x13
    4078:	9c 89       	ldd	r25, Y+20	; 0x14
    407a:	01 97       	sbiw	r24, 0x01	; 1
    407c:	9c 8b       	std	Y+20, r25	; 0x14
    407e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4080:	8b 89       	ldd	r24, Y+19	; 0x13
    4082:	9c 89       	ldd	r25, Y+20	; 0x14
    4084:	00 97       	sbiw	r24, 0x00	; 0
    4086:	69 f7       	brne	.-38     	; 0x4062 <Door+0x1ea>
    4088:	14 c0       	rjmp	.+40     	; 0x40b2 <Door+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    408a:	6d 89       	ldd	r22, Y+21	; 0x15
    408c:	7e 89       	ldd	r23, Y+22	; 0x16
    408e:	8f 89       	ldd	r24, Y+23	; 0x17
    4090:	98 8d       	ldd	r25, Y+24	; 0x18
    4092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	9c 8b       	std	Y+20, r25	; 0x14
    409c:	8b 8b       	std	Y+19, r24	; 0x13
    409e:	8b 89       	ldd	r24, Y+19	; 0x13
    40a0:	9c 89       	ldd	r25, Y+20	; 0x14
    40a2:	98 8b       	std	Y+16, r25	; 0x10
    40a4:	8f 87       	std	Y+15, r24	; 0x0f
    40a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    40a8:	98 89       	ldd	r25, Y+16	; 0x10
    40aa:	01 97       	sbiw	r24, 0x01	; 1
    40ac:	f1 f7       	brne	.-4      	; 0x40aa <Door+0x232>
    40ae:	98 8b       	std	Y+16, r25	; 0x10
    40b0:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_displayString(" opening ");
			_delay_ms(LCD_DELAY);
			LCD_clearScreen();
			LCD_displayString(" Welcome! ");
			for(uint16 i =0 ; i<2*
			DOOR_DELAY;i++)        //send until door closes and a while after it
    40b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    40b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    40b6:	01 96       	adiw	r24, 0x01	; 1
    40b8:	9c a7       	std	Y+44, r25	; 0x2c
    40ba:	8b a7       	std	Y+43, r24	; 0x2b
			LCD_goToRowColumn(1,2);
			LCD_displayString(" opening ");
			_delay_ms(LCD_DELAY);
			LCD_clearScreen();
			LCD_displayString(" Welcome! ");
			for(uint16 i =0 ; i<2*
    40bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    40be:	9c a5       	ldd	r25, Y+44	; 0x2c
    40c0:	27 e0       	ldi	r18, 0x07	; 7
    40c2:	80 3d       	cpi	r24, 0xD0	; 208
    40c4:	92 07       	cpc	r25, r18
    40c6:	08 f4       	brcc	.+2      	; 0x40ca <Door+0x252>
    40c8:	80 cf       	rjmp	.-256    	; 0x3fca <Door+0x152>
    40ca:	7e c0       	rjmp	.+252    	; 0x41c8 <Door+0x350>
			}
			break;

		}

		else if(KeyPad_getPressedKey()!=2)
    40cc:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    40d0:	82 30       	cpi	r24, 0x02	; 2
    40d2:	09 f4       	brne	.+2      	; 0x40d6 <Door+0x25e>
    40d4:	79 c0       	rjmp	.+242    	; 0x41c8 <Door+0x350>
		{
			LCD_clearScreen();
    40d6:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			LCD_displayString("wrong no");
    40da:	89 ed       	ldi	r24, 0xD9	; 217
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    40e2:	80 e0       	ldi	r24, 0x00	; 0
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	a6 e9       	ldi	r26, 0x96	; 150
    40e8:	b3 e4       	ldi	r27, 0x43	; 67
    40ea:	8b 87       	std	Y+11, r24	; 0x0b
    40ec:	9c 87       	std	Y+12, r25	; 0x0c
    40ee:	ad 87       	std	Y+13, r26	; 0x0d
    40f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    40f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    40f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	4a ef       	ldi	r20, 0xFA	; 250
    4100:	54 e4       	ldi	r21, 0x44	; 68
    4102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	8f 83       	std	Y+7, r24	; 0x07
    410c:	98 87       	std	Y+8, r25	; 0x08
    410e:	a9 87       	std	Y+9, r26	; 0x09
    4110:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4112:	6f 81       	ldd	r22, Y+7	; 0x07
    4114:	78 85       	ldd	r23, Y+8	; 0x08
    4116:	89 85       	ldd	r24, Y+9	; 0x09
    4118:	9a 85       	ldd	r25, Y+10	; 0x0a
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	40 e8       	ldi	r20, 0x80	; 128
    4120:	5f e3       	ldi	r21, 0x3F	; 63
    4122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4126:	88 23       	and	r24, r24
    4128:	2c f4       	brge	.+10     	; 0x4134 <Door+0x2bc>
		__ticks = 1;
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	9e 83       	std	Y+6, r25	; 0x06
    4130:	8d 83       	std	Y+5, r24	; 0x05
    4132:	3f c0       	rjmp	.+126    	; 0x41b2 <Door+0x33a>
	else if (__tmp > 65535)
    4134:	6f 81       	ldd	r22, Y+7	; 0x07
    4136:	78 85       	ldd	r23, Y+8	; 0x08
    4138:	89 85       	ldd	r24, Y+9	; 0x09
    413a:	9a 85       	ldd	r25, Y+10	; 0x0a
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	3f ef       	ldi	r19, 0xFF	; 255
    4140:	4f e7       	ldi	r20, 0x7F	; 127
    4142:	57 e4       	ldi	r21, 0x47	; 71
    4144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4148:	18 16       	cp	r1, r24
    414a:	4c f5       	brge	.+82     	; 0x419e <Door+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    414c:	6b 85       	ldd	r22, Y+11	; 0x0b
    414e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4150:	8d 85       	ldd	r24, Y+13	; 0x0d
    4152:	9e 85       	ldd	r25, Y+14	; 0x0e
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	40 e2       	ldi	r20, 0x20	; 32
    415a:	51 e4       	ldi	r21, 0x41	; 65
    415c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	bc 01       	movw	r22, r24
    4166:	cd 01       	movw	r24, r26
    4168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	9e 83       	std	Y+6, r25	; 0x06
    4172:	8d 83       	std	Y+5, r24	; 0x05
    4174:	0f c0       	rjmp	.+30     	; 0x4194 <Door+0x31c>
    4176:	88 ec       	ldi	r24, 0xC8	; 200
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	9c 83       	std	Y+4, r25	; 0x04
    417c:	8b 83       	std	Y+3, r24	; 0x03
    417e:	8b 81       	ldd	r24, Y+3	; 0x03
    4180:	9c 81       	ldd	r25, Y+4	; 0x04
    4182:	01 97       	sbiw	r24, 0x01	; 1
    4184:	f1 f7       	brne	.-4      	; 0x4182 <Door+0x30a>
    4186:	9c 83       	std	Y+4, r25	; 0x04
    4188:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    418a:	8d 81       	ldd	r24, Y+5	; 0x05
    418c:	9e 81       	ldd	r25, Y+6	; 0x06
    418e:	01 97       	sbiw	r24, 0x01	; 1
    4190:	9e 83       	std	Y+6, r25	; 0x06
    4192:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4194:	8d 81       	ldd	r24, Y+5	; 0x05
    4196:	9e 81       	ldd	r25, Y+6	; 0x06
    4198:	00 97       	sbiw	r24, 0x00	; 0
    419a:	69 f7       	brne	.-38     	; 0x4176 <Door+0x2fe>
    419c:	77 ce       	rjmp	.-786    	; 0x3e8c <Door+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    419e:	6f 81       	ldd	r22, Y+7	; 0x07
    41a0:	78 85       	ldd	r23, Y+8	; 0x08
    41a2:	89 85       	ldd	r24, Y+9	; 0x09
    41a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41aa:	dc 01       	movw	r26, r24
    41ac:	cb 01       	movw	r24, r22
    41ae:	9e 83       	std	Y+6, r25	; 0x06
    41b0:	8d 83       	std	Y+5, r24	; 0x05
    41b2:	8d 81       	ldd	r24, Y+5	; 0x05
    41b4:	9e 81       	ldd	r25, Y+6	; 0x06
    41b6:	9a 83       	std	Y+2, r25	; 0x02
    41b8:	89 83       	std	Y+1, r24	; 0x01
    41ba:	89 81       	ldd	r24, Y+1	; 0x01
    41bc:	9a 81       	ldd	r25, Y+2	; 0x02
    41be:	01 97       	sbiw	r24, 0x01	; 1
    41c0:	f1 f7       	brne	.-4      	; 0x41be <Door+0x346>
    41c2:	9a 83       	std	Y+2, r25	; 0x02
    41c4:	89 83       	std	Y+1, r24	; 0x01
    41c6:	62 ce       	rjmp	.-828    	; 0x3e8c <Door+0x14>


	}


}
    41c8:	ac 96       	adiw	r28, 0x2c	; 44
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	f8 94       	cli
    41ce:	de bf       	out	0x3e, r29	; 62
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	cd bf       	out	0x3d, r28	; 61
    41d4:	cf 91       	pop	r28
    41d6:	df 91       	pop	r29
    41d8:	08 95       	ret

000041da <settings>:
void settings(){
    41da:	df 93       	push	r29
    41dc:	cf 93       	push	r28
    41de:	cd b7       	in	r28, 0x3d	; 61
    41e0:	de b7       	in	r29, 0x3e	; 62
    41e2:	aa 97       	sbiw	r28, 0x2a	; 42
    41e4:	0f b6       	in	r0, 0x3f	; 63
    41e6:	f8 94       	cli
    41e8:	de bf       	out	0x3e, r29	; 62
    41ea:	0f be       	out	0x3f, r0	; 63
    41ec:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		LCD_clearScreen();
    41ee:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
		LCD_displayString("show settings?");
    41f2:	8e e1       	ldi	r24, 0x1E	; 30
    41f4:	91 e0       	ldi	r25, 0x01	; 1
    41f6:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	aa ef       	ldi	r26, 0xFA	; 250
    4200:	b3 e4       	ldi	r27, 0x43	; 67
    4202:	8f a3       	std	Y+39, r24	; 0x27
    4204:	98 a7       	std	Y+40, r25	; 0x28
    4206:	a9 a7       	std	Y+41, r26	; 0x29
    4208:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    420a:	6f a1       	ldd	r22, Y+39	; 0x27
    420c:	78 a5       	ldd	r23, Y+40	; 0x28
    420e:	89 a5       	ldd	r24, Y+41	; 0x29
    4210:	9a a5       	ldd	r25, Y+42	; 0x2a
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	4a ef       	ldi	r20, 0xFA	; 250
    4218:	54 e4       	ldi	r21, 0x44	; 68
    421a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	8b a3       	std	Y+35, r24	; 0x23
    4224:	9c a3       	std	Y+36, r25	; 0x24
    4226:	ad a3       	std	Y+37, r26	; 0x25
    4228:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    422a:	6b a1       	ldd	r22, Y+35	; 0x23
    422c:	7c a1       	ldd	r23, Y+36	; 0x24
    422e:	8d a1       	ldd	r24, Y+37	; 0x25
    4230:	9e a1       	ldd	r25, Y+38	; 0x26
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	40 e8       	ldi	r20, 0x80	; 128
    4238:	5f e3       	ldi	r21, 0x3F	; 63
    423a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    423e:	88 23       	and	r24, r24
    4240:	2c f4       	brge	.+10     	; 0x424c <settings+0x72>
		__ticks = 1;
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	9a a3       	std	Y+34, r25	; 0x22
    4248:	89 a3       	std	Y+33, r24	; 0x21
    424a:	3f c0       	rjmp	.+126    	; 0x42ca <settings+0xf0>
	else if (__tmp > 65535)
    424c:	6b a1       	ldd	r22, Y+35	; 0x23
    424e:	7c a1       	ldd	r23, Y+36	; 0x24
    4250:	8d a1       	ldd	r24, Y+37	; 0x25
    4252:	9e a1       	ldd	r25, Y+38	; 0x26
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	3f ef       	ldi	r19, 0xFF	; 255
    4258:	4f e7       	ldi	r20, 0x7F	; 127
    425a:	57 e4       	ldi	r21, 0x47	; 71
    425c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4260:	18 16       	cp	r1, r24
    4262:	4c f5       	brge	.+82     	; 0x42b6 <settings+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4264:	6f a1       	ldd	r22, Y+39	; 0x27
    4266:	78 a5       	ldd	r23, Y+40	; 0x28
    4268:	89 a5       	ldd	r24, Y+41	; 0x29
    426a:	9a a5       	ldd	r25, Y+42	; 0x2a
    426c:	20 e0       	ldi	r18, 0x00	; 0
    426e:	30 e0       	ldi	r19, 0x00	; 0
    4270:	40 e2       	ldi	r20, 0x20	; 32
    4272:	51 e4       	ldi	r21, 0x41	; 65
    4274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4278:	dc 01       	movw	r26, r24
    427a:	cb 01       	movw	r24, r22
    427c:	bc 01       	movw	r22, r24
    427e:	cd 01       	movw	r24, r26
    4280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	9a a3       	std	Y+34, r25	; 0x22
    428a:	89 a3       	std	Y+33, r24	; 0x21
    428c:	0f c0       	rjmp	.+30     	; 0x42ac <settings+0xd2>
    428e:	88 ec       	ldi	r24, 0xC8	; 200
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	98 a3       	std	Y+32, r25	; 0x20
    4294:	8f 8f       	std	Y+31, r24	; 0x1f
    4296:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4298:	98 a1       	ldd	r25, Y+32	; 0x20
    429a:	01 97       	sbiw	r24, 0x01	; 1
    429c:	f1 f7       	brne	.-4      	; 0x429a <settings+0xc0>
    429e:	98 a3       	std	Y+32, r25	; 0x20
    42a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a2:	89 a1       	ldd	r24, Y+33	; 0x21
    42a4:	9a a1       	ldd	r25, Y+34	; 0x22
    42a6:	01 97       	sbiw	r24, 0x01	; 1
    42a8:	9a a3       	std	Y+34, r25	; 0x22
    42aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ac:	89 a1       	ldd	r24, Y+33	; 0x21
    42ae:	9a a1       	ldd	r25, Y+34	; 0x22
    42b0:	00 97       	sbiw	r24, 0x00	; 0
    42b2:	69 f7       	brne	.-38     	; 0x428e <settings+0xb4>
    42b4:	14 c0       	rjmp	.+40     	; 0x42de <settings+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42b6:	6b a1       	ldd	r22, Y+35	; 0x23
    42b8:	7c a1       	ldd	r23, Y+36	; 0x24
    42ba:	8d a1       	ldd	r24, Y+37	; 0x25
    42bc:	9e a1       	ldd	r25, Y+38	; 0x26
    42be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c2:	dc 01       	movw	r26, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	9a a3       	std	Y+34, r25	; 0x22
    42c8:	89 a3       	std	Y+33, r24	; 0x21
    42ca:	89 a1       	ldd	r24, Y+33	; 0x21
    42cc:	9a a1       	ldd	r25, Y+34	; 0x22
    42ce:	9e 8f       	std	Y+30, r25	; 0x1e
    42d0:	8d 8f       	std	Y+29, r24	; 0x1d
    42d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42d6:	01 97       	sbiw	r24, 0x01	; 1
    42d8:	f1 f7       	brne	.-4      	; 0x42d6 <settings+0xfc>
    42da:	9e 8f       	std	Y+30, r25	; 0x1e
    42dc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		LCD_goToRowColumn(1,0);
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	60 e0       	ldi	r22, 0x00	; 0
    42e2:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
		LCD_displayString("   yes1   no2");
    42e6:	8d ee       	ldi	r24, 0xED	; 237
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	aa ef       	ldi	r26, 0xFA	; 250
    42f4:	b3 e4       	ldi	r27, 0x43	; 67
    42f6:	89 8f       	std	Y+25, r24	; 0x19
    42f8:	9a 8f       	std	Y+26, r25	; 0x1a
    42fa:	ab 8f       	std	Y+27, r26	; 0x1b
    42fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fe:	69 8d       	ldd	r22, Y+25	; 0x19
    4300:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4302:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4304:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	4a ef       	ldi	r20, 0xFA	; 250
    430c:	54 e4       	ldi	r21, 0x44	; 68
    430e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4312:	dc 01       	movw	r26, r24
    4314:	cb 01       	movw	r24, r22
    4316:	8d 8b       	std	Y+21, r24	; 0x15
    4318:	9e 8b       	std	Y+22, r25	; 0x16
    431a:	af 8b       	std	Y+23, r26	; 0x17
    431c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    431e:	6d 89       	ldd	r22, Y+21	; 0x15
    4320:	7e 89       	ldd	r23, Y+22	; 0x16
    4322:	8f 89       	ldd	r24, Y+23	; 0x17
    4324:	98 8d       	ldd	r25, Y+24	; 0x18
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	40 e8       	ldi	r20, 0x80	; 128
    432c:	5f e3       	ldi	r21, 0x3F	; 63
    432e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4332:	88 23       	and	r24, r24
    4334:	2c f4       	brge	.+10     	; 0x4340 <settings+0x166>
		__ticks = 1;
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	9c 8b       	std	Y+20, r25	; 0x14
    433c:	8b 8b       	std	Y+19, r24	; 0x13
    433e:	3f c0       	rjmp	.+126    	; 0x43be <settings+0x1e4>
	else if (__tmp > 65535)
    4340:	6d 89       	ldd	r22, Y+21	; 0x15
    4342:	7e 89       	ldd	r23, Y+22	; 0x16
    4344:	8f 89       	ldd	r24, Y+23	; 0x17
    4346:	98 8d       	ldd	r25, Y+24	; 0x18
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	3f ef       	ldi	r19, 0xFF	; 255
    434c:	4f e7       	ldi	r20, 0x7F	; 127
    434e:	57 e4       	ldi	r21, 0x47	; 71
    4350:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4354:	18 16       	cp	r1, r24
    4356:	4c f5       	brge	.+82     	; 0x43aa <settings+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4358:	69 8d       	ldd	r22, Y+25	; 0x19
    435a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    435c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    435e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4360:	20 e0       	ldi	r18, 0x00	; 0
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	40 e2       	ldi	r20, 0x20	; 32
    4366:	51 e4       	ldi	r21, 0x41	; 65
    4368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	bc 01       	movw	r22, r24
    4372:	cd 01       	movw	r24, r26
    4374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4378:	dc 01       	movw	r26, r24
    437a:	cb 01       	movw	r24, r22
    437c:	9c 8b       	std	Y+20, r25	; 0x14
    437e:	8b 8b       	std	Y+19, r24	; 0x13
    4380:	0f c0       	rjmp	.+30     	; 0x43a0 <settings+0x1c6>
    4382:	88 ec       	ldi	r24, 0xC8	; 200
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	9a 8b       	std	Y+18, r25	; 0x12
    4388:	89 8b       	std	Y+17, r24	; 0x11
    438a:	89 89       	ldd	r24, Y+17	; 0x11
    438c:	9a 89       	ldd	r25, Y+18	; 0x12
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	f1 f7       	brne	.-4      	; 0x438e <settings+0x1b4>
    4392:	9a 8b       	std	Y+18, r25	; 0x12
    4394:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4396:	8b 89       	ldd	r24, Y+19	; 0x13
    4398:	9c 89       	ldd	r25, Y+20	; 0x14
    439a:	01 97       	sbiw	r24, 0x01	; 1
    439c:	9c 8b       	std	Y+20, r25	; 0x14
    439e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a0:	8b 89       	ldd	r24, Y+19	; 0x13
    43a2:	9c 89       	ldd	r25, Y+20	; 0x14
    43a4:	00 97       	sbiw	r24, 0x00	; 0
    43a6:	69 f7       	brne	.-38     	; 0x4382 <settings+0x1a8>
    43a8:	14 c0       	rjmp	.+40     	; 0x43d2 <settings+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43aa:	6d 89       	ldd	r22, Y+21	; 0x15
    43ac:	7e 89       	ldd	r23, Y+22	; 0x16
    43ae:	8f 89       	ldd	r24, Y+23	; 0x17
    43b0:	98 8d       	ldd	r25, Y+24	; 0x18
    43b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	9c 8b       	std	Y+20, r25	; 0x14
    43bc:	8b 8b       	std	Y+19, r24	; 0x13
    43be:	8b 89       	ldd	r24, Y+19	; 0x13
    43c0:	9c 89       	ldd	r25, Y+20	; 0x14
    43c2:	98 8b       	std	Y+16, r25	; 0x10
    43c4:	8f 87       	std	Y+15, r24	; 0x0f
    43c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    43c8:	98 89       	ldd	r25, Y+16	; 0x10
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	f1 f7       	brne	.-4      	; 0x43ca <settings+0x1f0>
    43ce:	98 8b       	std	Y+16, r25	; 0x10
    43d0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		if(KeyPad_getPressedKey()==1)
    43d2:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    43d6:	81 30       	cpi	r24, 0x01	; 1
    43d8:	e9 f4       	brne	.+58     	; 0x4414 <settings+0x23a>
		{
			LCD_clearScreen();
    43da:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			//---------------AC-------------------
			AC_manager();
    43de:	0e 94 91 22 	call	0x4522	; 0x4522 <AC_manager>
			//---------------living room-------------------
			room_manager(1,"living",LIVING_ROOM_ON,LIVING_ROOM_OFF);
    43e2:	2d e2       	ldi	r18, 0x2D	; 45
    43e4:	31 e0       	ldi	r19, 0x01	; 1
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	b9 01       	movw	r22, r18
    43ea:	41 e0       	ldi	r20, 0x01	; 1
    43ec:	22 e0       	ldi	r18, 0x02	; 2
    43ee:	0e 94 22 28 	call	0x5044	; 0x5044 <room_manager>
			//---------------bed room-------------------
			room_manager(2,"bed",BED_ROOM_ON,BED_ROOM_OFF);
    43f2:	24 e3       	ldi	r18, 0x34	; 52
    43f4:	31 e0       	ldi	r19, 0x01	; 1
    43f6:	82 e0       	ldi	r24, 0x02	; 2
    43f8:	b9 01       	movw	r22, r18
    43fa:	45 e0       	ldi	r20, 0x05	; 5
    43fc:	26 e0       	ldi	r18, 0x06	; 6
    43fe:	0e 94 22 28 	call	0x5044	; 0x5044 <room_manager>
			//---------------kids room-------------------
			room_manager(3,"kids",KIDS_ROOM_ON,KIDS_ROOM_OFF);
    4402:	28 e3       	ldi	r18, 0x38	; 56
    4404:	31 e0       	ldi	r19, 0x01	; 1
    4406:	83 e0       	ldi	r24, 0x03	; 3
    4408:	b9 01       	movw	r22, r18
    440a:	47 e0       	ldi	r20, 0x07	; 7
    440c:	28 e0       	ldi	r18, 0x08	; 8
    440e:	0e 94 22 28 	call	0x5044	; 0x5044 <room_manager>
    4412:	ed ce       	rjmp	.-550    	; 0x41ee <settings+0x14>
		}

		else if(KeyPad_getPressedKey()!=2)
    4414:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    4418:	82 30       	cpi	r24, 0x02	; 2
    441a:	09 f4       	brne	.+2      	; 0x441e <settings+0x244>
    441c:	79 c0       	rjmp	.+242    	; 0x4510 <settings+0x336>
		{
			LCD_clearScreen();
    441e:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			LCD_displayString("wrong no");
    4422:	89 ed       	ldi	r24, 0xD9	; 217
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    442a:	80 e0       	ldi	r24, 0x00	; 0
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	a6 e9       	ldi	r26, 0x96	; 150
    4430:	b3 e4       	ldi	r27, 0x43	; 67
    4432:	8b 87       	std	Y+11, r24	; 0x0b
    4434:	9c 87       	std	Y+12, r25	; 0x0c
    4436:	ad 87       	std	Y+13, r26	; 0x0d
    4438:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    443a:	6b 85       	ldd	r22, Y+11	; 0x0b
    443c:	7c 85       	ldd	r23, Y+12	; 0x0c
    443e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4440:	9e 85       	ldd	r25, Y+14	; 0x0e
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	4a ef       	ldi	r20, 0xFA	; 250
    4448:	54 e4       	ldi	r21, 0x44	; 68
    444a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444e:	dc 01       	movw	r26, r24
    4450:	cb 01       	movw	r24, r22
    4452:	8f 83       	std	Y+7, r24	; 0x07
    4454:	98 87       	std	Y+8, r25	; 0x08
    4456:	a9 87       	std	Y+9, r26	; 0x09
    4458:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    445a:	6f 81       	ldd	r22, Y+7	; 0x07
    445c:	78 85       	ldd	r23, Y+8	; 0x08
    445e:	89 85       	ldd	r24, Y+9	; 0x09
    4460:	9a 85       	ldd	r25, Y+10	; 0x0a
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	40 e8       	ldi	r20, 0x80	; 128
    4468:	5f e3       	ldi	r21, 0x3F	; 63
    446a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    446e:	88 23       	and	r24, r24
    4470:	2c f4       	brge	.+10     	; 0x447c <settings+0x2a2>
		__ticks = 1;
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	9e 83       	std	Y+6, r25	; 0x06
    4478:	8d 83       	std	Y+5, r24	; 0x05
    447a:	3f c0       	rjmp	.+126    	; 0x44fa <settings+0x320>
	else if (__tmp > 65535)
    447c:	6f 81       	ldd	r22, Y+7	; 0x07
    447e:	78 85       	ldd	r23, Y+8	; 0x08
    4480:	89 85       	ldd	r24, Y+9	; 0x09
    4482:	9a 85       	ldd	r25, Y+10	; 0x0a
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	3f ef       	ldi	r19, 0xFF	; 255
    4488:	4f e7       	ldi	r20, 0x7F	; 127
    448a:	57 e4       	ldi	r21, 0x47	; 71
    448c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4490:	18 16       	cp	r1, r24
    4492:	4c f5       	brge	.+82     	; 0x44e6 <settings+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4494:	6b 85       	ldd	r22, Y+11	; 0x0b
    4496:	7c 85       	ldd	r23, Y+12	; 0x0c
    4498:	8d 85       	ldd	r24, Y+13	; 0x0d
    449a:	9e 85       	ldd	r25, Y+14	; 0x0e
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	40 e2       	ldi	r20, 0x20	; 32
    44a2:	51 e4       	ldi	r21, 0x41	; 65
    44a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	bc 01       	movw	r22, r24
    44ae:	cd 01       	movw	r24, r26
    44b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b4:	dc 01       	movw	r26, r24
    44b6:	cb 01       	movw	r24, r22
    44b8:	9e 83       	std	Y+6, r25	; 0x06
    44ba:	8d 83       	std	Y+5, r24	; 0x05
    44bc:	0f c0       	rjmp	.+30     	; 0x44dc <settings+0x302>
    44be:	88 ec       	ldi	r24, 0xC8	; 200
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	9c 83       	std	Y+4, r25	; 0x04
    44c4:	8b 83       	std	Y+3, r24	; 0x03
    44c6:	8b 81       	ldd	r24, Y+3	; 0x03
    44c8:	9c 81       	ldd	r25, Y+4	; 0x04
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	f1 f7       	brne	.-4      	; 0x44ca <settings+0x2f0>
    44ce:	9c 83       	std	Y+4, r25	; 0x04
    44d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d2:	8d 81       	ldd	r24, Y+5	; 0x05
    44d4:	9e 81       	ldd	r25, Y+6	; 0x06
    44d6:	01 97       	sbiw	r24, 0x01	; 1
    44d8:	9e 83       	std	Y+6, r25	; 0x06
    44da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44dc:	8d 81       	ldd	r24, Y+5	; 0x05
    44de:	9e 81       	ldd	r25, Y+6	; 0x06
    44e0:	00 97       	sbiw	r24, 0x00	; 0
    44e2:	69 f7       	brne	.-38     	; 0x44be <settings+0x2e4>
    44e4:	84 ce       	rjmp	.-760    	; 0x41ee <settings+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44e6:	6f 81       	ldd	r22, Y+7	; 0x07
    44e8:	78 85       	ldd	r23, Y+8	; 0x08
    44ea:	89 85       	ldd	r24, Y+9	; 0x09
    44ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	9e 83       	std	Y+6, r25	; 0x06
    44f8:	8d 83       	std	Y+5, r24	; 0x05
    44fa:	8d 81       	ldd	r24, Y+5	; 0x05
    44fc:	9e 81       	ldd	r25, Y+6	; 0x06
    44fe:	9a 83       	std	Y+2, r25	; 0x02
    4500:	89 83       	std	Y+1, r24	; 0x01
    4502:	89 81       	ldd	r24, Y+1	; 0x01
    4504:	9a 81       	ldd	r25, Y+2	; 0x02
    4506:	01 97       	sbiw	r24, 0x01	; 1
    4508:	f1 f7       	brne	.-4      	; 0x4506 <settings+0x32c>
    450a:	9a 83       	std	Y+2, r25	; 0x02
    450c:	89 83       	std	Y+1, r24	; 0x01
    450e:	6f ce       	rjmp	.-802    	; 0x41ee <settings+0x14>
		}
		else{break;}

	}

}
    4510:	aa 96       	adiw	r28, 0x2a	; 42
    4512:	0f b6       	in	r0, 0x3f	; 63
    4514:	f8 94       	cli
    4516:	de bf       	out	0x3e, r29	; 62
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	cd bf       	out	0x3d, r28	; 61
    451c:	cf 91       	pop	r28
    451e:	df 91       	pop	r29
    4520:	08 95       	ret

00004522 <AC_manager>:

void AC_manager(){
    4522:	df 93       	push	r29
    4524:	cf 93       	push	r28
    4526:	cd b7       	in	r28, 0x3d	; 61
    4528:	de b7       	in	r29, 0x3e	; 62
    452a:	6c 97       	sbiw	r28, 0x1c	; 28
    452c:	0f b6       	in	r0, 0x3f	; 63
    452e:	f8 94       	cli
    4530:	de bf       	out	0x3e, r29	; 62
    4532:	0f be       	out	0x3f, r0	; 63
    4534:	cd bf       	out	0x3d, r28	; 61
	while(1){

	LCD_clearScreen();
    4536:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
	LCD_displayString("  AC");
    453a:	8d e3       	ldi	r24, 0x3D	; 61
    453c:	91 e0       	ldi	r25, 0x01	; 1
    453e:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
	LCD_goToRowColumn(1,0);
    4542:	81 e0       	ldi	r24, 0x01	; 1
    4544:	60 e0       	ldi	r22, 0x00	; 0
    4546:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
	LCD_displayString("   on1   off2");
    454a:	82 e4       	ldi	r24, 0x42	; 66
    454c:	91 e0       	ldi	r25, 0x01	; 1
    454e:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
	if(KeyPad_getPressedKey()==1)
    4552:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    4556:	81 30       	cpi	r24, 0x01	; 1
    4558:	19 f4       	brne	.+6      	; 0x4560 <AC_manager+0x3e>
	{
		set_temp();
    455a:	0e 94 b2 23 	call	0x4764	; 0x4764 <set_temp>
    455e:	f9 c0       	rjmp	.+498    	; 0x4752 <AC_manager+0x230>
		break;
	}


	else if(KeyPad_getPressedKey()!=2)
    4560:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    4564:	82 30       	cpi	r24, 0x02	; 2
    4566:	09 f4       	brne	.+2      	; 0x456a <AC_manager+0x48>
    4568:	79 c0       	rjmp	.+242    	; 0x465c <AC_manager+0x13a>
	{
		LCD_clearScreen();
    456a:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
		LCD_displayString("wrong no");
    456e:	89 ed       	ldi	r24, 0xD9	; 217
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    4576:	80 e0       	ldi	r24, 0x00	; 0
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	a6 e9       	ldi	r26, 0x96	; 150
    457c:	b3 e4       	ldi	r27, 0x43	; 67
    457e:	89 8f       	std	Y+25, r24	; 0x19
    4580:	9a 8f       	std	Y+26, r25	; 0x1a
    4582:	ab 8f       	std	Y+27, r26	; 0x1b
    4584:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4586:	69 8d       	ldd	r22, Y+25	; 0x19
    4588:	7a 8d       	ldd	r23, Y+26	; 0x1a
    458a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    458c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	4a ef       	ldi	r20, 0xFA	; 250
    4594:	54 e4       	ldi	r21, 0x44	; 68
    4596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	8d 8b       	std	Y+21, r24	; 0x15
    45a0:	9e 8b       	std	Y+22, r25	; 0x16
    45a2:	af 8b       	std	Y+23, r26	; 0x17
    45a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45a6:	6d 89       	ldd	r22, Y+21	; 0x15
    45a8:	7e 89       	ldd	r23, Y+22	; 0x16
    45aa:	8f 89       	ldd	r24, Y+23	; 0x17
    45ac:	98 8d       	ldd	r25, Y+24	; 0x18
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	40 e8       	ldi	r20, 0x80	; 128
    45b4:	5f e3       	ldi	r21, 0x3F	; 63
    45b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45ba:	88 23       	and	r24, r24
    45bc:	2c f4       	brge	.+10     	; 0x45c8 <AC_manager+0xa6>
		__ticks = 1;
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	9c 8b       	std	Y+20, r25	; 0x14
    45c4:	8b 8b       	std	Y+19, r24	; 0x13
    45c6:	3f c0       	rjmp	.+126    	; 0x4646 <AC_manager+0x124>
	else if (__tmp > 65535)
    45c8:	6d 89       	ldd	r22, Y+21	; 0x15
    45ca:	7e 89       	ldd	r23, Y+22	; 0x16
    45cc:	8f 89       	ldd	r24, Y+23	; 0x17
    45ce:	98 8d       	ldd	r25, Y+24	; 0x18
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	3f ef       	ldi	r19, 0xFF	; 255
    45d4:	4f e7       	ldi	r20, 0x7F	; 127
    45d6:	57 e4       	ldi	r21, 0x47	; 71
    45d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45dc:	18 16       	cp	r1, r24
    45de:	4c f5       	brge	.+82     	; 0x4632 <AC_manager+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e0:	69 8d       	ldd	r22, Y+25	; 0x19
    45e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	40 e2       	ldi	r20, 0x20	; 32
    45ee:	51 e4       	ldi	r21, 0x41	; 65
    45f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f4:	dc 01       	movw	r26, r24
    45f6:	cb 01       	movw	r24, r22
    45f8:	bc 01       	movw	r22, r24
    45fa:	cd 01       	movw	r24, r26
    45fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	9c 8b       	std	Y+20, r25	; 0x14
    4606:	8b 8b       	std	Y+19, r24	; 0x13
    4608:	0f c0       	rjmp	.+30     	; 0x4628 <AC_manager+0x106>
    460a:	88 ec       	ldi	r24, 0xC8	; 200
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	9a 8b       	std	Y+18, r25	; 0x12
    4610:	89 8b       	std	Y+17, r24	; 0x11
    4612:	89 89       	ldd	r24, Y+17	; 0x11
    4614:	9a 89       	ldd	r25, Y+18	; 0x12
    4616:	01 97       	sbiw	r24, 0x01	; 1
    4618:	f1 f7       	brne	.-4      	; 0x4616 <AC_manager+0xf4>
    461a:	9a 8b       	std	Y+18, r25	; 0x12
    461c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    461e:	8b 89       	ldd	r24, Y+19	; 0x13
    4620:	9c 89       	ldd	r25, Y+20	; 0x14
    4622:	01 97       	sbiw	r24, 0x01	; 1
    4624:	9c 8b       	std	Y+20, r25	; 0x14
    4626:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4628:	8b 89       	ldd	r24, Y+19	; 0x13
    462a:	9c 89       	ldd	r25, Y+20	; 0x14
    462c:	00 97       	sbiw	r24, 0x00	; 0
    462e:	69 f7       	brne	.-38     	; 0x460a <AC_manager+0xe8>
    4630:	82 cf       	rjmp	.-252    	; 0x4536 <AC_manager+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4632:	6d 89       	ldd	r22, Y+21	; 0x15
    4634:	7e 89       	ldd	r23, Y+22	; 0x16
    4636:	8f 89       	ldd	r24, Y+23	; 0x17
    4638:	98 8d       	ldd	r25, Y+24	; 0x18
    463a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	9c 8b       	std	Y+20, r25	; 0x14
    4644:	8b 8b       	std	Y+19, r24	; 0x13
    4646:	8b 89       	ldd	r24, Y+19	; 0x13
    4648:	9c 89       	ldd	r25, Y+20	; 0x14
    464a:	98 8b       	std	Y+16, r25	; 0x10
    464c:	8f 87       	std	Y+15, r24	; 0x0f
    464e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4650:	98 89       	ldd	r25, Y+16	; 0x10
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	f1 f7       	brne	.-4      	; 0x4652 <AC_manager+0x130>
    4656:	98 8b       	std	Y+16, r25	; 0x10
    4658:	8f 87       	std	Y+15, r24	; 0x0f
    465a:	6d cf       	rjmp	.-294    	; 0x4536 <AC_manager+0x14>
		_delay_ms(LCD_DELAY);
	}
	else
	{
		LCD_clearScreen();
    465c:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
		SPI_send_char(AIR_COND_OFF);
    4660:	8a e0       	ldi	r24, 0x0A	; 10
    4662:	0e 94 fe 12 	call	0x25fc	; 0x25fc <SPI_send_char>
		LCD_displayString("off");
    4666:	80 e5       	ldi	r24, 0x50	; 80
    4668:	91 e0       	ldi	r25, 0x01	; 1
    466a:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    466e:	80 e0       	ldi	r24, 0x00	; 0
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	a6 e9       	ldi	r26, 0x96	; 150
    4674:	b3 e4       	ldi	r27, 0x43	; 67
    4676:	8b 87       	std	Y+11, r24	; 0x0b
    4678:	9c 87       	std	Y+12, r25	; 0x0c
    467a:	ad 87       	std	Y+13, r26	; 0x0d
    467c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    467e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4680:	7c 85       	ldd	r23, Y+12	; 0x0c
    4682:	8d 85       	ldd	r24, Y+13	; 0x0d
    4684:	9e 85       	ldd	r25, Y+14	; 0x0e
    4686:	20 e0       	ldi	r18, 0x00	; 0
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	4a ef       	ldi	r20, 0xFA	; 250
    468c:	54 e4       	ldi	r21, 0x44	; 68
    468e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4692:	dc 01       	movw	r26, r24
    4694:	cb 01       	movw	r24, r22
    4696:	8f 83       	std	Y+7, r24	; 0x07
    4698:	98 87       	std	Y+8, r25	; 0x08
    469a:	a9 87       	std	Y+9, r26	; 0x09
    469c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    469e:	6f 81       	ldd	r22, Y+7	; 0x07
    46a0:	78 85       	ldd	r23, Y+8	; 0x08
    46a2:	89 85       	ldd	r24, Y+9	; 0x09
    46a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a6:	20 e0       	ldi	r18, 0x00	; 0
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	40 e8       	ldi	r20, 0x80	; 128
    46ac:	5f e3       	ldi	r21, 0x3F	; 63
    46ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46b2:	88 23       	and	r24, r24
    46b4:	2c f4       	brge	.+10     	; 0x46c0 <AC_manager+0x19e>
		__ticks = 1;
    46b6:	81 e0       	ldi	r24, 0x01	; 1
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	9e 83       	std	Y+6, r25	; 0x06
    46bc:	8d 83       	std	Y+5, r24	; 0x05
    46be:	3f c0       	rjmp	.+126    	; 0x473e <AC_manager+0x21c>
	else if (__tmp > 65535)
    46c0:	6f 81       	ldd	r22, Y+7	; 0x07
    46c2:	78 85       	ldd	r23, Y+8	; 0x08
    46c4:	89 85       	ldd	r24, Y+9	; 0x09
    46c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c8:	20 e0       	ldi	r18, 0x00	; 0
    46ca:	3f ef       	ldi	r19, 0xFF	; 255
    46cc:	4f e7       	ldi	r20, 0x7F	; 127
    46ce:	57 e4       	ldi	r21, 0x47	; 71
    46d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46d4:	18 16       	cp	r1, r24
    46d6:	4c f5       	brge	.+82     	; 0x472a <AC_manager+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    46da:	7c 85       	ldd	r23, Y+12	; 0x0c
    46dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    46de:	9e 85       	ldd	r25, Y+14	; 0x0e
    46e0:	20 e0       	ldi	r18, 0x00	; 0
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	40 e2       	ldi	r20, 0x20	; 32
    46e6:	51 e4       	ldi	r21, 0x41	; 65
    46e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ec:	dc 01       	movw	r26, r24
    46ee:	cb 01       	movw	r24, r22
    46f0:	bc 01       	movw	r22, r24
    46f2:	cd 01       	movw	r24, r26
    46f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f8:	dc 01       	movw	r26, r24
    46fa:	cb 01       	movw	r24, r22
    46fc:	9e 83       	std	Y+6, r25	; 0x06
    46fe:	8d 83       	std	Y+5, r24	; 0x05
    4700:	0f c0       	rjmp	.+30     	; 0x4720 <AC_manager+0x1fe>
    4702:	88 ec       	ldi	r24, 0xC8	; 200
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	9c 83       	std	Y+4, r25	; 0x04
    4708:	8b 83       	std	Y+3, r24	; 0x03
    470a:	8b 81       	ldd	r24, Y+3	; 0x03
    470c:	9c 81       	ldd	r25, Y+4	; 0x04
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	f1 f7       	brne	.-4      	; 0x470e <AC_manager+0x1ec>
    4712:	9c 83       	std	Y+4, r25	; 0x04
    4714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4716:	8d 81       	ldd	r24, Y+5	; 0x05
    4718:	9e 81       	ldd	r25, Y+6	; 0x06
    471a:	01 97       	sbiw	r24, 0x01	; 1
    471c:	9e 83       	std	Y+6, r25	; 0x06
    471e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4720:	8d 81       	ldd	r24, Y+5	; 0x05
    4722:	9e 81       	ldd	r25, Y+6	; 0x06
    4724:	00 97       	sbiw	r24, 0x00	; 0
    4726:	69 f7       	brne	.-38     	; 0x4702 <AC_manager+0x1e0>
    4728:	14 c0       	rjmp	.+40     	; 0x4752 <AC_manager+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    472a:	6f 81       	ldd	r22, Y+7	; 0x07
    472c:	78 85       	ldd	r23, Y+8	; 0x08
    472e:	89 85       	ldd	r24, Y+9	; 0x09
    4730:	9a 85       	ldd	r25, Y+10	; 0x0a
    4732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	9e 83       	std	Y+6, r25	; 0x06
    473c:	8d 83       	std	Y+5, r24	; 0x05
    473e:	8d 81       	ldd	r24, Y+5	; 0x05
    4740:	9e 81       	ldd	r25, Y+6	; 0x06
    4742:	9a 83       	std	Y+2, r25	; 0x02
    4744:	89 83       	std	Y+1, r24	; 0x01
    4746:	89 81       	ldd	r24, Y+1	; 0x01
    4748:	9a 81       	ldd	r25, Y+2	; 0x02
    474a:	01 97       	sbiw	r24, 0x01	; 1
    474c:	f1 f7       	brne	.-4      	; 0x474a <AC_manager+0x228>
    474e:	9a 83       	std	Y+2, r25	; 0x02
    4750:	89 83       	std	Y+1, r24	; 0x01

	}


}
}
    4752:	6c 96       	adiw	r28, 0x1c	; 28
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	de bf       	out	0x3e, r29	; 62
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	cd bf       	out	0x3d, r28	; 61
    475e:	cf 91       	pop	r28
    4760:	df 91       	pop	r29
    4762:	08 95       	ret

00004764 <set_temp>:

void set_temp(){
    4764:	0f 93       	push	r16
    4766:	1f 93       	push	r17
    4768:	df 93       	push	r29
    476a:	cf 93       	push	r28
    476c:	cd b7       	in	r28, 0x3d	; 61
    476e:	de b7       	in	r29, 0x3e	; 62
    4770:	c5 56       	subi	r28, 0x65	; 101
    4772:	d0 40       	sbci	r29, 0x00	; 0
    4774:	0f b6       	in	r0, 0x3f	; 63
    4776:	f8 94       	cli
    4778:	de bf       	out	0x3e, r29	; 62
    477a:	0f be       	out	0x3f, r0	; 63
    477c:	cd bf       	out	0x3d, r28	; 61
	uint8 d1,d2;
	while(1){
		LCD_clearScreen();
    477e:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
		LCD_displayString("set AC temp ?");
    4782:	84 e5       	ldi	r24, 0x54	; 84
    4784:	91 e0       	ldi	r25, 0x01	; 1
    4786:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	60 e0       	ldi	r22, 0x00	; 0
    478e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
		LCD_displayString("   yes1   no2");
    4792:	8d ee       	ldi	r24, 0xED	; 237
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>

		if(KeyPad_getPressedKey()==1)
    479a:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    479e:	81 30       	cpi	r24, 0x01	; 1
    47a0:	09 f0       	breq	.+2      	; 0x47a4 <set_temp+0x40>
    47a2:	4b c3       	rjmp	.+1686   	; 0x4e3a <set_temp+0x6d6>
		{
			while(1)
			{
				LCD_clearScreen();
    47a4:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
				LCD_displayString("enter temp:");
    47a8:	82 e6       	ldi	r24, 0x62	; 98
    47aa:	91 e0       	ldi	r25, 0x01	; 1
    47ac:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    47b0:	fe 01       	movw	r30, r28
    47b2:	e1 5a       	subi	r30, 0xA1	; 161
    47b4:	ff 4f       	sbci	r31, 0xFF	; 255
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	a6 e9       	ldi	r26, 0x96	; 150
    47bc:	b3 e4       	ldi	r27, 0x43	; 67
    47be:	80 83       	st	Z, r24
    47c0:	91 83       	std	Z+1, r25	; 0x01
    47c2:	a2 83       	std	Z+2, r26	; 0x02
    47c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c6:	8e 01       	movw	r16, r28
    47c8:	05 5a       	subi	r16, 0xA5	; 165
    47ca:	1f 4f       	sbci	r17, 0xFF	; 255
    47cc:	fe 01       	movw	r30, r28
    47ce:	e1 5a       	subi	r30, 0xA1	; 161
    47d0:	ff 4f       	sbci	r31, 0xFF	; 255
    47d2:	60 81       	ld	r22, Z
    47d4:	71 81       	ldd	r23, Z+1	; 0x01
    47d6:	82 81       	ldd	r24, Z+2	; 0x02
    47d8:	93 81       	ldd	r25, Z+3	; 0x03
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	4a ef       	ldi	r20, 0xFA	; 250
    47e0:	54 e4       	ldi	r21, 0x44	; 68
    47e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e6:	dc 01       	movw	r26, r24
    47e8:	cb 01       	movw	r24, r22
    47ea:	f8 01       	movw	r30, r16
    47ec:	80 83       	st	Z, r24
    47ee:	91 83       	std	Z+1, r25	; 0x01
    47f0:	a2 83       	std	Z+2, r26	; 0x02
    47f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47f4:	fe 01       	movw	r30, r28
    47f6:	e5 5a       	subi	r30, 0xA5	; 165
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	60 81       	ld	r22, Z
    47fc:	71 81       	ldd	r23, Z+1	; 0x01
    47fe:	82 81       	ldd	r24, Z+2	; 0x02
    4800:	93 81       	ldd	r25, Z+3	; 0x03
    4802:	20 e0       	ldi	r18, 0x00	; 0
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	40 e8       	ldi	r20, 0x80	; 128
    4808:	5f e3       	ldi	r21, 0x3F	; 63
    480a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    480e:	88 23       	and	r24, r24
    4810:	44 f4       	brge	.+16     	; 0x4822 <set_temp+0xbe>
		__ticks = 1;
    4812:	fe 01       	movw	r30, r28
    4814:	e7 5a       	subi	r30, 0xA7	; 167
    4816:	ff 4f       	sbci	r31, 0xFF	; 255
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	91 83       	std	Z+1, r25	; 0x01
    481e:	80 83       	st	Z, r24
    4820:	64 c0       	rjmp	.+200    	; 0x48ea <set_temp+0x186>
	else if (__tmp > 65535)
    4822:	fe 01       	movw	r30, r28
    4824:	e5 5a       	subi	r30, 0xA5	; 165
    4826:	ff 4f       	sbci	r31, 0xFF	; 255
    4828:	60 81       	ld	r22, Z
    482a:	71 81       	ldd	r23, Z+1	; 0x01
    482c:	82 81       	ldd	r24, Z+2	; 0x02
    482e:	93 81       	ldd	r25, Z+3	; 0x03
    4830:	20 e0       	ldi	r18, 0x00	; 0
    4832:	3f ef       	ldi	r19, 0xFF	; 255
    4834:	4f e7       	ldi	r20, 0x7F	; 127
    4836:	57 e4       	ldi	r21, 0x47	; 71
    4838:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    483c:	18 16       	cp	r1, r24
    483e:	0c f0       	brlt	.+2      	; 0x4842 <set_temp+0xde>
    4840:	43 c0       	rjmp	.+134    	; 0x48c8 <set_temp+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4842:	fe 01       	movw	r30, r28
    4844:	e1 5a       	subi	r30, 0xA1	; 161
    4846:	ff 4f       	sbci	r31, 0xFF	; 255
    4848:	60 81       	ld	r22, Z
    484a:	71 81       	ldd	r23, Z+1	; 0x01
    484c:	82 81       	ldd	r24, Z+2	; 0x02
    484e:	93 81       	ldd	r25, Z+3	; 0x03
    4850:	20 e0       	ldi	r18, 0x00	; 0
    4852:	30 e0       	ldi	r19, 0x00	; 0
    4854:	40 e2       	ldi	r20, 0x20	; 32
    4856:	51 e4       	ldi	r21, 0x41	; 65
    4858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    485c:	dc 01       	movw	r26, r24
    485e:	cb 01       	movw	r24, r22
    4860:	8e 01       	movw	r16, r28
    4862:	07 5a       	subi	r16, 0xA7	; 167
    4864:	1f 4f       	sbci	r17, 0xFF	; 255
    4866:	bc 01       	movw	r22, r24
    4868:	cd 01       	movw	r24, r26
    486a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22
    4872:	f8 01       	movw	r30, r16
    4874:	91 83       	std	Z+1, r25	; 0x01
    4876:	80 83       	st	Z, r24
    4878:	1f c0       	rjmp	.+62     	; 0x48b8 <set_temp+0x154>
    487a:	fe 01       	movw	r30, r28
    487c:	e9 5a       	subi	r30, 0xA9	; 169
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	88 ec       	ldi	r24, 0xC8	; 200
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	80 83       	st	Z, r24
    4888:	fe 01       	movw	r30, r28
    488a:	e9 5a       	subi	r30, 0xA9	; 169
    488c:	ff 4f       	sbci	r31, 0xFF	; 255
    488e:	80 81       	ld	r24, Z
    4890:	91 81       	ldd	r25, Z+1	; 0x01
    4892:	01 97       	sbiw	r24, 0x01	; 1
    4894:	f1 f7       	brne	.-4      	; 0x4892 <set_temp+0x12e>
    4896:	fe 01       	movw	r30, r28
    4898:	e9 5a       	subi	r30, 0xA9	; 169
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	91 83       	std	Z+1, r25	; 0x01
    489e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a0:	de 01       	movw	r26, r28
    48a2:	a7 5a       	subi	r26, 0xA7	; 167
    48a4:	bf 4f       	sbci	r27, 0xFF	; 255
    48a6:	fe 01       	movw	r30, r28
    48a8:	e7 5a       	subi	r30, 0xA7	; 167
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	80 81       	ld	r24, Z
    48ae:	91 81       	ldd	r25, Z+1	; 0x01
    48b0:	01 97       	sbiw	r24, 0x01	; 1
    48b2:	11 96       	adiw	r26, 0x01	; 1
    48b4:	9c 93       	st	X, r25
    48b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b8:	fe 01       	movw	r30, r28
    48ba:	e7 5a       	subi	r30, 0xA7	; 167
    48bc:	ff 4f       	sbci	r31, 0xFF	; 255
    48be:	80 81       	ld	r24, Z
    48c0:	91 81       	ldd	r25, Z+1	; 0x01
    48c2:	00 97       	sbiw	r24, 0x00	; 0
    48c4:	d1 f6       	brne	.-76     	; 0x487a <set_temp+0x116>
    48c6:	27 c0       	rjmp	.+78     	; 0x4916 <set_temp+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48c8:	8e 01       	movw	r16, r28
    48ca:	07 5a       	subi	r16, 0xA7	; 167
    48cc:	1f 4f       	sbci	r17, 0xFF	; 255
    48ce:	fe 01       	movw	r30, r28
    48d0:	e5 5a       	subi	r30, 0xA5	; 165
    48d2:	ff 4f       	sbci	r31, 0xFF	; 255
    48d4:	60 81       	ld	r22, Z
    48d6:	71 81       	ldd	r23, Z+1	; 0x01
    48d8:	82 81       	ldd	r24, Z+2	; 0x02
    48da:	93 81       	ldd	r25, Z+3	; 0x03
    48dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	f8 01       	movw	r30, r16
    48e6:	91 83       	std	Z+1, r25	; 0x01
    48e8:	80 83       	st	Z, r24
    48ea:	de 01       	movw	r26, r28
    48ec:	ab 5a       	subi	r26, 0xAB	; 171
    48ee:	bf 4f       	sbci	r27, 0xFF	; 255
    48f0:	fe 01       	movw	r30, r28
    48f2:	e7 5a       	subi	r30, 0xA7	; 167
    48f4:	ff 4f       	sbci	r31, 0xFF	; 255
    48f6:	80 81       	ld	r24, Z
    48f8:	91 81       	ldd	r25, Z+1	; 0x01
    48fa:	8d 93       	st	X+, r24
    48fc:	9c 93       	st	X, r25
    48fe:	fe 01       	movw	r30, r28
    4900:	eb 5a       	subi	r30, 0xAB	; 171
    4902:	ff 4f       	sbci	r31, 0xFF	; 255
    4904:	80 81       	ld	r24, Z
    4906:	91 81       	ldd	r25, Z+1	; 0x01
    4908:	01 97       	sbiw	r24, 0x01	; 1
    490a:	f1 f7       	brne	.-4      	; 0x4908 <set_temp+0x1a4>
    490c:	fe 01       	movw	r30, r28
    490e:	eb 5a       	subi	r30, 0xAB	; 171
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	91 83       	std	Z+1, r25	; 0x01
    4914:	80 83       	st	Z, r24
				_delay_ms(300);
				do{d1 = KeyPad_getPressedKey();}
    4916:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    491a:	fe 01       	movw	r30, r28
    491c:	eb 59       	subi	r30, 0x9B	; 155
    491e:	ff 4f       	sbci	r31, 0xFF	; 255
    4920:	80 83       	st	Z, r24
				while((d1== '#')||(d1== '*'));
    4922:	fe 01       	movw	r30, r28
    4924:	eb 59       	subi	r30, 0x9B	; 155
    4926:	ff 4f       	sbci	r31, 0xFF	; 255
    4928:	80 81       	ld	r24, Z
    492a:	83 32       	cpi	r24, 0x23	; 35
    492c:	a1 f3       	breq	.-24     	; 0x4916 <set_temp+0x1b2>
    492e:	fe 01       	movw	r30, r28
    4930:	eb 59       	subi	r30, 0x9B	; 155
    4932:	ff 4f       	sbci	r31, 0xFF	; 255
    4934:	80 81       	ld	r24, Z
    4936:	8a 32       	cpi	r24, 0x2A	; 42
    4938:	71 f3       	breq	.-36     	; 0x4916 <set_temp+0x1b2>
				LCD_goToRowColumn(1,0);
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	60 e0       	ldi	r22, 0x00	; 0
    493e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
				LCD_intgerToString(d1);
    4942:	fe 01       	movw	r30, r28
    4944:	eb 59       	subi	r30, 0x9B	; 155
    4946:	ff 4f       	sbci	r31, 0xFF	; 255
    4948:	80 81       	ld	r24, Z
    494a:	88 2f       	mov	r24, r24
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_intgerToString>
    4952:	fe 01       	movw	r30, r28
    4954:	ef 5a       	subi	r30, 0xAF	; 175
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	a8 e4       	ldi	r26, 0x48	; 72
    495e:	b3 e4       	ldi	r27, 0x43	; 67
    4960:	80 83       	st	Z, r24
    4962:	91 83       	std	Z+1, r25	; 0x01
    4964:	a2 83       	std	Z+2, r26	; 0x02
    4966:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4968:	8e 01       	movw	r16, r28
    496a:	03 5b       	subi	r16, 0xB3	; 179
    496c:	1f 4f       	sbci	r17, 0xFF	; 255
    496e:	fe 01       	movw	r30, r28
    4970:	ef 5a       	subi	r30, 0xAF	; 175
    4972:	ff 4f       	sbci	r31, 0xFF	; 255
    4974:	60 81       	ld	r22, Z
    4976:	71 81       	ldd	r23, Z+1	; 0x01
    4978:	82 81       	ldd	r24, Z+2	; 0x02
    497a:	93 81       	ldd	r25, Z+3	; 0x03
    497c:	20 e0       	ldi	r18, 0x00	; 0
    497e:	30 e0       	ldi	r19, 0x00	; 0
    4980:	4a ef       	ldi	r20, 0xFA	; 250
    4982:	54 e4       	ldi	r21, 0x44	; 68
    4984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4988:	dc 01       	movw	r26, r24
    498a:	cb 01       	movw	r24, r22
    498c:	f8 01       	movw	r30, r16
    498e:	80 83       	st	Z, r24
    4990:	91 83       	std	Z+1, r25	; 0x01
    4992:	a2 83       	std	Z+2, r26	; 0x02
    4994:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4996:	fe 01       	movw	r30, r28
    4998:	e3 5b       	subi	r30, 0xB3	; 179
    499a:	ff 4f       	sbci	r31, 0xFF	; 255
    499c:	60 81       	ld	r22, Z
    499e:	71 81       	ldd	r23, Z+1	; 0x01
    49a0:	82 81       	ldd	r24, Z+2	; 0x02
    49a2:	93 81       	ldd	r25, Z+3	; 0x03
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	40 e8       	ldi	r20, 0x80	; 128
    49aa:	5f e3       	ldi	r21, 0x3F	; 63
    49ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49b0:	88 23       	and	r24, r24
    49b2:	44 f4       	brge	.+16     	; 0x49c4 <set_temp+0x260>
		__ticks = 1;
    49b4:	fe 01       	movw	r30, r28
    49b6:	e5 5b       	subi	r30, 0xB5	; 181
    49b8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	91 83       	std	Z+1, r25	; 0x01
    49c0:	80 83       	st	Z, r24
    49c2:	64 c0       	rjmp	.+200    	; 0x4a8c <set_temp+0x328>
	else if (__tmp > 65535)
    49c4:	fe 01       	movw	r30, r28
    49c6:	e3 5b       	subi	r30, 0xB3	; 179
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	60 81       	ld	r22, Z
    49cc:	71 81       	ldd	r23, Z+1	; 0x01
    49ce:	82 81       	ldd	r24, Z+2	; 0x02
    49d0:	93 81       	ldd	r25, Z+3	; 0x03
    49d2:	20 e0       	ldi	r18, 0x00	; 0
    49d4:	3f ef       	ldi	r19, 0xFF	; 255
    49d6:	4f e7       	ldi	r20, 0x7F	; 127
    49d8:	57 e4       	ldi	r21, 0x47	; 71
    49da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49de:	18 16       	cp	r1, r24
    49e0:	0c f0       	brlt	.+2      	; 0x49e4 <set_temp+0x280>
    49e2:	43 c0       	rjmp	.+134    	; 0x4a6a <set_temp+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e4:	fe 01       	movw	r30, r28
    49e6:	ef 5a       	subi	r30, 0xAF	; 175
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	60 81       	ld	r22, Z
    49ec:	71 81       	ldd	r23, Z+1	; 0x01
    49ee:	82 81       	ldd	r24, Z+2	; 0x02
    49f0:	93 81       	ldd	r25, Z+3	; 0x03
    49f2:	20 e0       	ldi	r18, 0x00	; 0
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	40 e2       	ldi	r20, 0x20	; 32
    49f8:	51 e4       	ldi	r21, 0x41	; 65
    49fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	8e 01       	movw	r16, r28
    4a04:	05 5b       	subi	r16, 0xB5	; 181
    4a06:	1f 4f       	sbci	r17, 0xFF	; 255
    4a08:	bc 01       	movw	r22, r24
    4a0a:	cd 01       	movw	r24, r26
    4a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a10:	dc 01       	movw	r26, r24
    4a12:	cb 01       	movw	r24, r22
    4a14:	f8 01       	movw	r30, r16
    4a16:	91 83       	std	Z+1, r25	; 0x01
    4a18:	80 83       	st	Z, r24
    4a1a:	1f c0       	rjmp	.+62     	; 0x4a5a <set_temp+0x2f6>
    4a1c:	fe 01       	movw	r30, r28
    4a1e:	e7 5b       	subi	r30, 0xB7	; 183
    4a20:	ff 4f       	sbci	r31, 0xFF	; 255
    4a22:	88 ec       	ldi	r24, 0xC8	; 200
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	91 83       	std	Z+1, r25	; 0x01
    4a28:	80 83       	st	Z, r24
    4a2a:	fe 01       	movw	r30, r28
    4a2c:	e7 5b       	subi	r30, 0xB7	; 183
    4a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a30:	80 81       	ld	r24, Z
    4a32:	91 81       	ldd	r25, Z+1	; 0x01
    4a34:	01 97       	sbiw	r24, 0x01	; 1
    4a36:	f1 f7       	brne	.-4      	; 0x4a34 <set_temp+0x2d0>
    4a38:	fe 01       	movw	r30, r28
    4a3a:	e7 5b       	subi	r30, 0xB7	; 183
    4a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3e:	91 83       	std	Z+1, r25	; 0x01
    4a40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a42:	de 01       	movw	r26, r28
    4a44:	a5 5b       	subi	r26, 0xB5	; 181
    4a46:	bf 4f       	sbci	r27, 0xFF	; 255
    4a48:	fe 01       	movw	r30, r28
    4a4a:	e5 5b       	subi	r30, 0xB5	; 181
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	80 81       	ld	r24, Z
    4a50:	91 81       	ldd	r25, Z+1	; 0x01
    4a52:	01 97       	sbiw	r24, 0x01	; 1
    4a54:	11 96       	adiw	r26, 0x01	; 1
    4a56:	9c 93       	st	X, r25
    4a58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a5a:	fe 01       	movw	r30, r28
    4a5c:	e5 5b       	subi	r30, 0xB5	; 181
    4a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a60:	80 81       	ld	r24, Z
    4a62:	91 81       	ldd	r25, Z+1	; 0x01
    4a64:	00 97       	sbiw	r24, 0x00	; 0
    4a66:	d1 f6       	brne	.-76     	; 0x4a1c <set_temp+0x2b8>
    4a68:	27 c0       	rjmp	.+78     	; 0x4ab8 <set_temp+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a6a:	8e 01       	movw	r16, r28
    4a6c:	05 5b       	subi	r16, 0xB5	; 181
    4a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a70:	fe 01       	movw	r30, r28
    4a72:	e3 5b       	subi	r30, 0xB3	; 179
    4a74:	ff 4f       	sbci	r31, 0xFF	; 255
    4a76:	60 81       	ld	r22, Z
    4a78:	71 81       	ldd	r23, Z+1	; 0x01
    4a7a:	82 81       	ldd	r24, Z+2	; 0x02
    4a7c:	93 81       	ldd	r25, Z+3	; 0x03
    4a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	f8 01       	movw	r30, r16
    4a88:	91 83       	std	Z+1, r25	; 0x01
    4a8a:	80 83       	st	Z, r24
    4a8c:	de 01       	movw	r26, r28
    4a8e:	a9 5b       	subi	r26, 0xB9	; 185
    4a90:	bf 4f       	sbci	r27, 0xFF	; 255
    4a92:	fe 01       	movw	r30, r28
    4a94:	e5 5b       	subi	r30, 0xB5	; 181
    4a96:	ff 4f       	sbci	r31, 0xFF	; 255
    4a98:	80 81       	ld	r24, Z
    4a9a:	91 81       	ldd	r25, Z+1	; 0x01
    4a9c:	8d 93       	st	X+, r24
    4a9e:	9c 93       	st	X, r25
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	e9 5b       	subi	r30, 0xB9	; 185
    4aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa6:	80 81       	ld	r24, Z
    4aa8:	91 81       	ldd	r25, Z+1	; 0x01
    4aaa:	01 97       	sbiw	r24, 0x01	; 1
    4aac:	f1 f7       	brne	.-4      	; 0x4aaa <set_temp+0x346>
    4aae:	fe 01       	movw	r30, r28
    4ab0:	e9 5b       	subi	r30, 0xB9	; 185
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	91 83       	std	Z+1, r25	; 0x01
    4ab6:	80 83       	st	Z, r24
				_delay_ms(200);
				do{d2 = KeyPad_getPressedKey();}
    4ab8:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    4abc:	fe 01       	movw	r30, r28
    4abe:	ec 59       	subi	r30, 0x9C	; 156
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	80 83       	st	Z, r24
				while((d2== '#')||(d2== '*'));
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	ec 59       	subi	r30, 0x9C	; 156
    4ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aca:	80 81       	ld	r24, Z
    4acc:	83 32       	cpi	r24, 0x23	; 35
    4ace:	a1 f3       	breq	.-24     	; 0x4ab8 <set_temp+0x354>
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	ec 59       	subi	r30, 0x9C	; 156
    4ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad6:	80 81       	ld	r24, Z
    4ad8:	8a 32       	cpi	r24, 0x2A	; 42
    4ada:	71 f3       	breq	.-36     	; 0x4ab8 <set_temp+0x354>
				LCD_goToRowColumn(1,1);
    4adc:	81 e0       	ldi	r24, 0x01	; 1
    4ade:	61 e0       	ldi	r22, 0x01	; 1
    4ae0:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
				LCD_intgerToString(d2);
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	ec 59       	subi	r30, 0x9C	; 156
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	80 81       	ld	r24, Z
    4aec:	88 2f       	mov	r24, r24
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_intgerToString>
    4af4:	fe 01       	movw	r30, r28
    4af6:	ed 5b       	subi	r30, 0xBD	; 189
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	80 e0       	ldi	r24, 0x00	; 0
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	a8 e4       	ldi	r26, 0x48	; 72
    4b00:	b3 e4       	ldi	r27, 0x43	; 67
    4b02:	80 83       	st	Z, r24
    4b04:	91 83       	std	Z+1, r25	; 0x01
    4b06:	a2 83       	std	Z+2, r26	; 0x02
    4b08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b0a:	8e 01       	movw	r16, r28
    4b0c:	01 5c       	subi	r16, 0xC1	; 193
    4b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b10:	fe 01       	movw	r30, r28
    4b12:	ed 5b       	subi	r30, 0xBD	; 189
    4b14:	ff 4f       	sbci	r31, 0xFF	; 255
    4b16:	60 81       	ld	r22, Z
    4b18:	71 81       	ldd	r23, Z+1	; 0x01
    4b1a:	82 81       	ldd	r24, Z+2	; 0x02
    4b1c:	93 81       	ldd	r25, Z+3	; 0x03
    4b1e:	20 e0       	ldi	r18, 0x00	; 0
    4b20:	30 e0       	ldi	r19, 0x00	; 0
    4b22:	4a ef       	ldi	r20, 0xFA	; 250
    4b24:	54 e4       	ldi	r21, 0x44	; 68
    4b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b2a:	dc 01       	movw	r26, r24
    4b2c:	cb 01       	movw	r24, r22
    4b2e:	f8 01       	movw	r30, r16
    4b30:	80 83       	st	Z, r24
    4b32:	91 83       	std	Z+1, r25	; 0x01
    4b34:	a2 83       	std	Z+2, r26	; 0x02
    4b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b38:	fe 01       	movw	r30, r28
    4b3a:	ff 96       	adiw	r30, 0x3f	; 63
    4b3c:	60 81       	ld	r22, Z
    4b3e:	71 81       	ldd	r23, Z+1	; 0x01
    4b40:	82 81       	ldd	r24, Z+2	; 0x02
    4b42:	93 81       	ldd	r25, Z+3	; 0x03
    4b44:	20 e0       	ldi	r18, 0x00	; 0
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	40 e8       	ldi	r20, 0x80	; 128
    4b4a:	5f e3       	ldi	r21, 0x3F	; 63
    4b4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b50:	88 23       	and	r24, r24
    4b52:	2c f4       	brge	.+10     	; 0x4b5e <set_temp+0x3fa>
		__ticks = 1;
    4b54:	81 e0       	ldi	r24, 0x01	; 1
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	9e af       	std	Y+62, r25	; 0x3e
    4b5a:	8d af       	std	Y+61, r24	; 0x3d
    4b5c:	46 c0       	rjmp	.+140    	; 0x4bea <set_temp+0x486>
	else if (__tmp > 65535)
    4b5e:	fe 01       	movw	r30, r28
    4b60:	ff 96       	adiw	r30, 0x3f	; 63
    4b62:	60 81       	ld	r22, Z
    4b64:	71 81       	ldd	r23, Z+1	; 0x01
    4b66:	82 81       	ldd	r24, Z+2	; 0x02
    4b68:	93 81       	ldd	r25, Z+3	; 0x03
    4b6a:	20 e0       	ldi	r18, 0x00	; 0
    4b6c:	3f ef       	ldi	r19, 0xFF	; 255
    4b6e:	4f e7       	ldi	r20, 0x7F	; 127
    4b70:	57 e4       	ldi	r21, 0x47	; 71
    4b72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b76:	18 16       	cp	r1, r24
    4b78:	64 f5       	brge	.+88     	; 0x4bd2 <set_temp+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b7a:	fe 01       	movw	r30, r28
    4b7c:	ed 5b       	subi	r30, 0xBD	; 189
    4b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b80:	60 81       	ld	r22, Z
    4b82:	71 81       	ldd	r23, Z+1	; 0x01
    4b84:	82 81       	ldd	r24, Z+2	; 0x02
    4b86:	93 81       	ldd	r25, Z+3	; 0x03
    4b88:	20 e0       	ldi	r18, 0x00	; 0
    4b8a:	30 e0       	ldi	r19, 0x00	; 0
    4b8c:	40 e2       	ldi	r20, 0x20	; 32
    4b8e:	51 e4       	ldi	r21, 0x41	; 65
    4b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b94:	dc 01       	movw	r26, r24
    4b96:	cb 01       	movw	r24, r22
    4b98:	bc 01       	movw	r22, r24
    4b9a:	cd 01       	movw	r24, r26
    4b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	9e af       	std	Y+62, r25	; 0x3e
    4ba6:	8d af       	std	Y+61, r24	; 0x3d
    4ba8:	0f c0       	rjmp	.+30     	; 0x4bc8 <set_temp+0x464>
    4baa:	88 ec       	ldi	r24, 0xC8	; 200
    4bac:	90 e0       	ldi	r25, 0x00	; 0
    4bae:	9c af       	std	Y+60, r25	; 0x3c
    4bb0:	8b af       	std	Y+59, r24	; 0x3b
    4bb2:	8b ad       	ldd	r24, Y+59	; 0x3b
    4bb4:	9c ad       	ldd	r25, Y+60	; 0x3c
    4bb6:	01 97       	sbiw	r24, 0x01	; 1
    4bb8:	f1 f7       	brne	.-4      	; 0x4bb6 <set_temp+0x452>
    4bba:	9c af       	std	Y+60, r25	; 0x3c
    4bbc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bbe:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bc2:	01 97       	sbiw	r24, 0x01	; 1
    4bc4:	9e af       	std	Y+62, r25	; 0x3e
    4bc6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bca:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bcc:	00 97       	sbiw	r24, 0x00	; 0
    4bce:	69 f7       	brne	.-38     	; 0x4baa <set_temp+0x446>
    4bd0:	16 c0       	rjmp	.+44     	; 0x4bfe <set_temp+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	ff 96       	adiw	r30, 0x3f	; 63
    4bd6:	60 81       	ld	r22, Z
    4bd8:	71 81       	ldd	r23, Z+1	; 0x01
    4bda:	82 81       	ldd	r24, Z+2	; 0x02
    4bdc:	93 81       	ldd	r25, Z+3	; 0x03
    4bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be2:	dc 01       	movw	r26, r24
    4be4:	cb 01       	movw	r24, r22
    4be6:	9e af       	std	Y+62, r25	; 0x3e
    4be8:	8d af       	std	Y+61, r24	; 0x3d
    4bea:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bec:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bee:	9a af       	std	Y+58, r25	; 0x3a
    4bf0:	89 af       	std	Y+57, r24	; 0x39
    4bf2:	89 ad       	ldd	r24, Y+57	; 0x39
    4bf4:	9a ad       	ldd	r25, Y+58	; 0x3a
    4bf6:	01 97       	sbiw	r24, 0x01	; 1
    4bf8:	f1 f7       	brne	.-4      	; 0x4bf6 <set_temp+0x492>
    4bfa:	9a af       	std	Y+58, r25	; 0x3a
    4bfc:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(200);
				SPI_send_char(SET_TEMPERATURE);
    4bfe:	8d e0       	ldi	r24, 0x0D	; 13
    4c00:	0e 94 fe 12 	call	0x25fc	; 0x25fc <SPI_send_char>

				uint8 temp = d1*10+d2;
    4c04:	fe 01       	movw	r30, r28
    4c06:	eb 59       	subi	r30, 0x9B	; 155
    4c08:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0a:	80 81       	ld	r24, Z
    4c0c:	88 2f       	mov	r24, r24
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	9c 01       	movw	r18, r24
    4c12:	22 0f       	add	r18, r18
    4c14:	33 1f       	adc	r19, r19
    4c16:	c9 01       	movw	r24, r18
    4c18:	88 0f       	add	r24, r24
    4c1a:	99 1f       	adc	r25, r25
    4c1c:	88 0f       	add	r24, r24
    4c1e:	99 1f       	adc	r25, r25
    4c20:	82 0f       	add	r24, r18
    4c22:	93 1f       	adc	r25, r19
    4c24:	98 2f       	mov	r25, r24
    4c26:	de 01       	movw	r26, r28
    4c28:	ad 59       	subi	r26, 0x9D	; 157
    4c2a:	bf 4f       	sbci	r27, 0xFF	; 255
    4c2c:	fe 01       	movw	r30, r28
    4c2e:	ec 59       	subi	r30, 0x9C	; 156
    4c30:	ff 4f       	sbci	r31, 0xFF	; 255
    4c32:	80 81       	ld	r24, Z
    4c34:	89 0f       	add	r24, r25
    4c36:	8c 93       	st	X, r24
				if((temp < 20)||(temp >= 45))
    4c38:	fe 01       	movw	r30, r28
    4c3a:	ed 59       	subi	r30, 0x9D	; 157
    4c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3e:	80 81       	ld	r24, Z
    4c40:	84 31       	cpi	r24, 0x14	; 20
    4c42:	38 f0       	brcs	.+14     	; 0x4c52 <set_temp+0x4ee>
    4c44:	fe 01       	movw	r30, r28
    4c46:	ed 59       	subi	r30, 0x9D	; 157
    4c48:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4a:	80 81       	ld	r24, Z
    4c4c:	8d 32       	cpi	r24, 0x2D	; 45
    4c4e:	08 f4       	brcc	.+2      	; 0x4c52 <set_temp+0x4ee>
    4c50:	ed c0       	rjmp	.+474    	; 0x4e2c <set_temp+0x6c8>
				{
					LCD_clearScreen();
    4c52:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
					LCD_displayString("invalid temp");
    4c56:	8e e6       	ldi	r24, 0x6E	; 110
    4c58:	91 e0       	ldi	r25, 0x01	; 1
    4c5a:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    4c5e:	80 e0       	ldi	r24, 0x00	; 0
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	a6 e9       	ldi	r26, 0x96	; 150
    4c64:	b3 e4       	ldi	r27, 0x43	; 67
    4c66:	8d ab       	std	Y+53, r24	; 0x35
    4c68:	9e ab       	std	Y+54, r25	; 0x36
    4c6a:	af ab       	std	Y+55, r26	; 0x37
    4c6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c6e:	6d a9       	ldd	r22, Y+53	; 0x35
    4c70:	7e a9       	ldd	r23, Y+54	; 0x36
    4c72:	8f a9       	ldd	r24, Y+55	; 0x37
    4c74:	98 ad       	ldd	r25, Y+56	; 0x38
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	4a ef       	ldi	r20, 0xFA	; 250
    4c7c:	54 e4       	ldi	r21, 0x44	; 68
    4c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c82:	dc 01       	movw	r26, r24
    4c84:	cb 01       	movw	r24, r22
    4c86:	89 ab       	std	Y+49, r24	; 0x31
    4c88:	9a ab       	std	Y+50, r25	; 0x32
    4c8a:	ab ab       	std	Y+51, r26	; 0x33
    4c8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c8e:	69 a9       	ldd	r22, Y+49	; 0x31
    4c90:	7a a9       	ldd	r23, Y+50	; 0x32
    4c92:	8b a9       	ldd	r24, Y+51	; 0x33
    4c94:	9c a9       	ldd	r25, Y+52	; 0x34
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	40 e8       	ldi	r20, 0x80	; 128
    4c9c:	5f e3       	ldi	r21, 0x3F	; 63
    4c9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ca2:	88 23       	and	r24, r24
    4ca4:	2c f4       	brge	.+10     	; 0x4cb0 <set_temp+0x54c>
		__ticks = 1;
    4ca6:	81 e0       	ldi	r24, 0x01	; 1
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	98 ab       	std	Y+48, r25	; 0x30
    4cac:	8f a7       	std	Y+47, r24	; 0x2f
    4cae:	3f c0       	rjmp	.+126    	; 0x4d2e <set_temp+0x5ca>
	else if (__tmp > 65535)
    4cb0:	69 a9       	ldd	r22, Y+49	; 0x31
    4cb2:	7a a9       	ldd	r23, Y+50	; 0x32
    4cb4:	8b a9       	ldd	r24, Y+51	; 0x33
    4cb6:	9c a9       	ldd	r25, Y+52	; 0x34
    4cb8:	20 e0       	ldi	r18, 0x00	; 0
    4cba:	3f ef       	ldi	r19, 0xFF	; 255
    4cbc:	4f e7       	ldi	r20, 0x7F	; 127
    4cbe:	57 e4       	ldi	r21, 0x47	; 71
    4cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cc4:	18 16       	cp	r1, r24
    4cc6:	4c f5       	brge	.+82     	; 0x4d1a <set_temp+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc8:	6d a9       	ldd	r22, Y+53	; 0x35
    4cca:	7e a9       	ldd	r23, Y+54	; 0x36
    4ccc:	8f a9       	ldd	r24, Y+55	; 0x37
    4cce:	98 ad       	ldd	r25, Y+56	; 0x38
    4cd0:	20 e0       	ldi	r18, 0x00	; 0
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	40 e2       	ldi	r20, 0x20	; 32
    4cd6:	51 e4       	ldi	r21, 0x41	; 65
    4cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cdc:	dc 01       	movw	r26, r24
    4cde:	cb 01       	movw	r24, r22
    4ce0:	bc 01       	movw	r22, r24
    4ce2:	cd 01       	movw	r24, r26
    4ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce8:	dc 01       	movw	r26, r24
    4cea:	cb 01       	movw	r24, r22
    4cec:	98 ab       	std	Y+48, r25	; 0x30
    4cee:	8f a7       	std	Y+47, r24	; 0x2f
    4cf0:	0f c0       	rjmp	.+30     	; 0x4d10 <set_temp+0x5ac>
    4cf2:	88 ec       	ldi	r24, 0xC8	; 200
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	9e a7       	std	Y+46, r25	; 0x2e
    4cf8:	8d a7       	std	Y+45, r24	; 0x2d
    4cfa:	8d a5       	ldd	r24, Y+45	; 0x2d
    4cfc:	9e a5       	ldd	r25, Y+46	; 0x2e
    4cfe:	01 97       	sbiw	r24, 0x01	; 1
    4d00:	f1 f7       	brne	.-4      	; 0x4cfe <set_temp+0x59a>
    4d02:	9e a7       	std	Y+46, r25	; 0x2e
    4d04:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d06:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d08:	98 a9       	ldd	r25, Y+48	; 0x30
    4d0a:	01 97       	sbiw	r24, 0x01	; 1
    4d0c:	98 ab       	std	Y+48, r25	; 0x30
    4d0e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d10:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d12:	98 a9       	ldd	r25, Y+48	; 0x30
    4d14:	00 97       	sbiw	r24, 0x00	; 0
    4d16:	69 f7       	brne	.-38     	; 0x4cf2 <set_temp+0x58e>
    4d18:	14 c0       	rjmp	.+40     	; 0x4d42 <set_temp+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d1a:	69 a9       	ldd	r22, Y+49	; 0x31
    4d1c:	7a a9       	ldd	r23, Y+50	; 0x32
    4d1e:	8b a9       	ldd	r24, Y+51	; 0x33
    4d20:	9c a9       	ldd	r25, Y+52	; 0x34
    4d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d26:	dc 01       	movw	r26, r24
    4d28:	cb 01       	movw	r24, r22
    4d2a:	98 ab       	std	Y+48, r25	; 0x30
    4d2c:	8f a7       	std	Y+47, r24	; 0x2f
    4d2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d30:	98 a9       	ldd	r25, Y+48	; 0x30
    4d32:	9c a7       	std	Y+44, r25	; 0x2c
    4d34:	8b a7       	std	Y+43, r24	; 0x2b
    4d36:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d38:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d3a:	01 97       	sbiw	r24, 0x01	; 1
    4d3c:	f1 f7       	brne	.-4      	; 0x4d3a <set_temp+0x5d6>
    4d3e:	9c a7       	std	Y+44, r25	; 0x2c
    4d40:	8b a7       	std	Y+43, r24	; 0x2b
    4d42:	80 e0       	ldi	r24, 0x00	; 0
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	a8 e4       	ldi	r26, 0x48	; 72
    4d48:	b3 e4       	ldi	r27, 0x43	; 67
    4d4a:	8f a3       	std	Y+39, r24	; 0x27
    4d4c:	98 a7       	std	Y+40, r25	; 0x28
    4d4e:	a9 a7       	std	Y+41, r26	; 0x29
    4d50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d52:	6f a1       	ldd	r22, Y+39	; 0x27
    4d54:	78 a5       	ldd	r23, Y+40	; 0x28
    4d56:	89 a5       	ldd	r24, Y+41	; 0x29
    4d58:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d5a:	20 e0       	ldi	r18, 0x00	; 0
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	4a ef       	ldi	r20, 0xFA	; 250
    4d60:	54 e4       	ldi	r21, 0x44	; 68
    4d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d66:	dc 01       	movw	r26, r24
    4d68:	cb 01       	movw	r24, r22
    4d6a:	8b a3       	std	Y+35, r24	; 0x23
    4d6c:	9c a3       	std	Y+36, r25	; 0x24
    4d6e:	ad a3       	std	Y+37, r26	; 0x25
    4d70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d72:	6b a1       	ldd	r22, Y+35	; 0x23
    4d74:	7c a1       	ldd	r23, Y+36	; 0x24
    4d76:	8d a1       	ldd	r24, Y+37	; 0x25
    4d78:	9e a1       	ldd	r25, Y+38	; 0x26
    4d7a:	20 e0       	ldi	r18, 0x00	; 0
    4d7c:	30 e0       	ldi	r19, 0x00	; 0
    4d7e:	40 e8       	ldi	r20, 0x80	; 128
    4d80:	5f e3       	ldi	r21, 0x3F	; 63
    4d82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d86:	88 23       	and	r24, r24
    4d88:	2c f4       	brge	.+10     	; 0x4d94 <set_temp+0x630>
		__ticks = 1;
    4d8a:	81 e0       	ldi	r24, 0x01	; 1
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	9a a3       	std	Y+34, r25	; 0x22
    4d90:	89 a3       	std	Y+33, r24	; 0x21
    4d92:	3f c0       	rjmp	.+126    	; 0x4e12 <set_temp+0x6ae>
	else if (__tmp > 65535)
    4d94:	6b a1       	ldd	r22, Y+35	; 0x23
    4d96:	7c a1       	ldd	r23, Y+36	; 0x24
    4d98:	8d a1       	ldd	r24, Y+37	; 0x25
    4d9a:	9e a1       	ldd	r25, Y+38	; 0x26
    4d9c:	20 e0       	ldi	r18, 0x00	; 0
    4d9e:	3f ef       	ldi	r19, 0xFF	; 255
    4da0:	4f e7       	ldi	r20, 0x7F	; 127
    4da2:	57 e4       	ldi	r21, 0x47	; 71
    4da4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4da8:	18 16       	cp	r1, r24
    4daa:	4c f5       	brge	.+82     	; 0x4dfe <set_temp+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dac:	6f a1       	ldd	r22, Y+39	; 0x27
    4dae:	78 a5       	ldd	r23, Y+40	; 0x28
    4db0:	89 a5       	ldd	r24, Y+41	; 0x29
    4db2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4db4:	20 e0       	ldi	r18, 0x00	; 0
    4db6:	30 e0       	ldi	r19, 0x00	; 0
    4db8:	40 e2       	ldi	r20, 0x20	; 32
    4dba:	51 e4       	ldi	r21, 0x41	; 65
    4dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dc0:	dc 01       	movw	r26, r24
    4dc2:	cb 01       	movw	r24, r22
    4dc4:	bc 01       	movw	r22, r24
    4dc6:	cd 01       	movw	r24, r26
    4dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dcc:	dc 01       	movw	r26, r24
    4dce:	cb 01       	movw	r24, r22
    4dd0:	9a a3       	std	Y+34, r25	; 0x22
    4dd2:	89 a3       	std	Y+33, r24	; 0x21
    4dd4:	0f c0       	rjmp	.+30     	; 0x4df4 <set_temp+0x690>
    4dd6:	88 ec       	ldi	r24, 0xC8	; 200
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	98 a3       	std	Y+32, r25	; 0x20
    4ddc:	8f 8f       	std	Y+31, r24	; 0x1f
    4dde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4de0:	98 a1       	ldd	r25, Y+32	; 0x20
    4de2:	01 97       	sbiw	r24, 0x01	; 1
    4de4:	f1 f7       	brne	.-4      	; 0x4de2 <set_temp+0x67e>
    4de6:	98 a3       	std	Y+32, r25	; 0x20
    4de8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dea:	89 a1       	ldd	r24, Y+33	; 0x21
    4dec:	9a a1       	ldd	r25, Y+34	; 0x22
    4dee:	01 97       	sbiw	r24, 0x01	; 1
    4df0:	9a a3       	std	Y+34, r25	; 0x22
    4df2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4df4:	89 a1       	ldd	r24, Y+33	; 0x21
    4df6:	9a a1       	ldd	r25, Y+34	; 0x22
    4df8:	00 97       	sbiw	r24, 0x00	; 0
    4dfa:	69 f7       	brne	.-38     	; 0x4dd6 <set_temp+0x672>
    4dfc:	14 c0       	rjmp	.+40     	; 0x4e26 <set_temp+0x6c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dfe:	6b a1       	ldd	r22, Y+35	; 0x23
    4e00:	7c a1       	ldd	r23, Y+36	; 0x24
    4e02:	8d a1       	ldd	r24, Y+37	; 0x25
    4e04:	9e a1       	ldd	r25, Y+38	; 0x26
    4e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e0a:	dc 01       	movw	r26, r24
    4e0c:	cb 01       	movw	r24, r22
    4e0e:	9a a3       	std	Y+34, r25	; 0x22
    4e10:	89 a3       	std	Y+33, r24	; 0x21
    4e12:	89 a1       	ldd	r24, Y+33	; 0x21
    4e14:	9a a1       	ldd	r25, Y+34	; 0x22
    4e16:	9e 8f       	std	Y+30, r25	; 0x1e
    4e18:	8d 8f       	std	Y+29, r24	; 0x1d
    4e1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e1e:	01 97       	sbiw	r24, 0x01	; 1
    4e20:	f1 f7       	brne	.-4      	; 0x4e1e <set_temp+0x6ba>
    4e22:	9e 8f       	std	Y+30, r25	; 0x1e
    4e24:	8d 8f       	std	Y+29, r24	; 0x1d
					SPI_send_char(temp);
					break;
				}

				_delay_ms(200);
				LCD_clearScreen();
    4e26:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
    4e2a:	bc cc       	rjmp	.-1672   	; 0x47a4 <set_temp+0x40>
					LCD_displayString("invalid temp");
					_delay_ms(LCD_DELAY);
				}
				else
				{
					SPI_send_char(temp);
    4e2c:	fe 01       	movw	r30, r28
    4e2e:	ed 59       	subi	r30, 0x9D	; 157
    4e30:	ff 4f       	sbci	r31, 0xFF	; 255
    4e32:	80 81       	ld	r24, Z
    4e34:	0e 94 fe 12 	call	0x25fc	; 0x25fc <SPI_send_char>
    4e38:	f9 c0       	rjmp	.+498    	; 0x502c <set_temp+0x8c8>
			}
			break;
		}


		else if(KeyPad_getPressedKey()!=2)
    4e3a:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    4e3e:	82 30       	cpi	r24, 0x02	; 2
    4e40:	09 f4       	brne	.+2      	; 0x4e44 <set_temp+0x6e0>
    4e42:	79 c0       	rjmp	.+242    	; 0x4f36 <set_temp+0x7d2>
		{
			LCD_clearScreen();
    4e44:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			LCD_displayString("wrong no");
    4e48:	89 ed       	ldi	r24, 0xD9	; 217
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	a6 e9       	ldi	r26, 0x96	; 150
    4e56:	b3 e4       	ldi	r27, 0x43	; 67
    4e58:	89 8f       	std	Y+25, r24	; 0x19
    4e5a:	9a 8f       	std	Y+26, r25	; 0x1a
    4e5c:	ab 8f       	std	Y+27, r26	; 0x1b
    4e5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e60:	69 8d       	ldd	r22, Y+25	; 0x19
    4e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e68:	20 e0       	ldi	r18, 0x00	; 0
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	4a ef       	ldi	r20, 0xFA	; 250
    4e6e:	54 e4       	ldi	r21, 0x44	; 68
    4e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	8d 8b       	std	Y+21, r24	; 0x15
    4e7a:	9e 8b       	std	Y+22, r25	; 0x16
    4e7c:	af 8b       	std	Y+23, r26	; 0x17
    4e7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e80:	6d 89       	ldd	r22, Y+21	; 0x15
    4e82:	7e 89       	ldd	r23, Y+22	; 0x16
    4e84:	8f 89       	ldd	r24, Y+23	; 0x17
    4e86:	98 8d       	ldd	r25, Y+24	; 0x18
    4e88:	20 e0       	ldi	r18, 0x00	; 0
    4e8a:	30 e0       	ldi	r19, 0x00	; 0
    4e8c:	40 e8       	ldi	r20, 0x80	; 128
    4e8e:	5f e3       	ldi	r21, 0x3F	; 63
    4e90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e94:	88 23       	and	r24, r24
    4e96:	2c f4       	brge	.+10     	; 0x4ea2 <set_temp+0x73e>
		__ticks = 1;
    4e98:	81 e0       	ldi	r24, 0x01	; 1
    4e9a:	90 e0       	ldi	r25, 0x00	; 0
    4e9c:	9c 8b       	std	Y+20, r25	; 0x14
    4e9e:	8b 8b       	std	Y+19, r24	; 0x13
    4ea0:	3f c0       	rjmp	.+126    	; 0x4f20 <set_temp+0x7bc>
	else if (__tmp > 65535)
    4ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    4ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    4ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    4eaa:	20 e0       	ldi	r18, 0x00	; 0
    4eac:	3f ef       	ldi	r19, 0xFF	; 255
    4eae:	4f e7       	ldi	r20, 0x7F	; 127
    4eb0:	57 e4       	ldi	r21, 0x47	; 71
    4eb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eb6:	18 16       	cp	r1, r24
    4eb8:	4c f5       	brge	.+82     	; 0x4f0c <set_temp+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eba:	69 8d       	ldd	r22, Y+25	; 0x19
    4ebc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ec2:	20 e0       	ldi	r18, 0x00	; 0
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
    4ec6:	40 e2       	ldi	r20, 0x20	; 32
    4ec8:	51 e4       	ldi	r21, 0x41	; 65
    4eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ece:	dc 01       	movw	r26, r24
    4ed0:	cb 01       	movw	r24, r22
    4ed2:	bc 01       	movw	r22, r24
    4ed4:	cd 01       	movw	r24, r26
    4ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eda:	dc 01       	movw	r26, r24
    4edc:	cb 01       	movw	r24, r22
    4ede:	9c 8b       	std	Y+20, r25	; 0x14
    4ee0:	8b 8b       	std	Y+19, r24	; 0x13
    4ee2:	0f c0       	rjmp	.+30     	; 0x4f02 <set_temp+0x79e>
    4ee4:	88 ec       	ldi	r24, 0xC8	; 200
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
    4ee8:	9a 8b       	std	Y+18, r25	; 0x12
    4eea:	89 8b       	std	Y+17, r24	; 0x11
    4eec:	89 89       	ldd	r24, Y+17	; 0x11
    4eee:	9a 89       	ldd	r25, Y+18	; 0x12
    4ef0:	01 97       	sbiw	r24, 0x01	; 1
    4ef2:	f1 f7       	brne	.-4      	; 0x4ef0 <set_temp+0x78c>
    4ef4:	9a 8b       	std	Y+18, r25	; 0x12
    4ef6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    4efa:	9c 89       	ldd	r25, Y+20	; 0x14
    4efc:	01 97       	sbiw	r24, 0x01	; 1
    4efe:	9c 8b       	std	Y+20, r25	; 0x14
    4f00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f02:	8b 89       	ldd	r24, Y+19	; 0x13
    4f04:	9c 89       	ldd	r25, Y+20	; 0x14
    4f06:	00 97       	sbiw	r24, 0x00	; 0
    4f08:	69 f7       	brne	.-38     	; 0x4ee4 <set_temp+0x780>
    4f0a:	39 cc       	rjmp	.-1934   	; 0x477e <set_temp+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    4f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    4f10:	8f 89       	ldd	r24, Y+23	; 0x17
    4f12:	98 8d       	ldd	r25, Y+24	; 0x18
    4f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f18:	dc 01       	movw	r26, r24
    4f1a:	cb 01       	movw	r24, r22
    4f1c:	9c 8b       	std	Y+20, r25	; 0x14
    4f1e:	8b 8b       	std	Y+19, r24	; 0x13
    4f20:	8b 89       	ldd	r24, Y+19	; 0x13
    4f22:	9c 89       	ldd	r25, Y+20	; 0x14
    4f24:	98 8b       	std	Y+16, r25	; 0x10
    4f26:	8f 87       	std	Y+15, r24	; 0x0f
    4f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f2a:	98 89       	ldd	r25, Y+16	; 0x10
    4f2c:	01 97       	sbiw	r24, 0x01	; 1
    4f2e:	f1 f7       	brne	.-4      	; 0x4f2c <set_temp+0x7c8>
    4f30:	98 8b       	std	Y+16, r25	; 0x10
    4f32:	8f 87       	std	Y+15, r24	; 0x0f
    4f34:	24 cc       	rjmp	.-1976   	; 0x477e <set_temp+0x1a>
			_delay_ms(LCD_DELAY);
		}
		else
		{
			LCD_clearScreen();
    4f36:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			SPI_send_char(AIR_COND_ON);
    4f3a:	89 e0       	ldi	r24, 0x09	; 9
    4f3c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <SPI_send_char>
			LCD_displayString("on");
    4f40:	8b e7       	ldi	r24, 0x7B	; 123
    4f42:	91 e0       	ldi	r25, 0x01	; 1
    4f44:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	a6 e9       	ldi	r26, 0x96	; 150
    4f4e:	b3 e4       	ldi	r27, 0x43	; 67
    4f50:	8b 87       	std	Y+11, r24	; 0x0b
    4f52:	9c 87       	std	Y+12, r25	; 0x0c
    4f54:	ad 87       	std	Y+13, r26	; 0x0d
    4f56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f58:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f60:	20 e0       	ldi	r18, 0x00	; 0
    4f62:	30 e0       	ldi	r19, 0x00	; 0
    4f64:	4a ef       	ldi	r20, 0xFA	; 250
    4f66:	54 e4       	ldi	r21, 0x44	; 68
    4f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f6c:	dc 01       	movw	r26, r24
    4f6e:	cb 01       	movw	r24, r22
    4f70:	8f 83       	std	Y+7, r24	; 0x07
    4f72:	98 87       	std	Y+8, r25	; 0x08
    4f74:	a9 87       	std	Y+9, r26	; 0x09
    4f76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f78:	6f 81       	ldd	r22, Y+7	; 0x07
    4f7a:	78 85       	ldd	r23, Y+8	; 0x08
    4f7c:	89 85       	ldd	r24, Y+9	; 0x09
    4f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f80:	20 e0       	ldi	r18, 0x00	; 0
    4f82:	30 e0       	ldi	r19, 0x00	; 0
    4f84:	40 e8       	ldi	r20, 0x80	; 128
    4f86:	5f e3       	ldi	r21, 0x3F	; 63
    4f88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f8c:	88 23       	and	r24, r24
    4f8e:	2c f4       	brge	.+10     	; 0x4f9a <set_temp+0x836>
		__ticks = 1;
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	9e 83       	std	Y+6, r25	; 0x06
    4f96:	8d 83       	std	Y+5, r24	; 0x05
    4f98:	3f c0       	rjmp	.+126    	; 0x5018 <set_temp+0x8b4>
	else if (__tmp > 65535)
    4f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4f9c:	78 85       	ldd	r23, Y+8	; 0x08
    4f9e:	89 85       	ldd	r24, Y+9	; 0x09
    4fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fa2:	20 e0       	ldi	r18, 0x00	; 0
    4fa4:	3f ef       	ldi	r19, 0xFF	; 255
    4fa6:	4f e7       	ldi	r20, 0x7F	; 127
    4fa8:	57 e4       	ldi	r21, 0x47	; 71
    4faa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fae:	18 16       	cp	r1, r24
    4fb0:	4c f5       	brge	.+82     	; 0x5004 <set_temp+0x8a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fba:	20 e0       	ldi	r18, 0x00	; 0
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	40 e2       	ldi	r20, 0x20	; 32
    4fc0:	51 e4       	ldi	r21, 0x41	; 65
    4fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc6:	dc 01       	movw	r26, r24
    4fc8:	cb 01       	movw	r24, r22
    4fca:	bc 01       	movw	r22, r24
    4fcc:	cd 01       	movw	r24, r26
    4fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd2:	dc 01       	movw	r26, r24
    4fd4:	cb 01       	movw	r24, r22
    4fd6:	9e 83       	std	Y+6, r25	; 0x06
    4fd8:	8d 83       	std	Y+5, r24	; 0x05
    4fda:	0f c0       	rjmp	.+30     	; 0x4ffa <set_temp+0x896>
    4fdc:	88 ec       	ldi	r24, 0xC8	; 200
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	9c 83       	std	Y+4, r25	; 0x04
    4fe2:	8b 83       	std	Y+3, r24	; 0x03
    4fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe8:	01 97       	sbiw	r24, 0x01	; 1
    4fea:	f1 f7       	brne	.-4      	; 0x4fe8 <set_temp+0x884>
    4fec:	9c 83       	std	Y+4, r25	; 0x04
    4fee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff4:	01 97       	sbiw	r24, 0x01	; 1
    4ff6:	9e 83       	std	Y+6, r25	; 0x06
    4ff8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    4ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    4ffe:	00 97       	sbiw	r24, 0x00	; 0
    5000:	69 f7       	brne	.-38     	; 0x4fdc <set_temp+0x878>
    5002:	14 c0       	rjmp	.+40     	; 0x502c <set_temp+0x8c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5004:	6f 81       	ldd	r22, Y+7	; 0x07
    5006:	78 85       	ldd	r23, Y+8	; 0x08
    5008:	89 85       	ldd	r24, Y+9	; 0x09
    500a:	9a 85       	ldd	r25, Y+10	; 0x0a
    500c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5010:	dc 01       	movw	r26, r24
    5012:	cb 01       	movw	r24, r22
    5014:	9e 83       	std	Y+6, r25	; 0x06
    5016:	8d 83       	std	Y+5, r24	; 0x05
    5018:	8d 81       	ldd	r24, Y+5	; 0x05
    501a:	9e 81       	ldd	r25, Y+6	; 0x06
    501c:	9a 83       	std	Y+2, r25	; 0x02
    501e:	89 83       	std	Y+1, r24	; 0x01
    5020:	89 81       	ldd	r24, Y+1	; 0x01
    5022:	9a 81       	ldd	r25, Y+2	; 0x02
    5024:	01 97       	sbiw	r24, 0x01	; 1
    5026:	f1 f7       	brne	.-4      	; 0x5024 <set_temp+0x8c0>
    5028:	9a 83       	std	Y+2, r25	; 0x02
    502a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(LCD_DELAY);
			break;
		}
	}
}
    502c:	cb 59       	subi	r28, 0x9B	; 155
    502e:	df 4f       	sbci	r29, 0xFF	; 255
    5030:	0f b6       	in	r0, 0x3f	; 63
    5032:	f8 94       	cli
    5034:	de bf       	out	0x3e, r29	; 62
    5036:	0f be       	out	0x3f, r0	; 63
    5038:	cd bf       	out	0x3d, r28	; 61
    503a:	cf 91       	pop	r28
    503c:	df 91       	pop	r29
    503e:	1f 91       	pop	r17
    5040:	0f 91       	pop	r16
    5042:	08 95       	ret

00005044 <room_manager>:



void room_manager(uint8 room_num,char *room,uint8 SPI_on_code,uint8 SPI_off_code){
    5044:	0f 93       	push	r16
    5046:	1f 93       	push	r17
    5048:	df 93       	push	r29
    504a:	cf 93       	push	r28
    504c:	cd b7       	in	r28, 0x3d	; 61
    504e:	de b7       	in	r29, 0x3e	; 62
    5050:	cd 54       	subi	r28, 0x4D	; 77
    5052:	d0 40       	sbci	r29, 0x00	; 0
    5054:	0f b6       	in	r0, 0x3f	; 63
    5056:	f8 94       	cli
    5058:	de bf       	out	0x3e, r29	; 62
    505a:	0f be       	out	0x3f, r0	; 63
    505c:	cd bf       	out	0x3d, r28	; 61
    505e:	fe 01       	movw	r30, r28
    5060:	e9 5b       	subi	r30, 0xB9	; 185
    5062:	ff 4f       	sbci	r31, 0xFF	; 255
    5064:	80 83       	st	Z, r24
    5066:	fe 01       	movw	r30, r28
    5068:	e8 5b       	subi	r30, 0xB8	; 184
    506a:	ff 4f       	sbci	r31, 0xFF	; 255
    506c:	71 83       	std	Z+1, r23	; 0x01
    506e:	60 83       	st	Z, r22
    5070:	fe 01       	movw	r30, r28
    5072:	e6 5b       	subi	r30, 0xB6	; 182
    5074:	ff 4f       	sbci	r31, 0xFF	; 255
    5076:	40 83       	st	Z, r20
    5078:	fe 01       	movw	r30, r28
    507a:	e5 5b       	subi	r30, 0xB5	; 181
    507c:	ff 4f       	sbci	r31, 0xFF	; 255
    507e:	20 83       	st	Z, r18

	while(1){
	LCD_clearScreen();
    5080:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
	LCD_displayString(room);
    5084:	fe 01       	movw	r30, r28
    5086:	e8 5b       	subi	r30, 0xB8	; 184
    5088:	ff 4f       	sbci	r31, 0xFF	; 255
    508a:	80 81       	ld	r24, Z
    508c:	91 81       	ldd	r25, Z+1	; 0x01
    508e:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>

	LCD_displayString(" room");
    5092:	8e e7       	ldi	r24, 0x7E	; 126
    5094:	91 e0       	ldi	r25, 0x01	; 1
    5096:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    509a:	fe 01       	movw	r30, r28
    509c:	ed 5b       	subi	r30, 0xBD	; 189
    509e:	ff 4f       	sbci	r31, 0xFF	; 255
    50a0:	80 e0       	ldi	r24, 0x00	; 0
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	aa ef       	ldi	r26, 0xFA	; 250
    50a6:	b3 e4       	ldi	r27, 0x43	; 67
    50a8:	80 83       	st	Z, r24
    50aa:	91 83       	std	Z+1, r25	; 0x01
    50ac:	a2 83       	std	Z+2, r26	; 0x02
    50ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50b0:	8e 01       	movw	r16, r28
    50b2:	01 5c       	subi	r16, 0xC1	; 193
    50b4:	1f 4f       	sbci	r17, 0xFF	; 255
    50b6:	fe 01       	movw	r30, r28
    50b8:	ed 5b       	subi	r30, 0xBD	; 189
    50ba:	ff 4f       	sbci	r31, 0xFF	; 255
    50bc:	60 81       	ld	r22, Z
    50be:	71 81       	ldd	r23, Z+1	; 0x01
    50c0:	82 81       	ldd	r24, Z+2	; 0x02
    50c2:	93 81       	ldd	r25, Z+3	; 0x03
    50c4:	20 e0       	ldi	r18, 0x00	; 0
    50c6:	30 e0       	ldi	r19, 0x00	; 0
    50c8:	4a ef       	ldi	r20, 0xFA	; 250
    50ca:	54 e4       	ldi	r21, 0x44	; 68
    50cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d0:	dc 01       	movw	r26, r24
    50d2:	cb 01       	movw	r24, r22
    50d4:	f8 01       	movw	r30, r16
    50d6:	80 83       	st	Z, r24
    50d8:	91 83       	std	Z+1, r25	; 0x01
    50da:	a2 83       	std	Z+2, r26	; 0x02
    50dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50de:	fe 01       	movw	r30, r28
    50e0:	ff 96       	adiw	r30, 0x3f	; 63
    50e2:	60 81       	ld	r22, Z
    50e4:	71 81       	ldd	r23, Z+1	; 0x01
    50e6:	82 81       	ldd	r24, Z+2	; 0x02
    50e8:	93 81       	ldd	r25, Z+3	; 0x03
    50ea:	20 e0       	ldi	r18, 0x00	; 0
    50ec:	30 e0       	ldi	r19, 0x00	; 0
    50ee:	40 e8       	ldi	r20, 0x80	; 128
    50f0:	5f e3       	ldi	r21, 0x3F	; 63
    50f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50f6:	88 23       	and	r24, r24
    50f8:	2c f4       	brge	.+10     	; 0x5104 <room_manager+0xc0>
		__ticks = 1;
    50fa:	81 e0       	ldi	r24, 0x01	; 1
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	9e af       	std	Y+62, r25	; 0x3e
    5100:	8d af       	std	Y+61, r24	; 0x3d
    5102:	46 c0       	rjmp	.+140    	; 0x5190 <room_manager+0x14c>
	else if (__tmp > 65535)
    5104:	fe 01       	movw	r30, r28
    5106:	ff 96       	adiw	r30, 0x3f	; 63
    5108:	60 81       	ld	r22, Z
    510a:	71 81       	ldd	r23, Z+1	; 0x01
    510c:	82 81       	ldd	r24, Z+2	; 0x02
    510e:	93 81       	ldd	r25, Z+3	; 0x03
    5110:	20 e0       	ldi	r18, 0x00	; 0
    5112:	3f ef       	ldi	r19, 0xFF	; 255
    5114:	4f e7       	ldi	r20, 0x7F	; 127
    5116:	57 e4       	ldi	r21, 0x47	; 71
    5118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    511c:	18 16       	cp	r1, r24
    511e:	64 f5       	brge	.+88     	; 0x5178 <room_manager+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5120:	fe 01       	movw	r30, r28
    5122:	ed 5b       	subi	r30, 0xBD	; 189
    5124:	ff 4f       	sbci	r31, 0xFF	; 255
    5126:	60 81       	ld	r22, Z
    5128:	71 81       	ldd	r23, Z+1	; 0x01
    512a:	82 81       	ldd	r24, Z+2	; 0x02
    512c:	93 81       	ldd	r25, Z+3	; 0x03
    512e:	20 e0       	ldi	r18, 0x00	; 0
    5130:	30 e0       	ldi	r19, 0x00	; 0
    5132:	40 e2       	ldi	r20, 0x20	; 32
    5134:	51 e4       	ldi	r21, 0x41	; 65
    5136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	bc 01       	movw	r22, r24
    5140:	cd 01       	movw	r24, r26
    5142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5146:	dc 01       	movw	r26, r24
    5148:	cb 01       	movw	r24, r22
    514a:	9e af       	std	Y+62, r25	; 0x3e
    514c:	8d af       	std	Y+61, r24	; 0x3d
    514e:	0f c0       	rjmp	.+30     	; 0x516e <room_manager+0x12a>
    5150:	88 ec       	ldi	r24, 0xC8	; 200
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	9c af       	std	Y+60, r25	; 0x3c
    5156:	8b af       	std	Y+59, r24	; 0x3b
    5158:	8b ad       	ldd	r24, Y+59	; 0x3b
    515a:	9c ad       	ldd	r25, Y+60	; 0x3c
    515c:	01 97       	sbiw	r24, 0x01	; 1
    515e:	f1 f7       	brne	.-4      	; 0x515c <room_manager+0x118>
    5160:	9c af       	std	Y+60, r25	; 0x3c
    5162:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5164:	8d ad       	ldd	r24, Y+61	; 0x3d
    5166:	9e ad       	ldd	r25, Y+62	; 0x3e
    5168:	01 97       	sbiw	r24, 0x01	; 1
    516a:	9e af       	std	Y+62, r25	; 0x3e
    516c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    516e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5170:	9e ad       	ldd	r25, Y+62	; 0x3e
    5172:	00 97       	sbiw	r24, 0x00	; 0
    5174:	69 f7       	brne	.-38     	; 0x5150 <room_manager+0x10c>
    5176:	16 c0       	rjmp	.+44     	; 0x51a4 <room_manager+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5178:	fe 01       	movw	r30, r28
    517a:	ff 96       	adiw	r30, 0x3f	; 63
    517c:	60 81       	ld	r22, Z
    517e:	71 81       	ldd	r23, Z+1	; 0x01
    5180:	82 81       	ldd	r24, Z+2	; 0x02
    5182:	93 81       	ldd	r25, Z+3	; 0x03
    5184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5188:	dc 01       	movw	r26, r24
    518a:	cb 01       	movw	r24, r22
    518c:	9e af       	std	Y+62, r25	; 0x3e
    518e:	8d af       	std	Y+61, r24	; 0x3d
    5190:	8d ad       	ldd	r24, Y+61	; 0x3d
    5192:	9e ad       	ldd	r25, Y+62	; 0x3e
    5194:	9a af       	std	Y+58, r25	; 0x3a
    5196:	89 af       	std	Y+57, r24	; 0x39
    5198:	89 ad       	ldd	r24, Y+57	; 0x39
    519a:	9a ad       	ldd	r25, Y+58	; 0x3a
    519c:	01 97       	sbiw	r24, 0x01	; 1
    519e:	f1 f7       	brne	.-4      	; 0x519c <room_manager+0x158>
    51a0:	9a af       	std	Y+58, r25	; 0x3a
    51a2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
	LCD_goToRowColumn(1,2);
    51a4:	81 e0       	ldi	r24, 0x01	; 1
    51a6:	62 e0       	ldi	r22, 0x02	; 2
    51a8:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
	LCD_displayString("press ");
    51ac:	84 e8       	ldi	r24, 0x84	; 132
    51ae:	91 e0       	ldi	r25, 0x01	; 1
    51b0:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    51b4:	80 e0       	ldi	r24, 0x00	; 0
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	aa ef       	ldi	r26, 0xFA	; 250
    51ba:	b3 e4       	ldi	r27, 0x43	; 67
    51bc:	8d ab       	std	Y+53, r24	; 0x35
    51be:	9e ab       	std	Y+54, r25	; 0x36
    51c0:	af ab       	std	Y+55, r26	; 0x37
    51c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51c4:	6d a9       	ldd	r22, Y+53	; 0x35
    51c6:	7e a9       	ldd	r23, Y+54	; 0x36
    51c8:	8f a9       	ldd	r24, Y+55	; 0x37
    51ca:	98 ad       	ldd	r25, Y+56	; 0x38
    51cc:	20 e0       	ldi	r18, 0x00	; 0
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	4a ef       	ldi	r20, 0xFA	; 250
    51d2:	54 e4       	ldi	r21, 0x44	; 68
    51d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51d8:	dc 01       	movw	r26, r24
    51da:	cb 01       	movw	r24, r22
    51dc:	89 ab       	std	Y+49, r24	; 0x31
    51de:	9a ab       	std	Y+50, r25	; 0x32
    51e0:	ab ab       	std	Y+51, r26	; 0x33
    51e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    51e4:	69 a9       	ldd	r22, Y+49	; 0x31
    51e6:	7a a9       	ldd	r23, Y+50	; 0x32
    51e8:	8b a9       	ldd	r24, Y+51	; 0x33
    51ea:	9c a9       	ldd	r25, Y+52	; 0x34
    51ec:	20 e0       	ldi	r18, 0x00	; 0
    51ee:	30 e0       	ldi	r19, 0x00	; 0
    51f0:	40 e8       	ldi	r20, 0x80	; 128
    51f2:	5f e3       	ldi	r21, 0x3F	; 63
    51f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51f8:	88 23       	and	r24, r24
    51fa:	2c f4       	brge	.+10     	; 0x5206 <room_manager+0x1c2>
		__ticks = 1;
    51fc:	81 e0       	ldi	r24, 0x01	; 1
    51fe:	90 e0       	ldi	r25, 0x00	; 0
    5200:	98 ab       	std	Y+48, r25	; 0x30
    5202:	8f a7       	std	Y+47, r24	; 0x2f
    5204:	3f c0       	rjmp	.+126    	; 0x5284 <room_manager+0x240>
	else if (__tmp > 65535)
    5206:	69 a9       	ldd	r22, Y+49	; 0x31
    5208:	7a a9       	ldd	r23, Y+50	; 0x32
    520a:	8b a9       	ldd	r24, Y+51	; 0x33
    520c:	9c a9       	ldd	r25, Y+52	; 0x34
    520e:	20 e0       	ldi	r18, 0x00	; 0
    5210:	3f ef       	ldi	r19, 0xFF	; 255
    5212:	4f e7       	ldi	r20, 0x7F	; 127
    5214:	57 e4       	ldi	r21, 0x47	; 71
    5216:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    521a:	18 16       	cp	r1, r24
    521c:	4c f5       	brge	.+82     	; 0x5270 <room_manager+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    521e:	6d a9       	ldd	r22, Y+53	; 0x35
    5220:	7e a9       	ldd	r23, Y+54	; 0x36
    5222:	8f a9       	ldd	r24, Y+55	; 0x37
    5224:	98 ad       	ldd	r25, Y+56	; 0x38
    5226:	20 e0       	ldi	r18, 0x00	; 0
    5228:	30 e0       	ldi	r19, 0x00	; 0
    522a:	40 e2       	ldi	r20, 0x20	; 32
    522c:	51 e4       	ldi	r21, 0x41	; 65
    522e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5232:	dc 01       	movw	r26, r24
    5234:	cb 01       	movw	r24, r22
    5236:	bc 01       	movw	r22, r24
    5238:	cd 01       	movw	r24, r26
    523a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    523e:	dc 01       	movw	r26, r24
    5240:	cb 01       	movw	r24, r22
    5242:	98 ab       	std	Y+48, r25	; 0x30
    5244:	8f a7       	std	Y+47, r24	; 0x2f
    5246:	0f c0       	rjmp	.+30     	; 0x5266 <room_manager+0x222>
    5248:	88 ec       	ldi	r24, 0xC8	; 200
    524a:	90 e0       	ldi	r25, 0x00	; 0
    524c:	9e a7       	std	Y+46, r25	; 0x2e
    524e:	8d a7       	std	Y+45, r24	; 0x2d
    5250:	8d a5       	ldd	r24, Y+45	; 0x2d
    5252:	9e a5       	ldd	r25, Y+46	; 0x2e
    5254:	01 97       	sbiw	r24, 0x01	; 1
    5256:	f1 f7       	brne	.-4      	; 0x5254 <room_manager+0x210>
    5258:	9e a7       	std	Y+46, r25	; 0x2e
    525a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    525c:	8f a5       	ldd	r24, Y+47	; 0x2f
    525e:	98 a9       	ldd	r25, Y+48	; 0x30
    5260:	01 97       	sbiw	r24, 0x01	; 1
    5262:	98 ab       	std	Y+48, r25	; 0x30
    5264:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5266:	8f a5       	ldd	r24, Y+47	; 0x2f
    5268:	98 a9       	ldd	r25, Y+48	; 0x30
    526a:	00 97       	sbiw	r24, 0x00	; 0
    526c:	69 f7       	brne	.-38     	; 0x5248 <room_manager+0x204>
    526e:	14 c0       	rjmp	.+40     	; 0x5298 <room_manager+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5270:	69 a9       	ldd	r22, Y+49	; 0x31
    5272:	7a a9       	ldd	r23, Y+50	; 0x32
    5274:	8b a9       	ldd	r24, Y+51	; 0x33
    5276:	9c a9       	ldd	r25, Y+52	; 0x34
    5278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    527c:	dc 01       	movw	r26, r24
    527e:	cb 01       	movw	r24, r22
    5280:	98 ab       	std	Y+48, r25	; 0x30
    5282:	8f a7       	std	Y+47, r24	; 0x2f
    5284:	8f a5       	ldd	r24, Y+47	; 0x2f
    5286:	98 a9       	ldd	r25, Y+48	; 0x30
    5288:	9c a7       	std	Y+44, r25	; 0x2c
    528a:	8b a7       	std	Y+43, r24	; 0x2b
    528c:	8b a5       	ldd	r24, Y+43	; 0x2b
    528e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5290:	01 97       	sbiw	r24, 0x01	; 1
    5292:	f1 f7       	brne	.-4      	; 0x5290 <room_manager+0x24c>
    5294:	9c a7       	std	Y+44, r25	; 0x2c
    5296:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	LCD_intgerToString(room_num);
    5298:	fe 01       	movw	r30, r28
    529a:	e9 5b       	subi	r30, 0xB9	; 185
    529c:	ff 4f       	sbci	r31, 0xFF	; 255
    529e:	80 81       	ld	r24, Z
    52a0:	88 2f       	mov	r24, r24
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_intgerToString>
	if (room_num==3)
    52a8:	fe 01       	movw	r30, r28
    52aa:	e9 5b       	subi	r30, 0xB9	; 185
    52ac:	ff 4f       	sbci	r31, 0xFF	; 255
    52ae:	80 81       	ld	r24, Z
    52b0:	83 30       	cpi	r24, 0x03	; 3
    52b2:	09 f0       	breq	.+2      	; 0x52b6 <room_manager+0x272>
    52b4:	77 c0       	rjmp	.+238    	; 0x53a4 <room_manager+0x360>
	{
		LCD_displayString("  quit0");
    52b6:	8b e8       	ldi	r24, 0x8B	; 139
    52b8:	91 e0       	ldi	r25, 0x01	; 1
    52ba:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    52be:	80 e0       	ldi	r24, 0x00	; 0
    52c0:	90 e0       	ldi	r25, 0x00	; 0
    52c2:	aa ef       	ldi	r26, 0xFA	; 250
    52c4:	b3 e4       	ldi	r27, 0x43	; 67
    52c6:	8f a3       	std	Y+39, r24	; 0x27
    52c8:	98 a7       	std	Y+40, r25	; 0x28
    52ca:	a9 a7       	std	Y+41, r26	; 0x29
    52cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52ce:	6f a1       	ldd	r22, Y+39	; 0x27
    52d0:	78 a5       	ldd	r23, Y+40	; 0x28
    52d2:	89 a5       	ldd	r24, Y+41	; 0x29
    52d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    52d6:	20 e0       	ldi	r18, 0x00	; 0
    52d8:	30 e0       	ldi	r19, 0x00	; 0
    52da:	4a ef       	ldi	r20, 0xFA	; 250
    52dc:	54 e4       	ldi	r21, 0x44	; 68
    52de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52e2:	dc 01       	movw	r26, r24
    52e4:	cb 01       	movw	r24, r22
    52e6:	8b a3       	std	Y+35, r24	; 0x23
    52e8:	9c a3       	std	Y+36, r25	; 0x24
    52ea:	ad a3       	std	Y+37, r26	; 0x25
    52ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    52ee:	6b a1       	ldd	r22, Y+35	; 0x23
    52f0:	7c a1       	ldd	r23, Y+36	; 0x24
    52f2:	8d a1       	ldd	r24, Y+37	; 0x25
    52f4:	9e a1       	ldd	r25, Y+38	; 0x26
    52f6:	20 e0       	ldi	r18, 0x00	; 0
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	40 e8       	ldi	r20, 0x80	; 128
    52fc:	5f e3       	ldi	r21, 0x3F	; 63
    52fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5302:	88 23       	and	r24, r24
    5304:	2c f4       	brge	.+10     	; 0x5310 <room_manager+0x2cc>
		__ticks = 1;
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	9a a3       	std	Y+34, r25	; 0x22
    530c:	89 a3       	std	Y+33, r24	; 0x21
    530e:	3f c0       	rjmp	.+126    	; 0x538e <room_manager+0x34a>
	else if (__tmp > 65535)
    5310:	6b a1       	ldd	r22, Y+35	; 0x23
    5312:	7c a1       	ldd	r23, Y+36	; 0x24
    5314:	8d a1       	ldd	r24, Y+37	; 0x25
    5316:	9e a1       	ldd	r25, Y+38	; 0x26
    5318:	20 e0       	ldi	r18, 0x00	; 0
    531a:	3f ef       	ldi	r19, 0xFF	; 255
    531c:	4f e7       	ldi	r20, 0x7F	; 127
    531e:	57 e4       	ldi	r21, 0x47	; 71
    5320:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5324:	18 16       	cp	r1, r24
    5326:	4c f5       	brge	.+82     	; 0x537a <room_manager+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5328:	6f a1       	ldd	r22, Y+39	; 0x27
    532a:	78 a5       	ldd	r23, Y+40	; 0x28
    532c:	89 a5       	ldd	r24, Y+41	; 0x29
    532e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5330:	20 e0       	ldi	r18, 0x00	; 0
    5332:	30 e0       	ldi	r19, 0x00	; 0
    5334:	40 e2       	ldi	r20, 0x20	; 32
    5336:	51 e4       	ldi	r21, 0x41	; 65
    5338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    533c:	dc 01       	movw	r26, r24
    533e:	cb 01       	movw	r24, r22
    5340:	bc 01       	movw	r22, r24
    5342:	cd 01       	movw	r24, r26
    5344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5348:	dc 01       	movw	r26, r24
    534a:	cb 01       	movw	r24, r22
    534c:	9a a3       	std	Y+34, r25	; 0x22
    534e:	89 a3       	std	Y+33, r24	; 0x21
    5350:	0f c0       	rjmp	.+30     	; 0x5370 <room_manager+0x32c>
    5352:	88 ec       	ldi	r24, 0xC8	; 200
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	98 a3       	std	Y+32, r25	; 0x20
    5358:	8f 8f       	std	Y+31, r24	; 0x1f
    535a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    535c:	98 a1       	ldd	r25, Y+32	; 0x20
    535e:	01 97       	sbiw	r24, 0x01	; 1
    5360:	f1 f7       	brne	.-4      	; 0x535e <room_manager+0x31a>
    5362:	98 a3       	std	Y+32, r25	; 0x20
    5364:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5366:	89 a1       	ldd	r24, Y+33	; 0x21
    5368:	9a a1       	ldd	r25, Y+34	; 0x22
    536a:	01 97       	sbiw	r24, 0x01	; 1
    536c:	9a a3       	std	Y+34, r25	; 0x22
    536e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5370:	89 a1       	ldd	r24, Y+33	; 0x21
    5372:	9a a1       	ldd	r25, Y+34	; 0x22
    5374:	00 97       	sbiw	r24, 0x00	; 0
    5376:	69 f7       	brne	.-38     	; 0x5352 <room_manager+0x30e>
    5378:	8b c0       	rjmp	.+278    	; 0x5490 <room_manager+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    537a:	6b a1       	ldd	r22, Y+35	; 0x23
    537c:	7c a1       	ldd	r23, Y+36	; 0x24
    537e:	8d a1       	ldd	r24, Y+37	; 0x25
    5380:	9e a1       	ldd	r25, Y+38	; 0x26
    5382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5386:	dc 01       	movw	r26, r24
    5388:	cb 01       	movw	r24, r22
    538a:	9a a3       	std	Y+34, r25	; 0x22
    538c:	89 a3       	std	Y+33, r24	; 0x21
    538e:	89 a1       	ldd	r24, Y+33	; 0x21
    5390:	9a a1       	ldd	r25, Y+34	; 0x22
    5392:	9e 8f       	std	Y+30, r25	; 0x1e
    5394:	8d 8f       	std	Y+29, r24	; 0x1d
    5396:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5398:	9e 8d       	ldd	r25, Y+30	; 0x1e
    539a:	01 97       	sbiw	r24, 0x01	; 1
    539c:	f1 f7       	brne	.-4      	; 0x539a <room_manager+0x356>
    539e:	9e 8f       	std	Y+30, r25	; 0x1e
    53a0:	8d 8f       	std	Y+29, r24	; 0x1d
    53a2:	76 c0       	rjmp	.+236    	; 0x5490 <room_manager+0x44c>
		_delay_ms(500);
	}
	else
	{
		LCD_displayString("  next0");
    53a4:	83 e9       	ldi	r24, 0x93	; 147
    53a6:	91 e0       	ldi	r25, 0x01	; 1
    53a8:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    53ac:	80 e0       	ldi	r24, 0x00	; 0
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	aa ef       	ldi	r26, 0xFA	; 250
    53b2:	b3 e4       	ldi	r27, 0x43	; 67
    53b4:	89 8f       	std	Y+25, r24	; 0x19
    53b6:	9a 8f       	std	Y+26, r25	; 0x1a
    53b8:	ab 8f       	std	Y+27, r26	; 0x1b
    53ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53bc:	69 8d       	ldd	r22, Y+25	; 0x19
    53be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53c4:	20 e0       	ldi	r18, 0x00	; 0
    53c6:	30 e0       	ldi	r19, 0x00	; 0
    53c8:	4a ef       	ldi	r20, 0xFA	; 250
    53ca:	54 e4       	ldi	r21, 0x44	; 68
    53cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53d0:	dc 01       	movw	r26, r24
    53d2:	cb 01       	movw	r24, r22
    53d4:	8d 8b       	std	Y+21, r24	; 0x15
    53d6:	9e 8b       	std	Y+22, r25	; 0x16
    53d8:	af 8b       	std	Y+23, r26	; 0x17
    53da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    53dc:	6d 89       	ldd	r22, Y+21	; 0x15
    53de:	7e 89       	ldd	r23, Y+22	; 0x16
    53e0:	8f 89       	ldd	r24, Y+23	; 0x17
    53e2:	98 8d       	ldd	r25, Y+24	; 0x18
    53e4:	20 e0       	ldi	r18, 0x00	; 0
    53e6:	30 e0       	ldi	r19, 0x00	; 0
    53e8:	40 e8       	ldi	r20, 0x80	; 128
    53ea:	5f e3       	ldi	r21, 0x3F	; 63
    53ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53f0:	88 23       	and	r24, r24
    53f2:	2c f4       	brge	.+10     	; 0x53fe <room_manager+0x3ba>
		__ticks = 1;
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	9c 8b       	std	Y+20, r25	; 0x14
    53fa:	8b 8b       	std	Y+19, r24	; 0x13
    53fc:	3f c0       	rjmp	.+126    	; 0x547c <room_manager+0x438>
	else if (__tmp > 65535)
    53fe:	6d 89       	ldd	r22, Y+21	; 0x15
    5400:	7e 89       	ldd	r23, Y+22	; 0x16
    5402:	8f 89       	ldd	r24, Y+23	; 0x17
    5404:	98 8d       	ldd	r25, Y+24	; 0x18
    5406:	20 e0       	ldi	r18, 0x00	; 0
    5408:	3f ef       	ldi	r19, 0xFF	; 255
    540a:	4f e7       	ldi	r20, 0x7F	; 127
    540c:	57 e4       	ldi	r21, 0x47	; 71
    540e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5412:	18 16       	cp	r1, r24
    5414:	4c f5       	brge	.+82     	; 0x5468 <room_manager+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5416:	69 8d       	ldd	r22, Y+25	; 0x19
    5418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    541a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    541c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    541e:	20 e0       	ldi	r18, 0x00	; 0
    5420:	30 e0       	ldi	r19, 0x00	; 0
    5422:	40 e2       	ldi	r20, 0x20	; 32
    5424:	51 e4       	ldi	r21, 0x41	; 65
    5426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    542a:	dc 01       	movw	r26, r24
    542c:	cb 01       	movw	r24, r22
    542e:	bc 01       	movw	r22, r24
    5430:	cd 01       	movw	r24, r26
    5432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5436:	dc 01       	movw	r26, r24
    5438:	cb 01       	movw	r24, r22
    543a:	9c 8b       	std	Y+20, r25	; 0x14
    543c:	8b 8b       	std	Y+19, r24	; 0x13
    543e:	0f c0       	rjmp	.+30     	; 0x545e <room_manager+0x41a>
    5440:	88 ec       	ldi	r24, 0xC8	; 200
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	9a 8b       	std	Y+18, r25	; 0x12
    5446:	89 8b       	std	Y+17, r24	; 0x11
    5448:	89 89       	ldd	r24, Y+17	; 0x11
    544a:	9a 89       	ldd	r25, Y+18	; 0x12
    544c:	01 97       	sbiw	r24, 0x01	; 1
    544e:	f1 f7       	brne	.-4      	; 0x544c <room_manager+0x408>
    5450:	9a 8b       	std	Y+18, r25	; 0x12
    5452:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5454:	8b 89       	ldd	r24, Y+19	; 0x13
    5456:	9c 89       	ldd	r25, Y+20	; 0x14
    5458:	01 97       	sbiw	r24, 0x01	; 1
    545a:	9c 8b       	std	Y+20, r25	; 0x14
    545c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    545e:	8b 89       	ldd	r24, Y+19	; 0x13
    5460:	9c 89       	ldd	r25, Y+20	; 0x14
    5462:	00 97       	sbiw	r24, 0x00	; 0
    5464:	69 f7       	brne	.-38     	; 0x5440 <room_manager+0x3fc>
    5466:	14 c0       	rjmp	.+40     	; 0x5490 <room_manager+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5468:	6d 89       	ldd	r22, Y+21	; 0x15
    546a:	7e 89       	ldd	r23, Y+22	; 0x16
    546c:	8f 89       	ldd	r24, Y+23	; 0x17
    546e:	98 8d       	ldd	r25, Y+24	; 0x18
    5470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5474:	dc 01       	movw	r26, r24
    5476:	cb 01       	movw	r24, r22
    5478:	9c 8b       	std	Y+20, r25	; 0x14
    547a:	8b 8b       	std	Y+19, r24	; 0x13
    547c:	8b 89       	ldd	r24, Y+19	; 0x13
    547e:	9c 89       	ldd	r25, Y+20	; 0x14
    5480:	98 8b       	std	Y+16, r25	; 0x10
    5482:	8f 87       	std	Y+15, r24	; 0x0f
    5484:	8f 85       	ldd	r24, Y+15	; 0x0f
    5486:	98 89       	ldd	r25, Y+16	; 0x10
    5488:	01 97       	sbiw	r24, 0x01	; 1
    548a:	f1 f7       	brne	.-4      	; 0x5488 <room_manager+0x444>
    548c:	98 8b       	std	Y+16, r25	; 0x10
    548e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
	}
	if(KeyPad_getPressedKey()==room_num)
    5490:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    5494:	fe 01       	movw	r30, r28
    5496:	e9 5b       	subi	r30, 0xB9	; 185
    5498:	ff 4f       	sbci	r31, 0xFF	; 255
    549a:	90 81       	ld	r25, Z
    549c:	89 17       	cp	r24, r25
    549e:	09 f0       	breq	.+2      	; 0x54a2 <room_manager+0x45e>
    54a0:	56 c0       	rjmp	.+172    	; 0x554e <room_manager+0x50a>
	{
		if(room_num==1)    //living room
    54a2:	fe 01       	movw	r30, r28
    54a4:	e9 5b       	subi	r30, 0xB9	; 185
    54a6:	ff 4f       	sbci	r31, 0xFF	; 255
    54a8:	80 81       	ld	r24, Z
    54aa:	81 30       	cpi	r24, 0x01	; 1
    54ac:	81 f5       	brne	.+96     	; 0x550e <room_manager+0x4ca>
		{
			device_manager(room_num,room,"led",SPI_on_code,SPI_off_code);
    54ae:	ce 01       	movw	r24, r28
    54b0:	89 5b       	subi	r24, 0xB9	; 185
    54b2:	9f 4f       	sbci	r25, 0xFF	; 255
    54b4:	fe 01       	movw	r30, r28
    54b6:	e8 5b       	subi	r30, 0xB8	; 184
    54b8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ba:	20 81       	ld	r18, Z
    54bc:	31 81       	ldd	r19, Z+1	; 0x01
    54be:	4b e9       	ldi	r20, 0x9B	; 155
    54c0:	51 e0       	ldi	r21, 0x01	; 1
    54c2:	be 01       	movw	r22, r28
    54c4:	66 5b       	subi	r22, 0xB6	; 182
    54c6:	7f 4f       	sbci	r23, 0xFF	; 255
    54c8:	2e 96       	adiw	r28, 0x0e	; 14
    54ca:	7f af       	std	Y+63, r23	; 0x3f
    54cc:	6e af       	std	Y+62, r22	; 0x3e
    54ce:	2e 97       	sbiw	r28, 0x0e	; 14
    54d0:	de 01       	movw	r26, r28
    54d2:	a5 5b       	subi	r26, 0xB5	; 181
    54d4:	bf 4f       	sbci	r27, 0xFF	; 255
    54d6:	fc 01       	movw	r30, r24
    54d8:	80 81       	ld	r24, Z
    54da:	b9 01       	movw	r22, r18
    54dc:	2e 96       	adiw	r28, 0x0e	; 14
    54de:	ee ad       	ldd	r30, Y+62	; 0x3e
    54e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    54e2:	2e 97       	sbiw	r28, 0x0e	; 14
    54e4:	20 81       	ld	r18, Z
    54e6:	0c 91       	ld	r16, X
    54e8:	0e 94 31 2b 	call	0x5662	; 0x5662 <device_manager>
			device_manager(room_num,room,"TV",TV_ON, TV_OFF);
    54ec:	de 01       	movw	r26, r28
    54ee:	a9 5b       	subi	r26, 0xB9	; 185
    54f0:	bf 4f       	sbci	r27, 0xFF	; 255
    54f2:	fe 01       	movw	r30, r28
    54f4:	e8 5b       	subi	r30, 0xB8	; 184
    54f6:	ff 4f       	sbci	r31, 0xFF	; 255
    54f8:	20 81       	ld	r18, Z
    54fa:	31 81       	ldd	r19, Z+1	; 0x01
    54fc:	4f e9       	ldi	r20, 0x9F	; 159
    54fe:	51 e0       	ldi	r21, 0x01	; 1
    5500:	8c 91       	ld	r24, X
    5502:	b9 01       	movw	r22, r18
    5504:	23 e0       	ldi	r18, 0x03	; 3
    5506:	04 e0       	ldi	r16, 0x04	; 4
    5508:	0e 94 31 2b 	call	0x5662	; 0x5662 <device_manager>
    550c:	b9 cd       	rjmp	.-1166   	; 0x5080 <room_manager+0x3c>
		}
		else{
			device_manager(room_num,room,"led",SPI_on_code,SPI_off_code);
    550e:	ce 01       	movw	r24, r28
    5510:	89 5b       	subi	r24, 0xB9	; 185
    5512:	9f 4f       	sbci	r25, 0xFF	; 255
    5514:	fe 01       	movw	r30, r28
    5516:	e8 5b       	subi	r30, 0xB8	; 184
    5518:	ff 4f       	sbci	r31, 0xFF	; 255
    551a:	20 81       	ld	r18, Z
    551c:	31 81       	ldd	r19, Z+1	; 0x01
    551e:	4b e9       	ldi	r20, 0x9B	; 155
    5520:	51 e0       	ldi	r21, 0x01	; 1
    5522:	be 01       	movw	r22, r28
    5524:	66 5b       	subi	r22, 0xB6	; 182
    5526:	7f 4f       	sbci	r23, 0xFF	; 255
    5528:	2e 96       	adiw	r28, 0x0e	; 14
    552a:	7f af       	std	Y+63, r23	; 0x3f
    552c:	6e af       	std	Y+62, r22	; 0x3e
    552e:	2e 97       	sbiw	r28, 0x0e	; 14
    5530:	de 01       	movw	r26, r28
    5532:	a5 5b       	subi	r26, 0xB5	; 181
    5534:	bf 4f       	sbci	r27, 0xFF	; 255
    5536:	fc 01       	movw	r30, r24
    5538:	80 81       	ld	r24, Z
    553a:	b9 01       	movw	r22, r18
    553c:	2e 96       	adiw	r28, 0x0e	; 14
    553e:	ee ad       	ldd	r30, Y+62	; 0x3e
    5540:	ff ad       	ldd	r31, Y+63	; 0x3f
    5542:	2e 97       	sbiw	r28, 0x0e	; 14
    5544:	20 81       	ld	r18, Z
    5546:	0c 91       	ld	r16, X
    5548:	0e 94 31 2b 	call	0x5662	; 0x5662 <device_manager>
    554c:	99 cd       	rjmp	.-1230   	; 0x5080 <room_manager+0x3c>
		}
	}
	else if(KeyPad_getPressedKey()!=0)
    554e:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    5552:	88 23       	and	r24, r24
    5554:	09 f4       	brne	.+2      	; 0x5558 <room_manager+0x514>
    5556:	79 c0       	rjmp	.+242    	; 0x564a <room_manager+0x606>
	{
		LCD_clearScreen();
    5558:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
		LCD_displayString("wrong no");
    555c:	89 ed       	ldi	r24, 0xD9	; 217
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    5564:	80 e0       	ldi	r24, 0x00	; 0
    5566:	90 e0       	ldi	r25, 0x00	; 0
    5568:	a6 e9       	ldi	r26, 0x96	; 150
    556a:	b3 e4       	ldi	r27, 0x43	; 67
    556c:	8b 87       	std	Y+11, r24	; 0x0b
    556e:	9c 87       	std	Y+12, r25	; 0x0c
    5570:	ad 87       	std	Y+13, r26	; 0x0d
    5572:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5574:	6b 85       	ldd	r22, Y+11	; 0x0b
    5576:	7c 85       	ldd	r23, Y+12	; 0x0c
    5578:	8d 85       	ldd	r24, Y+13	; 0x0d
    557a:	9e 85       	ldd	r25, Y+14	; 0x0e
    557c:	20 e0       	ldi	r18, 0x00	; 0
    557e:	30 e0       	ldi	r19, 0x00	; 0
    5580:	4a ef       	ldi	r20, 0xFA	; 250
    5582:	54 e4       	ldi	r21, 0x44	; 68
    5584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5588:	dc 01       	movw	r26, r24
    558a:	cb 01       	movw	r24, r22
    558c:	8f 83       	std	Y+7, r24	; 0x07
    558e:	98 87       	std	Y+8, r25	; 0x08
    5590:	a9 87       	std	Y+9, r26	; 0x09
    5592:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5594:	6f 81       	ldd	r22, Y+7	; 0x07
    5596:	78 85       	ldd	r23, Y+8	; 0x08
    5598:	89 85       	ldd	r24, Y+9	; 0x09
    559a:	9a 85       	ldd	r25, Y+10	; 0x0a
    559c:	20 e0       	ldi	r18, 0x00	; 0
    559e:	30 e0       	ldi	r19, 0x00	; 0
    55a0:	40 e8       	ldi	r20, 0x80	; 128
    55a2:	5f e3       	ldi	r21, 0x3F	; 63
    55a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55a8:	88 23       	and	r24, r24
    55aa:	2c f4       	brge	.+10     	; 0x55b6 <room_manager+0x572>
		__ticks = 1;
    55ac:	81 e0       	ldi	r24, 0x01	; 1
    55ae:	90 e0       	ldi	r25, 0x00	; 0
    55b0:	9e 83       	std	Y+6, r25	; 0x06
    55b2:	8d 83       	std	Y+5, r24	; 0x05
    55b4:	3f c0       	rjmp	.+126    	; 0x5634 <room_manager+0x5f0>
	else if (__tmp > 65535)
    55b6:	6f 81       	ldd	r22, Y+7	; 0x07
    55b8:	78 85       	ldd	r23, Y+8	; 0x08
    55ba:	89 85       	ldd	r24, Y+9	; 0x09
    55bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    55be:	20 e0       	ldi	r18, 0x00	; 0
    55c0:	3f ef       	ldi	r19, 0xFF	; 255
    55c2:	4f e7       	ldi	r20, 0x7F	; 127
    55c4:	57 e4       	ldi	r21, 0x47	; 71
    55c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55ca:	18 16       	cp	r1, r24
    55cc:	4c f5       	brge	.+82     	; 0x5620 <room_manager+0x5dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    55d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    55d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    55d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	40 e2       	ldi	r20, 0x20	; 32
    55dc:	51 e4       	ldi	r21, 0x41	; 65
    55de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e2:	dc 01       	movw	r26, r24
    55e4:	cb 01       	movw	r24, r22
    55e6:	bc 01       	movw	r22, r24
    55e8:	cd 01       	movw	r24, r26
    55ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ee:	dc 01       	movw	r26, r24
    55f0:	cb 01       	movw	r24, r22
    55f2:	9e 83       	std	Y+6, r25	; 0x06
    55f4:	8d 83       	std	Y+5, r24	; 0x05
    55f6:	0f c0       	rjmp	.+30     	; 0x5616 <room_manager+0x5d2>
    55f8:	88 ec       	ldi	r24, 0xC8	; 200
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	9c 83       	std	Y+4, r25	; 0x04
    55fe:	8b 83       	std	Y+3, r24	; 0x03
    5600:	8b 81       	ldd	r24, Y+3	; 0x03
    5602:	9c 81       	ldd	r25, Y+4	; 0x04
    5604:	01 97       	sbiw	r24, 0x01	; 1
    5606:	f1 f7       	brne	.-4      	; 0x5604 <room_manager+0x5c0>
    5608:	9c 83       	std	Y+4, r25	; 0x04
    560a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    560c:	8d 81       	ldd	r24, Y+5	; 0x05
    560e:	9e 81       	ldd	r25, Y+6	; 0x06
    5610:	01 97       	sbiw	r24, 0x01	; 1
    5612:	9e 83       	std	Y+6, r25	; 0x06
    5614:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5616:	8d 81       	ldd	r24, Y+5	; 0x05
    5618:	9e 81       	ldd	r25, Y+6	; 0x06
    561a:	00 97       	sbiw	r24, 0x00	; 0
    561c:	69 f7       	brne	.-38     	; 0x55f8 <room_manager+0x5b4>
    561e:	30 cd       	rjmp	.-1440   	; 0x5080 <room_manager+0x3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5620:	6f 81       	ldd	r22, Y+7	; 0x07
    5622:	78 85       	ldd	r23, Y+8	; 0x08
    5624:	89 85       	ldd	r24, Y+9	; 0x09
    5626:	9a 85       	ldd	r25, Y+10	; 0x0a
    5628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    562c:	dc 01       	movw	r26, r24
    562e:	cb 01       	movw	r24, r22
    5630:	9e 83       	std	Y+6, r25	; 0x06
    5632:	8d 83       	std	Y+5, r24	; 0x05
    5634:	8d 81       	ldd	r24, Y+5	; 0x05
    5636:	9e 81       	ldd	r25, Y+6	; 0x06
    5638:	9a 83       	std	Y+2, r25	; 0x02
    563a:	89 83       	std	Y+1, r24	; 0x01
    563c:	89 81       	ldd	r24, Y+1	; 0x01
    563e:	9a 81       	ldd	r25, Y+2	; 0x02
    5640:	01 97       	sbiw	r24, 0x01	; 1
    5642:	f1 f7       	brne	.-4      	; 0x5640 <room_manager+0x5fc>
    5644:	9a 83       	std	Y+2, r25	; 0x02
    5646:	89 83       	std	Y+1, r24	; 0x01
    5648:	1b cd       	rjmp	.-1482   	; 0x5080 <room_manager+0x3c>
		_delay_ms(LCD_DELAY);
	}
	else{break;}

	}
}
    564a:	c3 5b       	subi	r28, 0xB3	; 179
    564c:	df 4f       	sbci	r29, 0xFF	; 255
    564e:	0f b6       	in	r0, 0x3f	; 63
    5650:	f8 94       	cli
    5652:	de bf       	out	0x3e, r29	; 62
    5654:	0f be       	out	0x3f, r0	; 63
    5656:	cd bf       	out	0x3d, r28	; 61
    5658:	cf 91       	pop	r28
    565a:	df 91       	pop	r29
    565c:	1f 91       	pop	r17
    565e:	0f 91       	pop	r16
    5660:	08 95       	ret

00005662 <device_manager>:

void device_manager(uint8 room_num,char *room,char *device,uint8 SPI_on_code,uint8 SPI_off_code){
    5662:	0f 93       	push	r16
    5664:	df 93       	push	r29
    5666:	cf 93       	push	r28
    5668:	cd b7       	in	r28, 0x3d	; 61
    566a:	de b7       	in	r29, 0x3e	; 62
    566c:	ef 97       	sbiw	r28, 0x3f	; 63
    566e:	0f b6       	in	r0, 0x3f	; 63
    5670:	f8 94       	cli
    5672:	de bf       	out	0x3e, r29	; 62
    5674:	0f be       	out	0x3f, r0	; 63
    5676:	cd bf       	out	0x3d, r28	; 61
    5678:	89 af       	std	Y+57, r24	; 0x39
    567a:	7b af       	std	Y+59, r23	; 0x3b
    567c:	6a af       	std	Y+58, r22	; 0x3a
    567e:	5d af       	std	Y+61, r21	; 0x3d
    5680:	4c af       	std	Y+60, r20	; 0x3c
    5682:	2e af       	std	Y+62, r18	; 0x3e
    5684:	0f af       	std	Y+63, r16	; 0x3f
		LCD_clearScreen();
    5686:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
		LCD_displayString(room);
    568a:	8a ad       	ldd	r24, Y+58	; 0x3a
    568c:	9b ad       	ldd	r25, Y+59	; 0x3b
    568e:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
		LCD_displayString(" room");
    5692:	8e e7       	ldi	r24, 0x7E	; 126
    5694:	91 e0       	ldi	r25, 0x01	; 1
    5696:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
		LCD_goToRowColumn(1,2);
    569a:	81 e0       	ldi	r24, 0x01	; 1
    569c:	62 e0       	ldi	r22, 0x02	; 2
    569e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_goToRowColumn>
		LCD_displayString(device);
    56a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    56a4:	9d ad       	ldd	r25, Y+61	; 0x3d
    56a6:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
		LCD_displayString(": on1 off2");
    56aa:	82 ea       	ldi	r24, 0xA2	; 162
    56ac:	91 e0       	ldi	r25, 0x01	; 1
    56ae:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    56b2:	80 e0       	ldi	r24, 0x00	; 0
    56b4:	90 e0       	ldi	r25, 0x00	; 0
    56b6:	aa ef       	ldi	r26, 0xFA	; 250
    56b8:	b3 e4       	ldi	r27, 0x43	; 67
    56ba:	8d ab       	std	Y+53, r24	; 0x35
    56bc:	9e ab       	std	Y+54, r25	; 0x36
    56be:	af ab       	std	Y+55, r26	; 0x37
    56c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56c2:	6d a9       	ldd	r22, Y+53	; 0x35
    56c4:	7e a9       	ldd	r23, Y+54	; 0x36
    56c6:	8f a9       	ldd	r24, Y+55	; 0x37
    56c8:	98 ad       	ldd	r25, Y+56	; 0x38
    56ca:	20 e0       	ldi	r18, 0x00	; 0
    56cc:	30 e0       	ldi	r19, 0x00	; 0
    56ce:	4a ef       	ldi	r20, 0xFA	; 250
    56d0:	54 e4       	ldi	r21, 0x44	; 68
    56d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56d6:	dc 01       	movw	r26, r24
    56d8:	cb 01       	movw	r24, r22
    56da:	89 ab       	std	Y+49, r24	; 0x31
    56dc:	9a ab       	std	Y+50, r25	; 0x32
    56de:	ab ab       	std	Y+51, r26	; 0x33
    56e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    56e2:	69 a9       	ldd	r22, Y+49	; 0x31
    56e4:	7a a9       	ldd	r23, Y+50	; 0x32
    56e6:	8b a9       	ldd	r24, Y+51	; 0x33
    56e8:	9c a9       	ldd	r25, Y+52	; 0x34
    56ea:	20 e0       	ldi	r18, 0x00	; 0
    56ec:	30 e0       	ldi	r19, 0x00	; 0
    56ee:	40 e8       	ldi	r20, 0x80	; 128
    56f0:	5f e3       	ldi	r21, 0x3F	; 63
    56f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56f6:	88 23       	and	r24, r24
    56f8:	2c f4       	brge	.+10     	; 0x5704 <device_manager+0xa2>
		__ticks = 1;
    56fa:	81 e0       	ldi	r24, 0x01	; 1
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	98 ab       	std	Y+48, r25	; 0x30
    5700:	8f a7       	std	Y+47, r24	; 0x2f
    5702:	3f c0       	rjmp	.+126    	; 0x5782 <device_manager+0x120>
	else if (__tmp > 65535)
    5704:	69 a9       	ldd	r22, Y+49	; 0x31
    5706:	7a a9       	ldd	r23, Y+50	; 0x32
    5708:	8b a9       	ldd	r24, Y+51	; 0x33
    570a:	9c a9       	ldd	r25, Y+52	; 0x34
    570c:	20 e0       	ldi	r18, 0x00	; 0
    570e:	3f ef       	ldi	r19, 0xFF	; 255
    5710:	4f e7       	ldi	r20, 0x7F	; 127
    5712:	57 e4       	ldi	r21, 0x47	; 71
    5714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5718:	18 16       	cp	r1, r24
    571a:	4c f5       	brge	.+82     	; 0x576e <device_manager+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    571c:	6d a9       	ldd	r22, Y+53	; 0x35
    571e:	7e a9       	ldd	r23, Y+54	; 0x36
    5720:	8f a9       	ldd	r24, Y+55	; 0x37
    5722:	98 ad       	ldd	r25, Y+56	; 0x38
    5724:	20 e0       	ldi	r18, 0x00	; 0
    5726:	30 e0       	ldi	r19, 0x00	; 0
    5728:	40 e2       	ldi	r20, 0x20	; 32
    572a:	51 e4       	ldi	r21, 0x41	; 65
    572c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5730:	dc 01       	movw	r26, r24
    5732:	cb 01       	movw	r24, r22
    5734:	bc 01       	movw	r22, r24
    5736:	cd 01       	movw	r24, r26
    5738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    573c:	dc 01       	movw	r26, r24
    573e:	cb 01       	movw	r24, r22
    5740:	98 ab       	std	Y+48, r25	; 0x30
    5742:	8f a7       	std	Y+47, r24	; 0x2f
    5744:	0f c0       	rjmp	.+30     	; 0x5764 <device_manager+0x102>
    5746:	88 ec       	ldi	r24, 0xC8	; 200
    5748:	90 e0       	ldi	r25, 0x00	; 0
    574a:	9e a7       	std	Y+46, r25	; 0x2e
    574c:	8d a7       	std	Y+45, r24	; 0x2d
    574e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5750:	9e a5       	ldd	r25, Y+46	; 0x2e
    5752:	01 97       	sbiw	r24, 0x01	; 1
    5754:	f1 f7       	brne	.-4      	; 0x5752 <device_manager+0xf0>
    5756:	9e a7       	std	Y+46, r25	; 0x2e
    5758:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    575a:	8f a5       	ldd	r24, Y+47	; 0x2f
    575c:	98 a9       	ldd	r25, Y+48	; 0x30
    575e:	01 97       	sbiw	r24, 0x01	; 1
    5760:	98 ab       	std	Y+48, r25	; 0x30
    5762:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5764:	8f a5       	ldd	r24, Y+47	; 0x2f
    5766:	98 a9       	ldd	r25, Y+48	; 0x30
    5768:	00 97       	sbiw	r24, 0x00	; 0
    576a:	69 f7       	brne	.-38     	; 0x5746 <device_manager+0xe4>
    576c:	14 c0       	rjmp	.+40     	; 0x5796 <device_manager+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    576e:	69 a9       	ldd	r22, Y+49	; 0x31
    5770:	7a a9       	ldd	r23, Y+50	; 0x32
    5772:	8b a9       	ldd	r24, Y+51	; 0x33
    5774:	9c a9       	ldd	r25, Y+52	; 0x34
    5776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    577a:	dc 01       	movw	r26, r24
    577c:	cb 01       	movw	r24, r22
    577e:	98 ab       	std	Y+48, r25	; 0x30
    5780:	8f a7       	std	Y+47, r24	; 0x2f
    5782:	8f a5       	ldd	r24, Y+47	; 0x2f
    5784:	98 a9       	ldd	r25, Y+48	; 0x30
    5786:	9c a7       	std	Y+44, r25	; 0x2c
    5788:	8b a7       	std	Y+43, r24	; 0x2b
    578a:	8b a5       	ldd	r24, Y+43	; 0x2b
    578c:	9c a5       	ldd	r25, Y+44	; 0x2c
    578e:	01 97       	sbiw	r24, 0x01	; 1
    5790:	f1 f7       	brne	.-4      	; 0x578e <device_manager+0x12c>
    5792:	9c a7       	std	Y+44, r25	; 0x2c
    5794:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		if(KeyPad_getPressedKey()==1)
    5796:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    579a:	81 30       	cpi	r24, 0x01	; 1
    579c:	09 f0       	breq	.+2      	; 0x57a0 <device_manager+0x13e>
    579e:	7c c0       	rjmp	.+248    	; 0x5898 <device_manager+0x236>
		{
			LCD_clearScreen();
    57a0:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			SPI_send_char(SPI_on_code);
    57a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    57a6:	0e 94 fe 12 	call	0x25fc	; 0x25fc <SPI_send_char>
			LCD_displayString("on");
    57aa:	8b e7       	ldi	r24, 0x7B	; 123
    57ac:	91 e0       	ldi	r25, 0x01	; 1
    57ae:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    57b2:	80 e0       	ldi	r24, 0x00	; 0
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	a6 e9       	ldi	r26, 0x96	; 150
    57b8:	b3 e4       	ldi	r27, 0x43	; 67
    57ba:	8f a3       	std	Y+39, r24	; 0x27
    57bc:	98 a7       	std	Y+40, r25	; 0x28
    57be:	a9 a7       	std	Y+41, r26	; 0x29
    57c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57c2:	6f a1       	ldd	r22, Y+39	; 0x27
    57c4:	78 a5       	ldd	r23, Y+40	; 0x28
    57c6:	89 a5       	ldd	r24, Y+41	; 0x29
    57c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    57ca:	20 e0       	ldi	r18, 0x00	; 0
    57cc:	30 e0       	ldi	r19, 0x00	; 0
    57ce:	4a ef       	ldi	r20, 0xFA	; 250
    57d0:	54 e4       	ldi	r21, 0x44	; 68
    57d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57d6:	dc 01       	movw	r26, r24
    57d8:	cb 01       	movw	r24, r22
    57da:	8b a3       	std	Y+35, r24	; 0x23
    57dc:	9c a3       	std	Y+36, r25	; 0x24
    57de:	ad a3       	std	Y+37, r26	; 0x25
    57e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    57e2:	6b a1       	ldd	r22, Y+35	; 0x23
    57e4:	7c a1       	ldd	r23, Y+36	; 0x24
    57e6:	8d a1       	ldd	r24, Y+37	; 0x25
    57e8:	9e a1       	ldd	r25, Y+38	; 0x26
    57ea:	20 e0       	ldi	r18, 0x00	; 0
    57ec:	30 e0       	ldi	r19, 0x00	; 0
    57ee:	40 e8       	ldi	r20, 0x80	; 128
    57f0:	5f e3       	ldi	r21, 0x3F	; 63
    57f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57f6:	88 23       	and	r24, r24
    57f8:	2c f4       	brge	.+10     	; 0x5804 <device_manager+0x1a2>
		__ticks = 1;
    57fa:	81 e0       	ldi	r24, 0x01	; 1
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	9a a3       	std	Y+34, r25	; 0x22
    5800:	89 a3       	std	Y+33, r24	; 0x21
    5802:	3f c0       	rjmp	.+126    	; 0x5882 <device_manager+0x220>
	else if (__tmp > 65535)
    5804:	6b a1       	ldd	r22, Y+35	; 0x23
    5806:	7c a1       	ldd	r23, Y+36	; 0x24
    5808:	8d a1       	ldd	r24, Y+37	; 0x25
    580a:	9e a1       	ldd	r25, Y+38	; 0x26
    580c:	20 e0       	ldi	r18, 0x00	; 0
    580e:	3f ef       	ldi	r19, 0xFF	; 255
    5810:	4f e7       	ldi	r20, 0x7F	; 127
    5812:	57 e4       	ldi	r21, 0x47	; 71
    5814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5818:	18 16       	cp	r1, r24
    581a:	4c f5       	brge	.+82     	; 0x586e <device_manager+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    581c:	6f a1       	ldd	r22, Y+39	; 0x27
    581e:	78 a5       	ldd	r23, Y+40	; 0x28
    5820:	89 a5       	ldd	r24, Y+41	; 0x29
    5822:	9a a5       	ldd	r25, Y+42	; 0x2a
    5824:	20 e0       	ldi	r18, 0x00	; 0
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	40 e2       	ldi	r20, 0x20	; 32
    582a:	51 e4       	ldi	r21, 0x41	; 65
    582c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5830:	dc 01       	movw	r26, r24
    5832:	cb 01       	movw	r24, r22
    5834:	bc 01       	movw	r22, r24
    5836:	cd 01       	movw	r24, r26
    5838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	9a a3       	std	Y+34, r25	; 0x22
    5842:	89 a3       	std	Y+33, r24	; 0x21
    5844:	0f c0       	rjmp	.+30     	; 0x5864 <device_manager+0x202>
    5846:	88 ec       	ldi	r24, 0xC8	; 200
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	98 a3       	std	Y+32, r25	; 0x20
    584c:	8f 8f       	std	Y+31, r24	; 0x1f
    584e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5850:	98 a1       	ldd	r25, Y+32	; 0x20
    5852:	01 97       	sbiw	r24, 0x01	; 1
    5854:	f1 f7       	brne	.-4      	; 0x5852 <device_manager+0x1f0>
    5856:	98 a3       	std	Y+32, r25	; 0x20
    5858:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    585a:	89 a1       	ldd	r24, Y+33	; 0x21
    585c:	9a a1       	ldd	r25, Y+34	; 0x22
    585e:	01 97       	sbiw	r24, 0x01	; 1
    5860:	9a a3       	std	Y+34, r25	; 0x22
    5862:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5864:	89 a1       	ldd	r24, Y+33	; 0x21
    5866:	9a a1       	ldd	r25, Y+34	; 0x22
    5868:	00 97       	sbiw	r24, 0x00	; 0
    586a:	69 f7       	brne	.-38     	; 0x5846 <device_manager+0x1e4>
    586c:	0e c1       	rjmp	.+540    	; 0x5a8a <device_manager+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    586e:	6b a1       	ldd	r22, Y+35	; 0x23
    5870:	7c a1       	ldd	r23, Y+36	; 0x24
    5872:	8d a1       	ldd	r24, Y+37	; 0x25
    5874:	9e a1       	ldd	r25, Y+38	; 0x26
    5876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    587a:	dc 01       	movw	r26, r24
    587c:	cb 01       	movw	r24, r22
    587e:	9a a3       	std	Y+34, r25	; 0x22
    5880:	89 a3       	std	Y+33, r24	; 0x21
    5882:	89 a1       	ldd	r24, Y+33	; 0x21
    5884:	9a a1       	ldd	r25, Y+34	; 0x22
    5886:	9e 8f       	std	Y+30, r25	; 0x1e
    5888:	8d 8f       	std	Y+29, r24	; 0x1d
    588a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    588c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    588e:	01 97       	sbiw	r24, 0x01	; 1
    5890:	f1 f7       	brne	.-4      	; 0x588e <device_manager+0x22c>
    5892:	9e 8f       	std	Y+30, r25	; 0x1e
    5894:	8d 8f       	std	Y+29, r24	; 0x1d
    5896:	f9 c0       	rjmp	.+498    	; 0x5a8a <device_manager+0x428>
			_delay_ms(LCD_DELAY);
		}
		else if(KeyPad_getPressedKey()==2)
    5898:	0e 94 57 13 	call	0x26ae	; 0x26ae <KeyPad_getPressedKey>
    589c:	82 30       	cpi	r24, 0x02	; 2
    589e:	09 f0       	breq	.+2      	; 0x58a2 <device_manager+0x240>
    58a0:	7c c0       	rjmp	.+248    	; 0x599a <device_manager+0x338>
		{
			LCD_clearScreen();
    58a2:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			SPI_send_char(SPI_off_code);
    58a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    58a8:	0e 94 fe 12 	call	0x25fc	; 0x25fc <SPI_send_char>
			LCD_displayString("off");
    58ac:	80 e5       	ldi	r24, 0x50	; 80
    58ae:	91 e0       	ldi	r25, 0x01	; 1
    58b0:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    58b4:	80 e0       	ldi	r24, 0x00	; 0
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	a6 e9       	ldi	r26, 0x96	; 150
    58ba:	b3 e4       	ldi	r27, 0x43	; 67
    58bc:	89 8f       	std	Y+25, r24	; 0x19
    58be:	9a 8f       	std	Y+26, r25	; 0x1a
    58c0:	ab 8f       	std	Y+27, r26	; 0x1b
    58c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58c4:	69 8d       	ldd	r22, Y+25	; 0x19
    58c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    58c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    58ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    58cc:	20 e0       	ldi	r18, 0x00	; 0
    58ce:	30 e0       	ldi	r19, 0x00	; 0
    58d0:	4a ef       	ldi	r20, 0xFA	; 250
    58d2:	54 e4       	ldi	r21, 0x44	; 68
    58d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58d8:	dc 01       	movw	r26, r24
    58da:	cb 01       	movw	r24, r22
    58dc:	8d 8b       	std	Y+21, r24	; 0x15
    58de:	9e 8b       	std	Y+22, r25	; 0x16
    58e0:	af 8b       	std	Y+23, r26	; 0x17
    58e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    58e4:	6d 89       	ldd	r22, Y+21	; 0x15
    58e6:	7e 89       	ldd	r23, Y+22	; 0x16
    58e8:	8f 89       	ldd	r24, Y+23	; 0x17
    58ea:	98 8d       	ldd	r25, Y+24	; 0x18
    58ec:	20 e0       	ldi	r18, 0x00	; 0
    58ee:	30 e0       	ldi	r19, 0x00	; 0
    58f0:	40 e8       	ldi	r20, 0x80	; 128
    58f2:	5f e3       	ldi	r21, 0x3F	; 63
    58f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58f8:	88 23       	and	r24, r24
    58fa:	2c f4       	brge	.+10     	; 0x5906 <device_manager+0x2a4>
		__ticks = 1;
    58fc:	81 e0       	ldi	r24, 0x01	; 1
    58fe:	90 e0       	ldi	r25, 0x00	; 0
    5900:	9c 8b       	std	Y+20, r25	; 0x14
    5902:	8b 8b       	std	Y+19, r24	; 0x13
    5904:	3f c0       	rjmp	.+126    	; 0x5984 <device_manager+0x322>
	else if (__tmp > 65535)
    5906:	6d 89       	ldd	r22, Y+21	; 0x15
    5908:	7e 89       	ldd	r23, Y+22	; 0x16
    590a:	8f 89       	ldd	r24, Y+23	; 0x17
    590c:	98 8d       	ldd	r25, Y+24	; 0x18
    590e:	20 e0       	ldi	r18, 0x00	; 0
    5910:	3f ef       	ldi	r19, 0xFF	; 255
    5912:	4f e7       	ldi	r20, 0x7F	; 127
    5914:	57 e4       	ldi	r21, 0x47	; 71
    5916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    591a:	18 16       	cp	r1, r24
    591c:	4c f5       	brge	.+82     	; 0x5970 <device_manager+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    591e:	69 8d       	ldd	r22, Y+25	; 0x19
    5920:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5922:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5924:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5926:	20 e0       	ldi	r18, 0x00	; 0
    5928:	30 e0       	ldi	r19, 0x00	; 0
    592a:	40 e2       	ldi	r20, 0x20	; 32
    592c:	51 e4       	ldi	r21, 0x41	; 65
    592e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5932:	dc 01       	movw	r26, r24
    5934:	cb 01       	movw	r24, r22
    5936:	bc 01       	movw	r22, r24
    5938:	cd 01       	movw	r24, r26
    593a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    593e:	dc 01       	movw	r26, r24
    5940:	cb 01       	movw	r24, r22
    5942:	9c 8b       	std	Y+20, r25	; 0x14
    5944:	8b 8b       	std	Y+19, r24	; 0x13
    5946:	0f c0       	rjmp	.+30     	; 0x5966 <device_manager+0x304>
    5948:	88 ec       	ldi	r24, 0xC8	; 200
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	9a 8b       	std	Y+18, r25	; 0x12
    594e:	89 8b       	std	Y+17, r24	; 0x11
    5950:	89 89       	ldd	r24, Y+17	; 0x11
    5952:	9a 89       	ldd	r25, Y+18	; 0x12
    5954:	01 97       	sbiw	r24, 0x01	; 1
    5956:	f1 f7       	brne	.-4      	; 0x5954 <device_manager+0x2f2>
    5958:	9a 8b       	std	Y+18, r25	; 0x12
    595a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    595c:	8b 89       	ldd	r24, Y+19	; 0x13
    595e:	9c 89       	ldd	r25, Y+20	; 0x14
    5960:	01 97       	sbiw	r24, 0x01	; 1
    5962:	9c 8b       	std	Y+20, r25	; 0x14
    5964:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5966:	8b 89       	ldd	r24, Y+19	; 0x13
    5968:	9c 89       	ldd	r25, Y+20	; 0x14
    596a:	00 97       	sbiw	r24, 0x00	; 0
    596c:	69 f7       	brne	.-38     	; 0x5948 <device_manager+0x2e6>
    596e:	8d c0       	rjmp	.+282    	; 0x5a8a <device_manager+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5970:	6d 89       	ldd	r22, Y+21	; 0x15
    5972:	7e 89       	ldd	r23, Y+22	; 0x16
    5974:	8f 89       	ldd	r24, Y+23	; 0x17
    5976:	98 8d       	ldd	r25, Y+24	; 0x18
    5978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    597c:	dc 01       	movw	r26, r24
    597e:	cb 01       	movw	r24, r22
    5980:	9c 8b       	std	Y+20, r25	; 0x14
    5982:	8b 8b       	std	Y+19, r24	; 0x13
    5984:	8b 89       	ldd	r24, Y+19	; 0x13
    5986:	9c 89       	ldd	r25, Y+20	; 0x14
    5988:	98 8b       	std	Y+16, r25	; 0x10
    598a:	8f 87       	std	Y+15, r24	; 0x0f
    598c:	8f 85       	ldd	r24, Y+15	; 0x0f
    598e:	98 89       	ldd	r25, Y+16	; 0x10
    5990:	01 97       	sbiw	r24, 0x01	; 1
    5992:	f1 f7       	brne	.-4      	; 0x5990 <device_manager+0x32e>
    5994:	98 8b       	std	Y+16, r25	; 0x10
    5996:	8f 87       	std	Y+15, r24	; 0x0f
    5998:	78 c0       	rjmp	.+240    	; 0x5a8a <device_manager+0x428>
			_delay_ms(LCD_DELAY);
		}
		else
		{
			LCD_clearScreen();
    599a:	0e 94 85 12 	call	0x250a	; 0x250a <LCD_clearScreen>
			LCD_displayString("wrong");
    599e:	8d ea       	ldi	r24, 0xAD	; 173
    59a0:	91 e0       	ldi	r25, 0x01	; 1
    59a2:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
    59a6:	80 e0       	ldi	r24, 0x00	; 0
    59a8:	90 e0       	ldi	r25, 0x00	; 0
    59aa:	a6 e9       	ldi	r26, 0x96	; 150
    59ac:	b3 e4       	ldi	r27, 0x43	; 67
    59ae:	8b 87       	std	Y+11, r24	; 0x0b
    59b0:	9c 87       	std	Y+12, r25	; 0x0c
    59b2:	ad 87       	std	Y+13, r26	; 0x0d
    59b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    59b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    59ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    59bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    59be:	20 e0       	ldi	r18, 0x00	; 0
    59c0:	30 e0       	ldi	r19, 0x00	; 0
    59c2:	4a ef       	ldi	r20, 0xFA	; 250
    59c4:	54 e4       	ldi	r21, 0x44	; 68
    59c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59ca:	dc 01       	movw	r26, r24
    59cc:	cb 01       	movw	r24, r22
    59ce:	8f 83       	std	Y+7, r24	; 0x07
    59d0:	98 87       	std	Y+8, r25	; 0x08
    59d2:	a9 87       	std	Y+9, r26	; 0x09
    59d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    59d6:	6f 81       	ldd	r22, Y+7	; 0x07
    59d8:	78 85       	ldd	r23, Y+8	; 0x08
    59da:	89 85       	ldd	r24, Y+9	; 0x09
    59dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    59de:	20 e0       	ldi	r18, 0x00	; 0
    59e0:	30 e0       	ldi	r19, 0x00	; 0
    59e2:	40 e8       	ldi	r20, 0x80	; 128
    59e4:	5f e3       	ldi	r21, 0x3F	; 63
    59e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59ea:	88 23       	and	r24, r24
    59ec:	2c f4       	brge	.+10     	; 0x59f8 <device_manager+0x396>
		__ticks = 1;
    59ee:	81 e0       	ldi	r24, 0x01	; 1
    59f0:	90 e0       	ldi	r25, 0x00	; 0
    59f2:	9e 83       	std	Y+6, r25	; 0x06
    59f4:	8d 83       	std	Y+5, r24	; 0x05
    59f6:	3f c0       	rjmp	.+126    	; 0x5a76 <device_manager+0x414>
	else if (__tmp > 65535)
    59f8:	6f 81       	ldd	r22, Y+7	; 0x07
    59fa:	78 85       	ldd	r23, Y+8	; 0x08
    59fc:	89 85       	ldd	r24, Y+9	; 0x09
    59fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a00:	20 e0       	ldi	r18, 0x00	; 0
    5a02:	3f ef       	ldi	r19, 0xFF	; 255
    5a04:	4f e7       	ldi	r20, 0x7F	; 127
    5a06:	57 e4       	ldi	r21, 0x47	; 71
    5a08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a0c:	18 16       	cp	r1, r24
    5a0e:	4c f5       	brge	.+82     	; 0x5a62 <device_manager+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a18:	20 e0       	ldi	r18, 0x00	; 0
    5a1a:	30 e0       	ldi	r19, 0x00	; 0
    5a1c:	40 e2       	ldi	r20, 0x20	; 32
    5a1e:	51 e4       	ldi	r21, 0x41	; 65
    5a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a24:	dc 01       	movw	r26, r24
    5a26:	cb 01       	movw	r24, r22
    5a28:	bc 01       	movw	r22, r24
    5a2a:	cd 01       	movw	r24, r26
    5a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a30:	dc 01       	movw	r26, r24
    5a32:	cb 01       	movw	r24, r22
    5a34:	9e 83       	std	Y+6, r25	; 0x06
    5a36:	8d 83       	std	Y+5, r24	; 0x05
    5a38:	0f c0       	rjmp	.+30     	; 0x5a58 <device_manager+0x3f6>
    5a3a:	88 ec       	ldi	r24, 0xC8	; 200
    5a3c:	90 e0       	ldi	r25, 0x00	; 0
    5a3e:	9c 83       	std	Y+4, r25	; 0x04
    5a40:	8b 83       	std	Y+3, r24	; 0x03
    5a42:	8b 81       	ldd	r24, Y+3	; 0x03
    5a44:	9c 81       	ldd	r25, Y+4	; 0x04
    5a46:	01 97       	sbiw	r24, 0x01	; 1
    5a48:	f1 f7       	brne	.-4      	; 0x5a46 <device_manager+0x3e4>
    5a4a:	9c 83       	std	Y+4, r25	; 0x04
    5a4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a50:	9e 81       	ldd	r25, Y+6	; 0x06
    5a52:	01 97       	sbiw	r24, 0x01	; 1
    5a54:	9e 83       	std	Y+6, r25	; 0x06
    5a56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a58:	8d 81       	ldd	r24, Y+5	; 0x05
    5a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    5a5c:	00 97       	sbiw	r24, 0x00	; 0
    5a5e:	69 f7       	brne	.-38     	; 0x5a3a <device_manager+0x3d8>
    5a60:	14 c0       	rjmp	.+40     	; 0x5a8a <device_manager+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a62:	6f 81       	ldd	r22, Y+7	; 0x07
    5a64:	78 85       	ldd	r23, Y+8	; 0x08
    5a66:	89 85       	ldd	r24, Y+9	; 0x09
    5a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a6e:	dc 01       	movw	r26, r24
    5a70:	cb 01       	movw	r24, r22
    5a72:	9e 83       	std	Y+6, r25	; 0x06
    5a74:	8d 83       	std	Y+5, r24	; 0x05
    5a76:	8d 81       	ldd	r24, Y+5	; 0x05
    5a78:	9e 81       	ldd	r25, Y+6	; 0x06
    5a7a:	9a 83       	std	Y+2, r25	; 0x02
    5a7c:	89 83       	std	Y+1, r24	; 0x01
    5a7e:	89 81       	ldd	r24, Y+1	; 0x01
    5a80:	9a 81       	ldd	r25, Y+2	; 0x02
    5a82:	01 97       	sbiw	r24, 0x01	; 1
    5a84:	f1 f7       	brne	.-4      	; 0x5a82 <device_manager+0x420>
    5a86:	9a 83       	std	Y+2, r25	; 0x02
    5a88:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(LCD_DELAY);
		}

}
    5a8a:	ef 96       	adiw	r28, 0x3f	; 63
    5a8c:	0f b6       	in	r0, 0x3f	; 63
    5a8e:	f8 94       	cli
    5a90:	de bf       	out	0x3e, r29	; 62
    5a92:	0f be       	out	0x3f, r0	; 63
    5a94:	cd bf       	out	0x3d, r28	; 61
    5a96:	cf 91       	pop	r28
    5a98:	df 91       	pop	r29
    5a9a:	0f 91       	pop	r16
    5a9c:	08 95       	ret

00005a9e <timer0_init>:
* PARAMETERS  : Nothing.
*
* Return Value: Nothing.
***********************************************************************/
void timer0_init(void)
{
    5a9e:	df 93       	push	r29
    5aa0:	cf 93       	push	r28
    5aa2:	cd b7       	in	r28, 0x3d	; 61
    5aa4:	de b7       	in	r29, 0x3e	; 62
	    	/* Disable Timer 0 */
	    	TCCR0 = DISABLE_MODULE_VALUE;
    5aa6:	e3 e5       	ldi	r30, 0x53	; 83
    5aa8:	f0 e0       	ldi	r31, 0x00	; 0
    5aaa:	10 82       	st	Z, r1
	    	/* Setting pre scaler */
	    	TCCR0 = (PRESCLR1_VALUE);
    5aac:	e3 e5       	ldi	r30, 0x53	; 83
    5aae:	f0 e0       	ldi	r31, 0x00	; 0
    5ab0:	81 e0       	ldi	r24, 0x01	; 1
    5ab2:	80 83       	st	Z, r24
	    	/* Initializing the timer with zero */
	    	TCNT0 = ZER0_INITIALIZER;
    5ab4:	e2 e5       	ldi	r30, 0x52	; 82
    5ab6:	f0 e0       	ldi	r31, 0x00	; 0
    5ab8:	10 82       	st	Z, r1
				/* Timer overflow interrupt enable*/
				TIMSK |=(1<<TOIE0);
    5aba:	a9 e5       	ldi	r26, 0x59	; 89
    5abc:	b0 e0       	ldi	r27, 0x00	; 0
    5abe:	e9 e5       	ldi	r30, 0x59	; 89
    5ac0:	f0 e0       	ldi	r31, 0x00	; 0
    5ac2:	80 81       	ld	r24, Z
    5ac4:	81 60       	ori	r24, 0x01	; 1
    5ac6:	8c 93       	st	X, r24

	return;
}
    5ac8:	cf 91       	pop	r28
    5aca:	df 91       	pop	r29
    5acc:	08 95       	ret

00005ace <ultrasonic_init>:
uint8 rising_edge=0;
uint32 timer_counter=0;
uint32 distance;
uint8 distance_str[10];

void ultrasonic_init(void){
    5ace:	df 93       	push	r29
    5ad0:	cf 93       	push	r28
    5ad2:	cd b7       	in	r28, 0x3d	; 61
    5ad4:	de b7       	in	r29, 0x3e	; 62

  DIO_SetPinDirection(TRIGGER_PORT,TRIGGER,OUTPUT);//trigger as output
    5ad6:	83 e0       	ldi	r24, 0x03	; 3
    5ad8:	60 e0       	ldi	r22, 0x00	; 0
    5ada:	41 e0       	ldi	r20, 0x01	; 1
    5adc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
  DIO_SetPinDirection( ECHO_PULLUP ,ECHO,INPUT);//echo as input
    5ae0:	83 e0       	ldi	r24, 0x03	; 3
    5ae2:	63 e0       	ldi	r22, 0x03	; 3
    5ae4:	40 e0       	ldi	r20, 0x00	; 0
    5ae6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <DIO_SetPinDirection>
  DIO_SetPinValue(ECHO_PULLUP ,ECHO,HIGH);//set echo
    5aea:	83 e0       	ldi	r24, 0x03	; 3
    5aec:	63 e0       	ldi	r22, 0x03	; 3
    5aee:	41 e0       	ldi	r20, 0x01	; 1
    5af0:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
  enable_ex_interrupt();
    5af4:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <enable_ex_interrupt>
  timer0_init();
    5af8:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <timer0_init>
  return;
}
    5afc:	cf 91       	pop	r28
    5afe:	df 91       	pop	r29
    5b00:	08 95       	ret

00005b02 <enable_ex_interrupt>:

void enable_ex_interrupt(void){
    5b02:	df 93       	push	r29
    5b04:	cf 93       	push	r28
    5b06:	cd b7       	in	r28, 0x3d	; 61
    5b08:	de b7       	in	r29, 0x3e	; 62

  MCUCR |= (1<<ISC10);		// Trigger INT1 on any logic change falling edge on the INT1 pin generates an interrupt request..
    5b0a:	a5 e5       	ldi	r26, 0x55	; 85
    5b0c:	b0 e0       	ldi	r27, 0x00	; 0
    5b0e:	e5 e5       	ldi	r30, 0x55	; 85
    5b10:	f0 e0       	ldi	r31, 0x00	; 0
    5b12:	80 81       	ld	r24, Z
    5b14:	84 60       	ori	r24, 0x04	; 4
    5b16:	8c 93       	st	X, r24
  GICR  |= (1<<INT1);			// Enable INT1 interrupts in GICR register.
    5b18:	ab e5       	ldi	r26, 0x5B	; 91
    5b1a:	b0 e0       	ldi	r27, 0x00	; 0
    5b1c:	eb e5       	ldi	r30, 0x5B	; 91
    5b1e:	f0 e0       	ldi	r31, 0x00	; 0
    5b20:	80 81       	ld	r24, Z
    5b22:	80 68       	ori	r24, 0x80	; 128
    5b24:	8c 93       	st	X, r24

  return;
}
    5b26:	cf 91       	pop	r28
    5b28:	df 91       	pop	r29
    5b2a:	08 95       	ret

00005b2c <ultrasonic_trigger>:
//
void ultrasonic_trigger(void){
    5b2c:	df 93       	push	r29
    5b2e:	cf 93       	push	r28
    5b30:	cd b7       	in	r28, 0x3d	; 61
    5b32:	de b7       	in	r29, 0x3e	; 62
    5b34:	68 97       	sbiw	r28, 0x18	; 24
    5b36:	0f b6       	in	r0, 0x3f	; 63
    5b38:	f8 94       	cli
    5b3a:	de bf       	out	0x3e, r29	; 62
    5b3c:	0f be       	out	0x3f, r0	; 63
    5b3e:	cd bf       	out	0x3d, r28	; 61
	if(!sensor_working){
    5b40:	80 91 bc 01 	lds	r24, 0x01BC
    5b44:	88 23       	and	r24, r24
    5b46:	09 f0       	breq	.+2      	; 0x5b4a <ultrasonic_trigger+0x1e>
    5b48:	cb c0       	rjmp	.+406    	; 0x5ce0 <ultrasonic_trigger+0x1b4>
		DIO_SetPinValue(TRIGGER_PORT ,TRIGGER,HIGH);
    5b4a:	83 e0       	ldi	r24, 0x03	; 3
    5b4c:	60 e0       	ldi	r22, 0x00	; 0
    5b4e:	41 e0       	ldi	r20, 0x01	; 1
    5b50:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
    5b54:	80 e0       	ldi	r24, 0x00	; 0
    5b56:	90 e0       	ldi	r25, 0x00	; 0
    5b58:	a0 e7       	ldi	r26, 0x70	; 112
    5b5a:	b1 e4       	ldi	r27, 0x41	; 65
    5b5c:	8d 8b       	std	Y+21, r24	; 0x15
    5b5e:	9e 8b       	std	Y+22, r25	; 0x16
    5b60:	af 8b       	std	Y+23, r26	; 0x17
    5b62:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5b64:	6d 89       	ldd	r22, Y+21	; 0x15
    5b66:	7e 89       	ldd	r23, Y+22	; 0x16
    5b68:	8f 89       	ldd	r24, Y+23	; 0x17
    5b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    5b6c:	2b ea       	ldi	r18, 0xAB	; 171
    5b6e:	3a ea       	ldi	r19, 0xAA	; 170
    5b70:	4a ea       	ldi	r20, 0xAA	; 170
    5b72:	5e e3       	ldi	r21, 0x3E	; 62
    5b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b78:	dc 01       	movw	r26, r24
    5b7a:	cb 01       	movw	r24, r22
    5b7c:	89 8b       	std	Y+17, r24	; 0x11
    5b7e:	9a 8b       	std	Y+18, r25	; 0x12
    5b80:	ab 8b       	std	Y+19, r26	; 0x13
    5b82:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5b84:	69 89       	ldd	r22, Y+17	; 0x11
    5b86:	7a 89       	ldd	r23, Y+18	; 0x12
    5b88:	8b 89       	ldd	r24, Y+19	; 0x13
    5b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    5b8c:	20 e0       	ldi	r18, 0x00	; 0
    5b8e:	30 e0       	ldi	r19, 0x00	; 0
    5b90:	40 e8       	ldi	r20, 0x80	; 128
    5b92:	5f e3       	ldi	r21, 0x3F	; 63
    5b94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b98:	88 23       	and	r24, r24
    5b9a:	1c f4       	brge	.+6      	; 0x5ba2 <ultrasonic_trigger+0x76>
		__ticks = 1;
    5b9c:	81 e0       	ldi	r24, 0x01	; 1
    5b9e:	88 8b       	std	Y+16, r24	; 0x10
    5ba0:	91 c0       	rjmp	.+290    	; 0x5cc4 <ultrasonic_trigger+0x198>
	else if (__tmp > 255)
    5ba2:	69 89       	ldd	r22, Y+17	; 0x11
    5ba4:	7a 89       	ldd	r23, Y+18	; 0x12
    5ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    5ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    5baa:	20 e0       	ldi	r18, 0x00	; 0
    5bac:	30 e0       	ldi	r19, 0x00	; 0
    5bae:	4f e7       	ldi	r20, 0x7F	; 127
    5bb0:	53 e4       	ldi	r21, 0x43	; 67
    5bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5bb6:	18 16       	cp	r1, r24
    5bb8:	0c f0       	brlt	.+2      	; 0x5bbc <ultrasonic_trigger+0x90>
    5bba:	7b c0       	rjmp	.+246    	; 0x5cb2 <ultrasonic_trigger+0x186>
	{
		_delay_ms(__us / 1000.0);
    5bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    5bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    5bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    5bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    5bc4:	20 e0       	ldi	r18, 0x00	; 0
    5bc6:	30 e0       	ldi	r19, 0x00	; 0
    5bc8:	4a e7       	ldi	r20, 0x7A	; 122
    5bca:	54 e4       	ldi	r21, 0x44	; 68
    5bcc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5bd0:	dc 01       	movw	r26, r24
    5bd2:	cb 01       	movw	r24, r22
    5bd4:	8c 87       	std	Y+12, r24	; 0x0c
    5bd6:	9d 87       	std	Y+13, r25	; 0x0d
    5bd8:	ae 87       	std	Y+14, r26	; 0x0e
    5bda:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bdc:	6c 85       	ldd	r22, Y+12	; 0x0c
    5bde:	7d 85       	ldd	r23, Y+13	; 0x0d
    5be0:	8e 85       	ldd	r24, Y+14	; 0x0e
    5be2:	9f 85       	ldd	r25, Y+15	; 0x0f
    5be4:	20 e0       	ldi	r18, 0x00	; 0
    5be6:	30 e0       	ldi	r19, 0x00	; 0
    5be8:	4a e7       	ldi	r20, 0x7A	; 122
    5bea:	53 e4       	ldi	r21, 0x43	; 67
    5bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bf0:	dc 01       	movw	r26, r24
    5bf2:	cb 01       	movw	r24, r22
    5bf4:	88 87       	std	Y+8, r24	; 0x08
    5bf6:	99 87       	std	Y+9, r25	; 0x09
    5bf8:	aa 87       	std	Y+10, r26	; 0x0a
    5bfa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5bfc:	68 85       	ldd	r22, Y+8	; 0x08
    5bfe:	79 85       	ldd	r23, Y+9	; 0x09
    5c00:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c02:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c04:	20 e0       	ldi	r18, 0x00	; 0
    5c06:	30 e0       	ldi	r19, 0x00	; 0
    5c08:	40 e8       	ldi	r20, 0x80	; 128
    5c0a:	5f e3       	ldi	r21, 0x3F	; 63
    5c0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c10:	88 23       	and	r24, r24
    5c12:	2c f4       	brge	.+10     	; 0x5c1e <ultrasonic_trigger+0xf2>
		__ticks = 1;
    5c14:	81 e0       	ldi	r24, 0x01	; 1
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	9f 83       	std	Y+7, r25	; 0x07
    5c1a:	8e 83       	std	Y+6, r24	; 0x06
    5c1c:	3f c0       	rjmp	.+126    	; 0x5c9c <ultrasonic_trigger+0x170>
	else if (__tmp > 65535)
    5c1e:	68 85       	ldd	r22, Y+8	; 0x08
    5c20:	79 85       	ldd	r23, Y+9	; 0x09
    5c22:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c24:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c26:	20 e0       	ldi	r18, 0x00	; 0
    5c28:	3f ef       	ldi	r19, 0xFF	; 255
    5c2a:	4f e7       	ldi	r20, 0x7F	; 127
    5c2c:	57 e4       	ldi	r21, 0x47	; 71
    5c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c32:	18 16       	cp	r1, r24
    5c34:	4c f5       	brge	.+82     	; 0x5c88 <ultrasonic_trigger+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c36:	6c 85       	ldd	r22, Y+12	; 0x0c
    5c38:	7d 85       	ldd	r23, Y+13	; 0x0d
    5c3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    5c3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    5c3e:	20 e0       	ldi	r18, 0x00	; 0
    5c40:	30 e0       	ldi	r19, 0x00	; 0
    5c42:	40 e2       	ldi	r20, 0x20	; 32
    5c44:	51 e4       	ldi	r21, 0x41	; 65
    5c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c4a:	dc 01       	movw	r26, r24
    5c4c:	cb 01       	movw	r24, r22
    5c4e:	bc 01       	movw	r22, r24
    5c50:	cd 01       	movw	r24, r26
    5c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c56:	dc 01       	movw	r26, r24
    5c58:	cb 01       	movw	r24, r22
    5c5a:	9f 83       	std	Y+7, r25	; 0x07
    5c5c:	8e 83       	std	Y+6, r24	; 0x06
    5c5e:	0f c0       	rjmp	.+30     	; 0x5c7e <ultrasonic_trigger+0x152>
    5c60:	89 e1       	ldi	r24, 0x19	; 25
    5c62:	90 e0       	ldi	r25, 0x00	; 0
    5c64:	9d 83       	std	Y+5, r25	; 0x05
    5c66:	8c 83       	std	Y+4, r24	; 0x04
    5c68:	8c 81       	ldd	r24, Y+4	; 0x04
    5c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    5c6c:	01 97       	sbiw	r24, 0x01	; 1
    5c6e:	f1 f7       	brne	.-4      	; 0x5c6c <ultrasonic_trigger+0x140>
    5c70:	9d 83       	std	Y+5, r25	; 0x05
    5c72:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c74:	8e 81       	ldd	r24, Y+6	; 0x06
    5c76:	9f 81       	ldd	r25, Y+7	; 0x07
    5c78:	01 97       	sbiw	r24, 0x01	; 1
    5c7a:	9f 83       	std	Y+7, r25	; 0x07
    5c7c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c7e:	8e 81       	ldd	r24, Y+6	; 0x06
    5c80:	9f 81       	ldd	r25, Y+7	; 0x07
    5c82:	00 97       	sbiw	r24, 0x00	; 0
    5c84:	69 f7       	brne	.-38     	; 0x5c60 <ultrasonic_trigger+0x134>
    5c86:	24 c0       	rjmp	.+72     	; 0x5cd0 <ultrasonic_trigger+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c88:	68 85       	ldd	r22, Y+8	; 0x08
    5c8a:	79 85       	ldd	r23, Y+9	; 0x09
    5c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c94:	dc 01       	movw	r26, r24
    5c96:	cb 01       	movw	r24, r22
    5c98:	9f 83       	std	Y+7, r25	; 0x07
    5c9a:	8e 83       	std	Y+6, r24	; 0x06
    5c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    5c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    5ca0:	9b 83       	std	Y+3, r25	; 0x03
    5ca2:	8a 83       	std	Y+2, r24	; 0x02
    5ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ca8:	01 97       	sbiw	r24, 0x01	; 1
    5caa:	f1 f7       	brne	.-4      	; 0x5ca8 <ultrasonic_trigger+0x17c>
    5cac:	9b 83       	std	Y+3, r25	; 0x03
    5cae:	8a 83       	std	Y+2, r24	; 0x02
    5cb0:	0f c0       	rjmp	.+30     	; 0x5cd0 <ultrasonic_trigger+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5cb2:	69 89       	ldd	r22, Y+17	; 0x11
    5cb4:	7a 89       	ldd	r23, Y+18	; 0x12
    5cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    5cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    5cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cbe:	dc 01       	movw	r26, r24
    5cc0:	cb 01       	movw	r24, r22
    5cc2:	88 8b       	std	Y+16, r24	; 0x10
    5cc4:	88 89       	ldd	r24, Y+16	; 0x10
    5cc6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5cc8:	89 81       	ldd	r24, Y+1	; 0x01
    5cca:	8a 95       	dec	r24
    5ccc:	f1 f7       	brne	.-4      	; 0x5cca <ultrasonic_trigger+0x19e>
    5cce:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(15);
		DIO_SetPinValue(TRIGGER_PORT ,TRIGGER,LOW);
    5cd0:	83 e0       	ldi	r24, 0x03	; 3
    5cd2:	60 e0       	ldi	r22, 0x00	; 0
    5cd4:	40 e0       	ldi	r20, 0x00	; 0
    5cd6:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
		sensor_working=1;
    5cda:	81 e0       	ldi	r24, 0x01	; 1
    5cdc:	80 93 bc 01 	sts	0x01BC, r24
	}
}
    5ce0:	68 96       	adiw	r28, 0x18	; 24
    5ce2:	0f b6       	in	r0, 0x3f	; 63
    5ce4:	f8 94       	cli
    5ce6:	de bf       	out	0x3e, r29	; 62
    5ce8:	0f be       	out	0x3f, r0	; 63
    5cea:	cd bf       	out	0x3d, r28	; 61
    5cec:	cf 91       	pop	r28
    5cee:	df 91       	pop	r29
    5cf0:	08 95       	ret

00005cf2 <__vector_2>:


ISR(INT1_vect){
    5cf2:	1f 92       	push	r1
    5cf4:	0f 92       	push	r0
    5cf6:	0f b6       	in	r0, 0x3f	; 63
    5cf8:	0f 92       	push	r0
    5cfa:	11 24       	eor	r1, r1
    5cfc:	2f 93       	push	r18
    5cfe:	3f 93       	push	r19
    5d00:	4f 93       	push	r20
    5d02:	5f 93       	push	r21
    5d04:	6f 93       	push	r22
    5d06:	7f 93       	push	r23
    5d08:	8f 93       	push	r24
    5d0a:	9f 93       	push	r25
    5d0c:	af 93       	push	r26
    5d0e:	bf 93       	push	r27
    5d10:	ef 93       	push	r30
    5d12:	ff 93       	push	r31
    5d14:	df 93       	push	r29
    5d16:	cf 93       	push	r28
    5d18:	cd b7       	in	r28, 0x3d	; 61
    5d1a:	de b7       	in	r29, 0x3e	; 62
    5d1c:	2e 97       	sbiw	r28, 0x0e	; 14
    5d1e:	de bf       	out	0x3e, r29	; 62
    5d20:	cd bf       	out	0x3d, r28	; 61
	if(sensor_working==1){
    5d22:	80 91 bc 01 	lds	r24, 0x01BC
    5d26:	81 30       	cpi	r24, 0x01	; 1
    5d28:	09 f0       	breq	.+2      	; 0x5d2c <__vector_2+0x3a>
    5d2a:	cd c0       	rjmp	.+410    	; 0x5ec6 <__vector_2+0x1d4>
		if(rising_edge==0){
    5d2c:	80 91 bd 01 	lds	r24, 0x01BD
    5d30:	88 23       	and	r24, r24
    5d32:	79 f4       	brne	.+30     	; 0x5d52 <__vector_2+0x60>
			TCNT0=0x00;
    5d34:	e2 e5       	ldi	r30, 0x52	; 82
    5d36:	f0 e0       	ldi	r31, 0x00	; 0
    5d38:	10 82       	st	Z, r1
			rising_edge=1;
    5d3a:	81 e0       	ldi	r24, 0x01	; 1
    5d3c:	80 93 bd 01 	sts	0x01BD, r24
			timer_counter=0;
    5d40:	10 92 be 01 	sts	0x01BE, r1
    5d44:	10 92 bf 01 	sts	0x01BF, r1
    5d48:	10 92 c0 01 	sts	0x01C0, r1
    5d4c:	10 92 c1 01 	sts	0x01C1, r1
    5d50:	ba c0       	rjmp	.+372    	; 0x5ec6 <__vector_2+0x1d4>
		}
		else{
			distance=(timer_counter*256+TCNT0)/466;
    5d52:	80 91 be 01 	lds	r24, 0x01BE
    5d56:	90 91 bf 01 	lds	r25, 0x01BF
    5d5a:	a0 91 c0 01 	lds	r26, 0x01C0
    5d5e:	b0 91 c1 01 	lds	r27, 0x01C1
    5d62:	22 27       	eor	r18, r18
    5d64:	38 2f       	mov	r19, r24
    5d66:	49 2f       	mov	r20, r25
    5d68:	5a 2f       	mov	r21, r26
    5d6a:	e2 e5       	ldi	r30, 0x52	; 82
    5d6c:	f0 e0       	ldi	r31, 0x00	; 0
    5d6e:	80 81       	ld	r24, Z
    5d70:	88 2f       	mov	r24, r24
    5d72:	90 e0       	ldi	r25, 0x00	; 0
    5d74:	a0 e0       	ldi	r26, 0x00	; 0
    5d76:	b0 e0       	ldi	r27, 0x00	; 0
    5d78:	82 0f       	add	r24, r18
    5d7a:	93 1f       	adc	r25, r19
    5d7c:	a4 1f       	adc	r26, r20
    5d7e:	b5 1f       	adc	r27, r21
    5d80:	22 ed       	ldi	r18, 0xD2	; 210
    5d82:	31 e0       	ldi	r19, 0x01	; 1
    5d84:	40 e0       	ldi	r20, 0x00	; 0
    5d86:	50 e0       	ldi	r21, 0x00	; 0
    5d88:	bc 01       	movw	r22, r24
    5d8a:	cd 01       	movw	r24, r26
    5d8c:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__udivmodsi4>
    5d90:	da 01       	movw	r26, r20
    5d92:	c9 01       	movw	r24, r18
    5d94:	80 93 c2 01 	sts	0x01C2, r24
    5d98:	90 93 c3 01 	sts	0x01C3, r25
    5d9c:	a0 93 c4 01 	sts	0x01C4, r26
    5da0:	b0 93 c5 01 	sts	0x01C5, r27
			if(distance<400){
    5da4:	80 91 c2 01 	lds	r24, 0x01C2
    5da8:	90 91 c3 01 	lds	r25, 0x01C3
    5dac:	a0 91 c4 01 	lds	r26, 0x01C4
    5db0:	b0 91 c5 01 	lds	r27, 0x01C5
    5db4:	80 39       	cpi	r24, 0x90	; 144
    5db6:	21 e0       	ldi	r18, 0x01	; 1
    5db8:	92 07       	cpc	r25, r18
    5dba:	20 e0       	ldi	r18, 0x00	; 0
    5dbc:	a2 07       	cpc	r26, r18
    5dbe:	20 e0       	ldi	r18, 0x00	; 0
    5dc0:	b2 07       	cpc	r27, r18
    5dc2:	28 f4       	brcc	.+10     	; 0x5dce <__vector_2+0xdc>
				DIO_SetPinValue(TRIGGER_PORT ,7,HIGH);
    5dc4:	83 e0       	ldi	r24, 0x03	; 3
    5dc6:	67 e0       	ldi	r22, 0x07	; 7
    5dc8:	41 e0       	ldi	r20, 0x01	; 1
    5dca:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_SetPinValue>
    5dce:	80 e0       	ldi	r24, 0x00	; 0
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	a0 e2       	ldi	r26, 0x20	; 32
    5dd4:	b2 e4       	ldi	r27, 0x42	; 66
    5dd6:	8b 87       	std	Y+11, r24	; 0x0b
    5dd8:	9c 87       	std	Y+12, r25	; 0x0c
    5dda:	ad 87       	std	Y+13, r26	; 0x0d
    5ddc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    5de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5de6:	20 e0       	ldi	r18, 0x00	; 0
    5de8:	30 e0       	ldi	r19, 0x00	; 0
    5dea:	4a e7       	ldi	r20, 0x7A	; 122
    5dec:	53 e4       	ldi	r21, 0x43	; 67
    5dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5df2:	dc 01       	movw	r26, r24
    5df4:	cb 01       	movw	r24, r22
    5df6:	8f 83       	std	Y+7, r24	; 0x07
    5df8:	98 87       	std	Y+8, r25	; 0x08
    5dfa:	a9 87       	std	Y+9, r26	; 0x09
    5dfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    5e00:	78 85       	ldd	r23, Y+8	; 0x08
    5e02:	89 85       	ldd	r24, Y+9	; 0x09
    5e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e06:	20 e0       	ldi	r18, 0x00	; 0
    5e08:	30 e0       	ldi	r19, 0x00	; 0
    5e0a:	40 e8       	ldi	r20, 0x80	; 128
    5e0c:	5f e3       	ldi	r21, 0x3F	; 63
    5e0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e12:	88 23       	and	r24, r24
    5e14:	2c f4       	brge	.+10     	; 0x5e20 <__vector_2+0x12e>
		__ticks = 1;
    5e16:	81 e0       	ldi	r24, 0x01	; 1
    5e18:	90 e0       	ldi	r25, 0x00	; 0
    5e1a:	9e 83       	std	Y+6, r25	; 0x06
    5e1c:	8d 83       	std	Y+5, r24	; 0x05
    5e1e:	3f c0       	rjmp	.+126    	; 0x5e9e <__vector_2+0x1ac>
	else if (__tmp > 65535)
    5e20:	6f 81       	ldd	r22, Y+7	; 0x07
    5e22:	78 85       	ldd	r23, Y+8	; 0x08
    5e24:	89 85       	ldd	r24, Y+9	; 0x09
    5e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e28:	20 e0       	ldi	r18, 0x00	; 0
    5e2a:	3f ef       	ldi	r19, 0xFF	; 255
    5e2c:	4f e7       	ldi	r20, 0x7F	; 127
    5e2e:	57 e4       	ldi	r21, 0x47	; 71
    5e30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e34:	18 16       	cp	r1, r24
    5e36:	4c f5       	brge	.+82     	; 0x5e8a <__vector_2+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e40:	20 e0       	ldi	r18, 0x00	; 0
    5e42:	30 e0       	ldi	r19, 0x00	; 0
    5e44:	40 e2       	ldi	r20, 0x20	; 32
    5e46:	51 e4       	ldi	r21, 0x41	; 65
    5e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e4c:	dc 01       	movw	r26, r24
    5e4e:	cb 01       	movw	r24, r22
    5e50:	bc 01       	movw	r22, r24
    5e52:	cd 01       	movw	r24, r26
    5e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e58:	dc 01       	movw	r26, r24
    5e5a:	cb 01       	movw	r24, r22
    5e5c:	9e 83       	std	Y+6, r25	; 0x06
    5e5e:	8d 83       	std	Y+5, r24	; 0x05
    5e60:	0f c0       	rjmp	.+30     	; 0x5e80 <__vector_2+0x18e>
    5e62:	89 e1       	ldi	r24, 0x19	; 25
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	9c 83       	std	Y+4, r25	; 0x04
    5e68:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    5e6e:	01 97       	sbiw	r24, 0x01	; 1
    5e70:	f1 f7       	brne	.-4      	; 0x5e6e <__vector_2+0x17c>
    5e72:	9c 83       	std	Y+4, r25	; 0x04
    5e74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e76:	8d 81       	ldd	r24, Y+5	; 0x05
    5e78:	9e 81       	ldd	r25, Y+6	; 0x06
    5e7a:	01 97       	sbiw	r24, 0x01	; 1
    5e7c:	9e 83       	std	Y+6, r25	; 0x06
    5e7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e80:	8d 81       	ldd	r24, Y+5	; 0x05
    5e82:	9e 81       	ldd	r25, Y+6	; 0x06
    5e84:	00 97       	sbiw	r24, 0x00	; 0
    5e86:	69 f7       	brne	.-38     	; 0x5e62 <__vector_2+0x170>
    5e88:	14 c0       	rjmp	.+40     	; 0x5eb2 <__vector_2+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    5e8c:	78 85       	ldd	r23, Y+8	; 0x08
    5e8e:	89 85       	ldd	r24, Y+9	; 0x09
    5e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e96:	dc 01       	movw	r26, r24
    5e98:	cb 01       	movw	r24, r22
    5e9a:	9e 83       	std	Y+6, r25	; 0x06
    5e9c:	8d 83       	std	Y+5, r24	; 0x05
    5e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    5ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ea2:	9a 83       	std	Y+2, r25	; 0x02
    5ea4:	89 83       	std	Y+1, r24	; 0x01
    5ea6:	89 81       	ldd	r24, Y+1	; 0x01
    5ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    5eaa:	01 97       	sbiw	r24, 0x01	; 1
    5eac:	f1 f7       	brne	.-4      	; 0x5eaa <__vector_2+0x1b8>
    5eae:	9a 83       	std	Y+2, r25	; 0x02
    5eb0:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(40);
			timer_counter=0;
    5eb2:	10 92 be 01 	sts	0x01BE, r1
    5eb6:	10 92 bf 01 	sts	0x01BF, r1
    5eba:	10 92 c0 01 	sts	0x01C0, r1
    5ebe:	10 92 c1 01 	sts	0x01C1, r1
			rising_edge=0;
    5ec2:	10 92 bd 01 	sts	0x01BD, r1
		}
	}}
    5ec6:	2e 96       	adiw	r28, 0x0e	; 14
    5ec8:	de bf       	out	0x3e, r29	; 62
    5eca:	cd bf       	out	0x3d, r28	; 61
    5ecc:	cf 91       	pop	r28
    5ece:	df 91       	pop	r29
    5ed0:	ff 91       	pop	r31
    5ed2:	ef 91       	pop	r30
    5ed4:	bf 91       	pop	r27
    5ed6:	af 91       	pop	r26
    5ed8:	9f 91       	pop	r25
    5eda:	8f 91       	pop	r24
    5edc:	7f 91       	pop	r23
    5ede:	6f 91       	pop	r22
    5ee0:	5f 91       	pop	r21
    5ee2:	4f 91       	pop	r20
    5ee4:	3f 91       	pop	r19
    5ee6:	2f 91       	pop	r18
    5ee8:	0f 90       	pop	r0
    5eea:	0f be       	out	0x3f, r0	; 63
    5eec:	0f 90       	pop	r0
    5eee:	1f 90       	pop	r1
    5ef0:	18 95       	reti

00005ef2 <__vector_9>:

ISR(TIMER0_OVF_vect){
    5ef2:	1f 92       	push	r1
    5ef4:	0f 92       	push	r0
    5ef6:	0f b6       	in	r0, 0x3f	; 63
    5ef8:	0f 92       	push	r0
    5efa:	11 24       	eor	r1, r1
    5efc:	2f 93       	push	r18
    5efe:	8f 93       	push	r24
    5f00:	9f 93       	push	r25
    5f02:	af 93       	push	r26
    5f04:	bf 93       	push	r27
    5f06:	ef 93       	push	r30
    5f08:	ff 93       	push	r31
    5f0a:	df 93       	push	r29
    5f0c:	cf 93       	push	r28
    5f0e:	cd b7       	in	r28, 0x3d	; 61
    5f10:	de b7       	in	r29, 0x3e	; 62
	timer_counter++;
    5f12:	80 91 be 01 	lds	r24, 0x01BE
    5f16:	90 91 bf 01 	lds	r25, 0x01BF
    5f1a:	a0 91 c0 01 	lds	r26, 0x01C0
    5f1e:	b0 91 c1 01 	lds	r27, 0x01C1
    5f22:	01 96       	adiw	r24, 0x01	; 1
    5f24:	a1 1d       	adc	r26, r1
    5f26:	b1 1d       	adc	r27, r1
    5f28:	80 93 be 01 	sts	0x01BE, r24
    5f2c:	90 93 bf 01 	sts	0x01BF, r25
    5f30:	a0 93 c0 01 	sts	0x01C0, r26
    5f34:	b0 93 c1 01 	sts	0x01C1, r27
	if(timer_counter >730){
    5f38:	80 91 be 01 	lds	r24, 0x01BE
    5f3c:	90 91 bf 01 	lds	r25, 0x01BF
    5f40:	a0 91 c0 01 	lds	r26, 0x01C0
    5f44:	b0 91 c1 01 	lds	r27, 0x01C1
    5f48:	8b 3d       	cpi	r24, 0xDB	; 219
    5f4a:	22 e0       	ldi	r18, 0x02	; 2
    5f4c:	92 07       	cpc	r25, r18
    5f4e:	20 e0       	ldi	r18, 0x00	; 0
    5f50:	a2 07       	cpc	r26, r18
    5f52:	20 e0       	ldi	r18, 0x00	; 0
    5f54:	b2 07       	cpc	r27, r18
    5f56:	78 f0       	brcs	.+30     	; 0x5f76 <__vector_9+0x84>
		TCNT0=0x00;
    5f58:	e2 e5       	ldi	r30, 0x52	; 82
    5f5a:	f0 e0       	ldi	r31, 0x00	; 0
    5f5c:	10 82       	st	Z, r1
		sensor_working=0;
    5f5e:	10 92 bc 01 	sts	0x01BC, r1
		rising_edge=0;
    5f62:	10 92 bd 01 	sts	0x01BD, r1
		timer_counter=0;
    5f66:	10 92 be 01 	sts	0x01BE, r1
    5f6a:	10 92 bf 01 	sts	0x01BF, r1
    5f6e:	10 92 c0 01 	sts	0x01C0, r1
    5f72:	10 92 c1 01 	sts	0x01C1, r1
	}

}
    5f76:	cf 91       	pop	r28
    5f78:	df 91       	pop	r29
    5f7a:	ff 91       	pop	r31
    5f7c:	ef 91       	pop	r30
    5f7e:	bf 91       	pop	r27
    5f80:	af 91       	pop	r26
    5f82:	9f 91       	pop	r25
    5f84:	8f 91       	pop	r24
    5f86:	2f 91       	pop	r18
    5f88:	0f 90       	pop	r0
    5f8a:	0f be       	out	0x3f, r0	; 63
    5f8c:	0f 90       	pop	r0
    5f8e:	1f 90       	pop	r1
    5f90:	18 95       	reti

00005f92 <__udivmodhi4>:
    5f92:	aa 1b       	sub	r26, r26
    5f94:	bb 1b       	sub	r27, r27
    5f96:	51 e1       	ldi	r21, 0x11	; 17
    5f98:	07 c0       	rjmp	.+14     	; 0x5fa8 <__udivmodhi4_ep>

00005f9a <__udivmodhi4_loop>:
    5f9a:	aa 1f       	adc	r26, r26
    5f9c:	bb 1f       	adc	r27, r27
    5f9e:	a6 17       	cp	r26, r22
    5fa0:	b7 07       	cpc	r27, r23
    5fa2:	10 f0       	brcs	.+4      	; 0x5fa8 <__udivmodhi4_ep>
    5fa4:	a6 1b       	sub	r26, r22
    5fa6:	b7 0b       	sbc	r27, r23

00005fa8 <__udivmodhi4_ep>:
    5fa8:	88 1f       	adc	r24, r24
    5faa:	99 1f       	adc	r25, r25
    5fac:	5a 95       	dec	r21
    5fae:	a9 f7       	brne	.-22     	; 0x5f9a <__udivmodhi4_loop>
    5fb0:	80 95       	com	r24
    5fb2:	90 95       	com	r25
    5fb4:	bc 01       	movw	r22, r24
    5fb6:	cd 01       	movw	r24, r26
    5fb8:	08 95       	ret

00005fba <__udivmodsi4>:
    5fba:	a1 e2       	ldi	r26, 0x21	; 33
    5fbc:	1a 2e       	mov	r1, r26
    5fbe:	aa 1b       	sub	r26, r26
    5fc0:	bb 1b       	sub	r27, r27
    5fc2:	fd 01       	movw	r30, r26
    5fc4:	0d c0       	rjmp	.+26     	; 0x5fe0 <__udivmodsi4_ep>

00005fc6 <__udivmodsi4_loop>:
    5fc6:	aa 1f       	adc	r26, r26
    5fc8:	bb 1f       	adc	r27, r27
    5fca:	ee 1f       	adc	r30, r30
    5fcc:	ff 1f       	adc	r31, r31
    5fce:	a2 17       	cp	r26, r18
    5fd0:	b3 07       	cpc	r27, r19
    5fd2:	e4 07       	cpc	r30, r20
    5fd4:	f5 07       	cpc	r31, r21
    5fd6:	20 f0       	brcs	.+8      	; 0x5fe0 <__udivmodsi4_ep>
    5fd8:	a2 1b       	sub	r26, r18
    5fda:	b3 0b       	sbc	r27, r19
    5fdc:	e4 0b       	sbc	r30, r20
    5fde:	f5 0b       	sbc	r31, r21

00005fe0 <__udivmodsi4_ep>:
    5fe0:	66 1f       	adc	r22, r22
    5fe2:	77 1f       	adc	r23, r23
    5fe4:	88 1f       	adc	r24, r24
    5fe6:	99 1f       	adc	r25, r25
    5fe8:	1a 94       	dec	r1
    5fea:	69 f7       	brne	.-38     	; 0x5fc6 <__udivmodsi4_loop>
    5fec:	60 95       	com	r22
    5fee:	70 95       	com	r23
    5ff0:	80 95       	com	r24
    5ff2:	90 95       	com	r25
    5ff4:	9b 01       	movw	r18, r22
    5ff6:	ac 01       	movw	r20, r24
    5ff8:	bd 01       	movw	r22, r26
    5ffa:	cf 01       	movw	r24, r30
    5ffc:	08 95       	ret

00005ffe <__prologue_saves__>:
    5ffe:	2f 92       	push	r2
    6000:	3f 92       	push	r3
    6002:	4f 92       	push	r4
    6004:	5f 92       	push	r5
    6006:	6f 92       	push	r6
    6008:	7f 92       	push	r7
    600a:	8f 92       	push	r8
    600c:	9f 92       	push	r9
    600e:	af 92       	push	r10
    6010:	bf 92       	push	r11
    6012:	cf 92       	push	r12
    6014:	df 92       	push	r13
    6016:	ef 92       	push	r14
    6018:	ff 92       	push	r15
    601a:	0f 93       	push	r16
    601c:	1f 93       	push	r17
    601e:	cf 93       	push	r28
    6020:	df 93       	push	r29
    6022:	cd b7       	in	r28, 0x3d	; 61
    6024:	de b7       	in	r29, 0x3e	; 62
    6026:	ca 1b       	sub	r28, r26
    6028:	db 0b       	sbc	r29, r27
    602a:	0f b6       	in	r0, 0x3f	; 63
    602c:	f8 94       	cli
    602e:	de bf       	out	0x3e, r29	; 62
    6030:	0f be       	out	0x3f, r0	; 63
    6032:	cd bf       	out	0x3d, r28	; 61
    6034:	09 94       	ijmp

00006036 <__epilogue_restores__>:
    6036:	2a 88       	ldd	r2, Y+18	; 0x12
    6038:	39 88       	ldd	r3, Y+17	; 0x11
    603a:	48 88       	ldd	r4, Y+16	; 0x10
    603c:	5f 84       	ldd	r5, Y+15	; 0x0f
    603e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6040:	7d 84       	ldd	r7, Y+13	; 0x0d
    6042:	8c 84       	ldd	r8, Y+12	; 0x0c
    6044:	9b 84       	ldd	r9, Y+11	; 0x0b
    6046:	aa 84       	ldd	r10, Y+10	; 0x0a
    6048:	b9 84       	ldd	r11, Y+9	; 0x09
    604a:	c8 84       	ldd	r12, Y+8	; 0x08
    604c:	df 80       	ldd	r13, Y+7	; 0x07
    604e:	ee 80       	ldd	r14, Y+6	; 0x06
    6050:	fd 80       	ldd	r15, Y+5	; 0x05
    6052:	0c 81       	ldd	r16, Y+4	; 0x04
    6054:	1b 81       	ldd	r17, Y+3	; 0x03
    6056:	aa 81       	ldd	r26, Y+2	; 0x02
    6058:	b9 81       	ldd	r27, Y+1	; 0x01
    605a:	ce 0f       	add	r28, r30
    605c:	d1 1d       	adc	r29, r1
    605e:	0f b6       	in	r0, 0x3f	; 63
    6060:	f8 94       	cli
    6062:	de bf       	out	0x3e, r29	; 62
    6064:	0f be       	out	0x3f, r0	; 63
    6066:	cd bf       	out	0x3d, r28	; 61
    6068:	ed 01       	movw	r28, r26
    606a:	08 95       	ret

0000606c <__eerd_byte_m16>:
    606c:	e1 99       	sbic	0x1c, 1	; 28
    606e:	fe cf       	rjmp	.-4      	; 0x606c <__eerd_byte_m16>
    6070:	9f bb       	out	0x1f, r25	; 31
    6072:	8e bb       	out	0x1e, r24	; 30
    6074:	e0 9a       	sbi	0x1c, 0	; 28
    6076:	99 27       	eor	r25, r25
    6078:	8d b3       	in	r24, 0x1d	; 29
    607a:	08 95       	ret

0000607c <__eewr_byte_m16>:
    607c:	26 2f       	mov	r18, r22

0000607e <__eewr_r18_m16>:
    607e:	e1 99       	sbic	0x1c, 1	; 28
    6080:	fe cf       	rjmp	.-4      	; 0x607e <__eewr_r18_m16>
    6082:	9f bb       	out	0x1f, r25	; 31
    6084:	8e bb       	out	0x1e, r24	; 30
    6086:	2d bb       	out	0x1d, r18	; 29
    6088:	0f b6       	in	r0, 0x3f	; 63
    608a:	f8 94       	cli
    608c:	e2 9a       	sbi	0x1c, 2	; 28
    608e:	e1 9a       	sbi	0x1c, 1	; 28
    6090:	0f be       	out	0x3f, r0	; 63
    6092:	01 96       	adiw	r24, 0x01	; 1
    6094:	08 95       	ret

00006096 <_exit>:
    6096:	f8 94       	cli

00006098 <__stop_program>:
    6098:	ff cf       	rjmp	.-2      	; 0x6098 <__stop_program>
